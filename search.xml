<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AOP实现操作日志记录</title>
    <url>/2022/05/03/AOP%E5%AE%9E%E7%8E%B0%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>Spring的aop切面编程技术切到自定义注解上，针对不同注解标志进行参数解析，记录日志。<span id="more"></span></p>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="日志实体类"><a href="#日志实体类" class="headerlink" title="日志实体类"></a>日志实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Record</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName; <span class="comment">//用户名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String operation; <span class="comment">//操作</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createDate; <span class="comment">//操作时间</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义注解类"><a href="#自定义注解类" class="headerlink" title="自定义注解类"></a>自定义注解类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义注解类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span> <span class="comment">//注解放置的目标位置,METHOD是可注解在方法级别上</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">//注解在哪个阶段执行</span></span><br><span class="line"><span class="meta">@Documented</span> <span class="comment">//生成文档</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyRecord &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建aop切面实现类"><a href="#创建aop切面实现类" class="headerlink" title="创建aop切面实现类"></a>创建aop切面实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 系统日志：切面处理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecordAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RecordService recordService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义切点 @Pointcut</span></span><br><span class="line">    <span class="comment">//在注解的位置切入代码</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation( com.example.record.MyRecord)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logPoinCut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//切面 配置通知</span></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;logPoinCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveRecord</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;切面。。。。。&quot;</span>);</span><br><span class="line">        <span class="comment">//保存日志</span></span><br><span class="line">        <span class="type">Record</span> <span class="variable">record</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Record</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从切面织入点处通过反射机制获取织入点处的方法</span></span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        <span class="comment">//获取切入点所在的方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> signature.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取操作</span></span><br><span class="line">        <span class="type">MyRecord</span> <span class="variable">myRecord</span> <span class="operator">=</span> method.getAnnotation(MyRecord.class);</span><br><span class="line">        <span class="keyword">if</span> (myRecord != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> myRecord.value();</span><br><span class="line">            sysLog.setOperation(value);<span class="comment">//保存获取的操作</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        record.setCreateDate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">//获取用户名</span></span><br><span class="line">        record.setUsername(ShiroUtils.getUserEntity().getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用service保存SysLog实体类到数据库</span></span><br><span class="line">        recordService.save(record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在需要监控的方法上添加-aop的自定义注解"><a href="#在需要监控的方法上添加-aop的自定义注解" class="headerlink" title="在需要监控的方法上添加 aop的自定义注解"></a>在需要监控的方法上添加 aop的自定义注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如在contoller类的方法上加注解</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sys/menu&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysMenuController</span> <span class="keyword">extends</span> <span class="title class_">AbstractController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysMenuService sysMenuService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyRecord(value = &quot;删除菜单记录&quot;)</span>  <span class="comment">//这里添加了AOP的自定义注解</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/del&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">deleteBatch</span><span class="params">(<span class="meta">@RequestBody</span> Long[] menuIds)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Long menuId : menuIds) &#123;</span><br><span class="line">            <span class="keyword">if</span> (menuId &lt;= <span class="number">31</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> R.error(<span class="string">&quot;系统菜单，不能删除&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sysMenuService.deleteBatch(menuIds);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.ok(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Collection接口常用方法</title>
    <url>/2022/05/04/Collection%E6%8E%A5%E5%8F%A3%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Collection接口下包含的方法<span id="more"></span></p>
<ol>
<li>size():返回集合中元素的个数</li>
<li>add(Object     obj):向集合中添加一个元素</li>
<li>addAll(Colletion     coll):将形参coll包含的所有元素添加到当前集合中</li>
<li>isEmpty():判断这个集合是否为空</li>
<li>clear():清空集合元素</li>
<li>contains(Object     obj):判断集合中是否包含指定的obj元素。判断的依据：根据元素所在类的equals()方法进行判断，如果存入集合中的元素是自定义的类对象，自定义类要重写equals()方法</li>
<li>constainsAll(Collection     coll):判断当前集合中是否包含coll的所有元素</li>
<li>rentainAll(Collection     coll):求当前集合与coll的共有集合，返回给当前集合</li>
<li>remove(Object     obj):删除集合中obj元素，若删除成功，返回ture否则false</li>
<li>removeAll(Collection     coll):从当前集合中删除包含coll的元素</li>
<li>equals(Object     obj):判断集合中的所有元素 是否相同</li>
<li>hashCode():返回集合的哈希值</li>
<li>toArray(T[]     a):将集合转化为数组。如有参数，返回数组的运行时类型与指定数组的运行时类型相同。</li>
<li>iterator():返回一个Iterator接口实现类的对象,进而实现集合的遍历。</li>
<li>数组转换为集合：Arrays.asList(数组)</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>ConfigurationProperties注解</title>
    <url>/2022/05/03/ConfigurationProperties%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<p>@ConfigurationProperties注解在SpringBoot中的使用。在配置多数据源时用到了这个注释，详细了解一下。<span id="more"></span></p>
<h3 id="基本使用方式"><a href="#基本使用方式" class="headerlink" title="基本使用方式"></a>基本使用方式</h3><p>获取配置文件的数据时，我们通常使用自带的@Value注解，在使用的类中声明一个final类型的常量，就可以随意是使用了。除了这一个还有一个注解，就是@ConfigurationProperties。不过这个注解是加在Bean上使用，指定配置数据的前缀，对应的配置数据就会自动加载到Bean中。</p>
<h4 id="与-Value的区别"><a href="#与-Value的区别" class="headerlink" title="与@Value的区别"></a>与@Value的区别</h4><img src="/2022/05/03/ConfigurationProperties%E6%B3%A8%E8%A7%A3/20200309141758134.png" class title="img">

<p>示例：多数据源的数据库配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#主数据库</span></span><br><span class="line"><span class="attr">primary.spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">primary.spring.datasource.jdbc-url</span>=<span class="string">jdbc:mysql://localhost:3306/vueblog?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line"><span class="attr">primary.spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">primary.spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"><span class="comment">#备数据库</span></span><br><span class="line"><span class="attr">secondary.spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">secondary.spring.datasource.jdbc-url</span>=<span class="string">jdbc:mysql://localhost:3306/vueuser?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line"><span class="attr">secondary.spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">secondary.spring.datasource.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>使用方式：在Bean方法上加上注解，在使用时，配置数据就会自动注入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主数据源配置</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Bean(&quot;primary&quot;)</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;primary.spring.datasource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">primaryDataSourceProperties</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>在源码中，SpringBoot主要帮助我们做了两件事情：</p>
<ul>
<li>获取到使用@ConfigurationProperties的类。</li>
<li>解析配置文件，并把对应的值设置到我们的Bean中。</li>
</ul>
<p><code>BeanPostProcessor</code>在Spring的Bean初始化之前与之后执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"> </span><br><span class="line">    Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这两个方法实现BeanPostProcessor接口之后，检查每一个初始化成功的Bean，如果使用了注解，那么就把从配置文件中解析出来的数据，使用反射技术注入进去。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>ControllerAdvice注解</title>
    <url>/2022/05/03/ControllerAdvice%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<p>ControllerAdvice注解用于实现Controller层的全局异常捕获，可以自定义捕获特定异常进行处理。<span id="more"></span></p>
<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p><a href="https://docs.spring.io/spring-framework/docs/5.0.0.M1/javadoc-api/org/springframework/web/bind/annotation/ControllerAdvice.html">ControllerAdvice文档</a></p>
<blockquote>
<p>Serves as a specialization of @Component, allowing for implementation classes to be autodetected through classpath scanning.</p>
<p>It is typically used to define @ExceptionHandler, @InitBinder, and @ModelAttribute methods that apply to all @RequestMapping methods.</p>
<p>Note that those checks are done at runtime, so adding many attributes and using multiple strategies may have negative impacts (complexity, performance).</p>
</blockquote>
<p>官方文档说通常用于定义@ExceptionHandler、@InitBinder 和@ModelAttribute方法，应用于所有的@RequestMapping方法。这句话说明全局异常只应用于Controller层，对于Service层的异常只能抛出，返回给Controller处理。最后一句是提示这个检查是在程序运行时执行的，所以定于全局异常是如果做太多的处理，可能会对程序有不利的影响。</p>
<h4 id="InitBinder"><a href="#InitBinder" class="headerlink" title="@InitBinder"></a>@InitBinder</h4><p>首先,该注解被解析的时机，是该匹配Controller的请求执行映射的方法之前; 同时 @InitBinder标注的方法执行是多次的，一次请求来就执行一次。</p>
<p>当某个Controller上的第一次请求由SpringMvc前端控制器匹配到该Controller之后，根据Controller的 class 类型查找，所有方法上标注了@InitBinder的方法，并且存入RequestMappingHandlerAdapter的 initBinderCache，下次一请求执行对应业务方法之前时,可以走initBinderCache缓存，而不用再去解析@InitBinder； 所以 initBinder是controller级别的，一个Controller实例中的所有@initBinder 只对该Controller有效；</p>
<h4 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h4><p>被@ModelAttribute注释的方法会在此controller每个方法执行前被执行。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldController</span> &#123;</span><br><span class="line">    <span class="meta">@ModelAttribute</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">populateModel</span><span class="params">(<span class="meta">@RequestParam</span> String abc, Model model)</span> &#123;</span><br><span class="line">         model.addAttribute(<span class="string">&quot;attributeName&quot;</span>, abc);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/helloWorld&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">helloWorld</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;helloWorld&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>这个例子，在获得请求&#x2F;helloWorld 后，populateModel方法在helloWorld方法之前先被调用，它把请求参数（&#x2F;helloWorld?abc&#x3D;text）加入到一个名为attributeName的model属性中，在它执行后 helloWorld被调用，返回视图名helloWorld和model已由@ModelAttribute方法生产好了。</p>
<p>这个例子中model属性名称和model属性对象由model.addAttribute()实现，不过前提是要在方法中加入一个Model类型的参数。</p>
<h3 id="全局异常示例"><a href="#全局异常示例" class="headerlink" title="全局异常示例"></a>全局异常示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.WebDataBinder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyControllerAdvice</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 应用到所有<span class="doctag">@RequestMapping</span>注解方法，在其执行之前初始化数据绑定器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> binder</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@InitBinder</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initBinder</span><span class="params">(WebDataBinder binder)</span> &#123;&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把值绑定到Model中，使全局<span class="doctag">@RequestMapping</span>可以获取到该值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ModelAttribute</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAttributes</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;Date&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全局异常捕捉处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">errorHandler</span><span class="params">(Exception ex)</span> &#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动应用后，被 @ExceptionHandler、@InitBinder、@ModelAttribute 注解的方法，都会作用在 被 @RequestMapping 注解的方法上。</p>
<p>@ExceptionHandler 拦截了异常，我们可以通过该注解实现自定义异常处理。其中，@ExceptionHandler 配置的 value 指定需要拦截的异常类型，上面拦截了 Exception.class 这种异常。</p>
<h3 id="自定义异常处理"><a href="#自定义异常处理" class="headerlink" title="自定义异常处理"></a>自定义异常处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.markhub.common.lang.Result;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.ShiroException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.ObjectError;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.MethodArgumentNotValidException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//权限异常</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.UNAUTHORIZED)</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = ShiroException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">handler</span><span class="params">(ShiroException e)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;运行时异常：--------------&#123;&#125;&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="number">401</span>,e.getMessage(),<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实体校验异常</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">handler</span><span class="params">(MethodArgumentNotValidException e)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;实体校验异常：--------------&#123;&#125;&quot;</span>, e);</span><br><span class="line">        <span class="type">BindingResult</span> <span class="variable">bindingResult</span> <span class="operator">=</span> e.getBindingResult();</span><br><span class="line">        <span class="type">ObjectError</span> <span class="variable">objectError</span> <span class="operator">=</span> bindingResult.getAllErrors().stream().findFirst().get();</span><br><span class="line">        <span class="keyword">return</span> Result.fail(objectError.getDefaultMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = IllegalArgumentException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">handler</span><span class="params">(IllegalArgumentException e)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;Assert异常：--------------&#123;&#125;&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> Result.fail(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = RuntimeException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">handler</span><span class="params">(RuntimeException e)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;运行时异常：--------------&#123;&#125;&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> Result.fail(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>DateTimeFormatter时间格式化</title>
    <url>/2022/01/09/DateTimeFormatter%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    <content><![CDATA[<p>DateTimeFormatter类提供了三种时间格式化方法。<span id="more"></span></p>
<h6 id="默认格式"><a href="#默认格式" class="headerlink" title="默认格式"></a>默认格式</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1.新建一个DateTimeFormatter对象</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">isoDate</span> <span class="operator">=</span> DateTimeFormatter.ISO_DATE;</span><br><span class="line">        </span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt1</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.调用该对象的format方法，参数是需要格式化的LocalDateTime对象。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> isoDate.format(ldt1);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;时间是：&quot;</span> + format);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="自定义格式"><a href="#自定义格式" class="headerlink" title="自定义格式"></a>自定义格式</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1.新建一个DateTimeFormatter对象，调用ofPattern方法。</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">pattern</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy年MM月dd日 HH时mm分ss秒&quot;</span>, Locale.CHINA);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.调用该对象的format方法，参数是需要格式化的LocalDateTime对象。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> pattern.format(LocalDateTime.now());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;时间是：&quot;</span> + format);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="自定义格式时间解析"><a href="#自定义格式时间解析" class="headerlink" title="自定义格式时间解析"></a>自定义格式时间解析</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1.新建一个时间的字符串对象。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">dateTime</span> <span class="operator">=</span> <span class="string">&quot;2020年02月12日 22点22分22秒&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.新建一个DateTimeFormatter对象，调用ofPattern方法。</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">pattern</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy年MM月dd日 HH点mm分ss秒&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.调用DateTimeFormatter对象的parse方法，进行解析，返回一个TemporalAccessor对象。</span></span><br><span class="line">        <span class="type">TemporalAccessor</span> <span class="variable">parse</span> <span class="operator">=</span> pattern.parse(dateTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.调用LocalDateTime的静态方法form，将TemporalAccessor转换成LocalDateTime对象。</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">ldt1</span> <span class="operator">=</span> LocalDateTime.from(parse);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;LocalDateTime：&quot;</span> + ldt1);</span><br><span class="line">        System.out.println(<span class="string">&quot;LocalDateTime：&quot;</span> + LocalDateTime.now());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">时间是：2020-02-14</span><br><span class="line">时间是：2020年02月14日 16时30分55秒</span><br><span class="line">LocalDateTime：2020-02-12T22:22:22</span><br><span class="line">LocalDateTime：2020-02-14T16:30:55.544</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>格式化</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP请求</title>
    <url>/2022/05/03/HTTP%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<p>Java 自带的 HttpUrlConnection 或者经典的网络访问框架 HttpClient可以实现其他接口的调用，而RestTemplate 是从 Spring3.0 开始支持的一个 HTTP 请求工具，一种简单的访问restful服务类，用于访问rest服务的客户端模板工具集，在微服务项目中，使用RestTemplate 更方便一些。<span id="more"></span></p>
<h3 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h3><p>RestTemplate 提供了常见的REST请求方案的模版，例如 GET 请求、POST 请求、PUT 请求、DELETE 请求以及一些通用的请求执行方法 exchange 以及 execute。RestTemplate 继承自 InterceptingHttpAccessor 并且实现了 RestOperations 接口，其中 RestOperations 接口定义了基本的 RESTful 操作，这些操作在 RestTemplate 中都得到了实现。</p>
<h4 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//@LoadBalanced  负载均衡</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h4><h5 id="getForObject"><a href="#getForObject" class="headerlink" title="getForObject"></a>getForObject</h5><p>第一个参数是 url ，第二个参数是接口返回的数据类型。返回值就是服务提供者返回的数据，使用 getForObject 无法获取到响应头。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INVOKE_URL</span> <span class="operator">=</span> <span class="string">&quot;http://payment8906&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/consul&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getConsulPayment</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> restTemplate.getForObject(INVOKE_URL + <span class="string">&quot;/payment/consul&quot;</span>, String.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外两个重载方法，在下面的getForEntity 方法说明。</p>
<h5 id="getForEntity"><a href="#getForEntity" class="headerlink" title="getForEntity"></a>getForEntity</h5><p>RestTemplate 发送的是 HTTP 请求，那么在响应的数据中必然也有响应头，如果开发者需要获取响应头的话，那么就需要使用 getForEntity 来发送 HTTP 请求，此时返回的对象是一个 ResponseEntity 的实例。这个实例中包含了响应数据以及响应头。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name + <span class="string">&quot; !&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UseHelloController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DiscoveryClient discoveryClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        List&lt;ServiceInstance&gt; list = discoveryClient.getInstances(<span class="string">&quot;provider&quot;</span>);</span><br><span class="line">        <span class="type">ServiceInstance</span> <span class="variable">instance</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> instance.getHost();</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> instance.getPort();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://&quot;</span> + host + <span class="string">&quot;:&quot;</span> + port + <span class="string">&quot;/hello?name=&#123;1&#125;&quot;</span>;</span><br><span class="line">        ResponseEntity&lt;String&gt; responseEntity = restTemplate.getForEntity(url, String.class, name);</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> responseEntity.getStatusCode();</span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> responseEntity.getBody();</span><br><span class="line">        sb.append(<span class="string">&quot;statusCode：&quot;</span>)</span><br><span class="line">                .append(statusCode)</span><br><span class="line">                .append(<span class="string">&quot;&lt;/br&gt;&quot;</span>)</span><br><span class="line">                .append(<span class="string">&quot;body：&quot;</span>)</span><br><span class="line">                .append(body)</span><br><span class="line">                .append(<span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> responseEntity.getHeaders();</span><br><span class="line">        Set&lt;String&gt; keySet = headers.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String s : keySet) &#123;</span><br><span class="line">            sb.append(s)</span><br><span class="line">                    .append(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">                    .append(headers.get(s))</span><br><span class="line">                    .append(<span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一个参数是 url ，url 中有一个占位符 {1} ,如果有多个占位符分别用 {2} 、 {3} … 去表示，第二个参数是接口返回的数据类型，最后是一个可变长度的参数，用来给占位符填值。在返回的 ResponseEntity 中，可以获取响应头中的信息，其中<code>getStatusCode</code>方法用来获取响应状态码，<code>getBody</code>方法用来获取响应数据， <code>getHeaders </code>方法用来获取响应头，在浏览器中访问该接口。</p>
<p>这里参数的传递除了这一种方式之外，还有另外两种方式，也就是 getForEntity 方法的另外两个重载方法。</p>
<p>第一个是占位符不使用数字，而是使用参数的 key，同时将参数放入到一个 map 中。map 中的 key 和占位符的 key 相对应，map 中的 value 就是参数的具体值，例如还是上面的请求，利用 map 来传递参数，请求方式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://&quot;</span> + host + <span class="string">&quot;:&quot;</span> + port + <span class="string">&quot;/hello?name=&#123;name&#125;&quot;</span>;</span><br><span class="line">map.put(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">ResponseEntity&lt;String&gt; responseEntity = restTemplate.getForEntity(url, String.class, map);</span><br></pre></td></tr></table></figure>

<p>第二个是使用 Uri 对象，使用 Uri 对象时，参数可以直接拼接在地址中，例如下面这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://&quot;</span> + host + <span class="string">&quot;:&quot;</span> + port + <span class="string">&quot;/hello?name=&quot;</span>+ URLEncoder.encode(name,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> URI.create(url);</span><br><span class="line">ResponseEntity&lt;String&gt; responseEntity = restTemplate.getForEntity(uri, String.class);</span><br></pre></td></tr></table></figure>

<p>这种传参方式，参数如果是中文的话，需要对参数进行编码，使用 <code>URLEncoder.encode</code> 方法来实现。</p>
<h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h4><p>和 GET 请求相比，RestTemplate 中的 POST 请求多了一个类型的方法。</p>
<p>POST请求的方法类型除了 postForEntity 和 postForObject 之外，还有一个 postForLocation。这里的方法类型虽然有三种，但是这三种方法重载的参数基本是一样的，就以 postForEntity 方法为例，说明三个重载方法的用法，最后再重点说下 postForLocation 方法。</p>
<h5 id="postForEntity"><a href="#postForEntity" class="headerlink" title="postForEntity"></a>postForEntity</h5><p>在 POST 请求中，参数的传递可以是 key&#x2F;value 的形式，也可以是 JSON 数据。</p>
<h6 id="传递key-x2F-value形式的参数"><a href="#传递key-x2F-value形式的参数" class="headerlink" title="传递key&#x2F;value形式的参数"></a>传递key&#x2F;value形式的参数</h6><p>请求接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/hello2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">sayHello2</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name + <span class="string">&quot; !&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/hello5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello5</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    List&lt;ServiceInstance&gt; list = discoveryClient.getInstances(<span class="string">&quot;provider&quot;</span>);</span><br><span class="line">    <span class="type">ServiceInstance</span> <span class="variable">instance</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> instance.getHost();</span><br><span class="line">    <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> instance.getPort();</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://&quot;</span> + host + <span class="string">&quot;:&quot;</span> + port + <span class="string">&quot;/hello2&quot;</span>;</span><br><span class="line">    <span class="type">MultiValueMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedMultiValueMap</span>();</span><br><span class="line">    map.add(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">    ResponseEntity&lt;String&gt; responseEntity = restTemplate.postForEntity(url, map, String.class);</span><br><span class="line">    <span class="keyword">return</span> responseEntity.getBody();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>postForEntity 方法第一个参数是请求地址，第二个参数 map 对象中存放着请求参数 key&#x2F;value，第三个参数则是返回的数据类型。当然这里的第一个参数 url 地址也可以换成一个 Uri 对象，效果是一样的。在 post 请求中，也可以按照 get 请求的方式去传递 key&#x2F;value 形式的参数，传递方式和 get 请求的传参方式基本一致，此时第二个参数可以直接传一个 null。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/hello6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello6</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    List&lt;ServiceInstance&gt; list = discoveryClient.getInstances(<span class="string">&quot;provider&quot;</span>);</span><br><span class="line">    <span class="type">ServiceInstance</span> <span class="variable">instance</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> instance.getHost();</span><br><span class="line">    <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> instance.getPort();</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://&quot;</span> + host + <span class="string">&quot;:&quot;</span> + port + <span class="string">&quot;/hello2?name=&#123;1&#125;&quot;</span>;</span><br><span class="line">    ResponseEntity&lt;String&gt; responseEntity = restTemplate.postForEntity(url, <span class="literal">null</span>, String.class,name);</span><br><span class="line">    <span class="keyword">return</span> responseEntity.getBody();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="传递JSON数据"><a href="#传递JSON数据" class="headerlink" title="传递JSON数据"></a>传递JSON数据</h6><p>在 post 请求中，可以自动将一个对象转换成 json 进行传输，数据到达 provider 之后，再被转换为一个对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/hello7&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">hello7</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;ServiceInstance&gt; list = discoveryClient.getInstances(<span class="string">&quot;provider&quot;</span>);</span><br><span class="line">    <span class="type">ServiceInstance</span> <span class="variable">instance</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> instance.getHost();</span><br><span class="line">    <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> instance.getPort();</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://&quot;</span> + host + <span class="string">&quot;:&quot;</span> + port + <span class="string">&quot;/user&quot;</span>;</span><br><span class="line">    <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    u1.setUsername(<span class="string">&quot;牧码小子&quot;</span>);</span><br><span class="line">    u1.setAddress(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">    ResponseEntity&lt;User&gt; responseEntity = restTemplate.postForEntity(url, u1, User.class);</span><br><span class="line">    <span class="keyword">return</span> responseEntity.getBody();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="postForLocation"><a href="#postForLocation" class="headerlink" title="postForLocation"></a>postForLocation</h5><p>postForLocation 方法的返回值是一个 Uri 对象，因为 POST 请求一般用来添加数据，有的时候需要将刚刚添加成功的数据的 URL 返回来，此时就可以使用这个方法，一个常见的使用场景如用户注册功能，用户注册成功之后，可能就自动跳转到登录页面了，此时就可以使用该方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(User user)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/loginPage?username=&quot;</span> + URLEncoder.encode(user.getUsername(),<span class="string">&quot;UTF-8&quot;</span>) + <span class="string">&quot;&amp;address=&quot;</span> + URLEncoder.encode(user.getAddress(),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/loginPage&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">loginPage</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;loginPage:&quot;</span> + user.getUsername() + <span class="string">&quot;:&quot;</span> + user.getAddress();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里一个注册接口，一个是登录页面，不过这里的登录页面我就简单用一个字符串代替了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/hello8&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello8</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;ServiceInstance&gt; list = discoveryClient.getInstances(<span class="string">&quot;provider&quot;</span>);</span><br><span class="line">    <span class="type">ServiceInstance</span> <span class="variable">instance</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> instance.getHost();</span><br><span class="line">    <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> instance.getPort();</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://&quot;</span> + host + <span class="string">&quot;:&quot;</span> + port + <span class="string">&quot;/register&quot;</span>;</span><br><span class="line">    <span class="type">MultiValueMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedMultiValueMap</span>();</span><br><span class="line">    map.add(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;牧码小子&quot;</span>);</span><br><span class="line">    map.add(<span class="string">&quot;address&quot;</span>, <span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">    <span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> restTemplate.postForLocation(url, map);</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> restTemplate.getForObject(uri, String.class);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>postForLocation 方法返回的 Uri 实际上是指响应头的 Location 字段，所以，provider 中 register 接口的响应头必须要有 Location 字段（即请求的接口实际上是一个重定向的接口），否则 postForLocation 方法的返回值为null。</p>
<h5 id="添加Header"><a href="#添加Header" class="headerlink" title="添加Header"></a>添加Header</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参数</span></span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">object.put(<span class="string">&quot;id&quot;</span>, id);</span><br><span class="line">object.put(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line"><span class="comment">//请求头</span></span><br><span class="line"><span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">headers.add(<span class="string">&quot;token&quot;</span>, <span class="string">&quot;3d40e41e9d764d30a9a4d72e61ad61b9&quot;</span>);</span><br><span class="line"><span class="comment">//封装请求头</span></span><br><span class="line">HttpEntity&lt;JSONObject&gt; httpEntity = <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;(object, headers);</span><br><span class="line"><span class="comment">//访问地址</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8080/testservice/test/get&quot;</span>;</span><br><span class="line"><span class="comment">//result.getBody()获取响应参数</span></span><br><span class="line">ResponseEntity&lt;JSONObject&gt; result = restTemplate.exchange(requestUrl, HttpMethod.GET, httpEntity, JSONObject.class);</span><br></pre></td></tr></table></figure>

<h3 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h3><h4 id="Get请求-1"><a href="#Get请求-1" class="headerlink" title="Get请求"></a>Get请求</h4><h5 id="向指定URL发送GET方法的请求"><a href="#向指定URL发送GET方法的请求" class="headerlink" title="向指定URL发送GET方法的请求"></a>向指定URL发送GET方法的请求</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 向指定URL发送GET方法的请求</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> url   发送请求的URL</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> param 请求参数，请求参数应该是 name1=value1&amp;name2=value2 的形式。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> URL 所代表远程资源的响应结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sendGet</span><span class="params">(String url, String param)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">urlNameString</span> <span class="operator">=</span> url + <span class="string">&quot;?&quot;</span> + param;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">realUrl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(urlNameString);</span><br><span class="line">        <span class="comment">// 打开和URL之间的连接</span></span><br><span class="line">        <span class="type">URLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> realUrl.openConnection();</span><br><span class="line">        <span class="comment">// 设置通用的请求属性</span></span><br><span class="line">        connection.setRequestProperty(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;*/*&quot;</span>);</span><br><span class="line">        connection.setRequestProperty(<span class="string">&quot;connection&quot;</span>, <span class="string">&quot;Keep-Alive&quot;</span>);</span><br><span class="line">        connection.setRequestProperty(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1&quot;</span>);</span><br><span class="line">        <span class="comment">// 建立实际的连接</span></span><br><span class="line">        connection.connect();</span><br><span class="line">        <span class="comment">// 获取所有响应头字段</span></span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; map = connection.getHeaderFields();</span><br><span class="line">        <span class="comment">// 遍历所有的响应头字段</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * for (String key : map.keySet()) &#123; System.out.println(key + &quot;---&gt;&quot;</span></span><br><span class="line"><span class="comment">             * + map.get(key)); &#125;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        <span class="comment">// 定义 BufferedReader输入流来读取URL的响应</span></span><br><span class="line">        in = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(connection.getInputStream(), StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            result.append(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;发送GET请求出现异常&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用finally块来关闭输入流</span></span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                in.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">            e2.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="单参数数据访问"><a href="#单参数数据访问" class="headerlink" title="单参数数据访问"></a>单参数数据访问</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 单参数数据访问</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sendGet</span><span class="params">(String url)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">realUrl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(url);</span><br><span class="line">            <span class="comment">// 打开和URL之间的连接</span></span><br><span class="line">            <span class="type">URLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> realUrl.openConnection();</span><br><span class="line">            <span class="comment">// 设置通用的请求属性</span></span><br><span class="line">            connection.setRequestProperty(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;*/*&quot;</span>);</span><br><span class="line">            connection.setRequestProperty(<span class="string">&quot;connection&quot;</span>, <span class="string">&quot;Keep-Alive&quot;</span>);</span><br><span class="line">            connection.setRequestProperty(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;</span>);</span><br><span class="line">            <span class="comment">// 建立实际的连接</span></span><br><span class="line">            connection.connect();</span><br><span class="line">            <span class="comment">// 获取所有响应头字段</span></span><br><span class="line">            Map&lt;String, List&lt;String&gt;&gt; map = connection.getHeaderFields();</span><br><span class="line">            <span class="comment">// 遍历所有的响应头字段</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * for (String key : map.keySet()) &#123; System.out.println(key + &quot;---&gt;&quot;</span></span><br><span class="line"><span class="comment">            * + map.get(key)); &#125;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="comment">// 定义 BufferedReader输入流来读取URL的响应</span></span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(connection.getInputStream(), StandardCharsets.UTF_8));</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                result.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发送GET请求出现异常！&quot;</span> + e);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 使用finally块来关闭输入流</span></span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                in.close();</span><br><span class="line">        	&#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">        e2.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="POST请求-1"><a href="#POST请求-1" class="headerlink" title="POST请求"></a>POST请求</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向指定 URL 发送POST方法的请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url   发送请求的 URL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param 请求参数，请求参数应该是 name1=value1&amp;name2=value2 的形式。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 所代表远程资源的响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sendPost</span><span class="params">(String url, String param)</span> &#123;</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">realUrl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(url);</span><br><span class="line">        <span class="comment">// 打开和URL之间的连接</span></span><br><span class="line">        <span class="type">URLConnection</span> <span class="variable">conn</span> <span class="operator">=</span> realUrl.openConnection();</span><br><span class="line">        <span class="comment">// 设置通用的请求属性</span></span><br><span class="line">        conn.setRequestProperty(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;*/*&quot;</span>);</span><br><span class="line">        conn.setRequestProperty(<span class="string">&quot;connection&quot;</span>, <span class="string">&quot;Keep-Alive&quot;</span>);</span><br><span class="line">        conn.setRequestProperty(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1&quot;</span>);</span><br><span class="line">        <span class="comment">// 发送POST请求必须设置如下两行</span></span><br><span class="line">        conn.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">        conn.setDoInput(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 获取URLConnection对象对应的输出流</span></span><br><span class="line">        out = <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(conn.getOutputStream());</span><br><span class="line">        <span class="comment">// 发送请求参数</span></span><br><span class="line">        out.print(param);</span><br><span class="line">        <span class="comment">// flush输出流的缓冲</span></span><br><span class="line">        out.flush();</span><br><span class="line">        <span class="comment">// 定义BufferedReader输入流来读取URL的响应</span></span><br><span class="line">        in = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(conn.getInputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            result.append(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发送 POST 请求出现异常！&quot;</span> + e);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用finally块来关闭输出流、输入流</span></span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (out != <span class="literal">null</span>) &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                in.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="对象参数数据访问"><a href="#对象参数数据访问" class="headerlink" title="对象参数数据访问"></a>对象参数数据访问</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doPost</span><span class="params">(String postUrl, JSONObject obj)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">lines</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建连接</span></span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(postUrl);</span><br><span class="line">            <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">            connection.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">            connection.setDoInput(<span class="literal">true</span>);</span><br><span class="line">            connection.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">            connection.setUseCaches(<span class="literal">false</span>);</span><br><span class="line">            connection.setInstanceFollowRedirects(<span class="literal">true</span>);</span><br><span class="line">            connection.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            connection.connect();</span><br><span class="line">            <span class="comment">// POST请求</span></span><br><span class="line">            <span class="type">DataOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(connection.getOutputStream());</span><br><span class="line">            <span class="comment">// out.writeChars(obj.toString());</span></span><br><span class="line">            <span class="comment">// out.write(obj.toString().getBytes(&quot;UTF-8&quot;));</span></span><br><span class="line">            out.write(obj.toString().getBytes());</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">            <span class="comment">// 读取响应</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(connection.getInputStream(), StandardCharsets.UTF_8));</span><br><span class="line">            <span class="keyword">while</span> ((lines = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            lines = <span class="keyword">new</span> <span class="title class_">String</span>(lines.getBytes());</span><br><span class="line">            sb.append(lines);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(sb);</span><br><span class="line">            reader.close();</span><br><span class="line">            <span class="comment">// 断开连接</span></span><br><span class="line">            connection.disconnect();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        	e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客网站部署配置</title>
    <url>/2021/11/10/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<span id="more"></span></p>
<h4 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h4><p>将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用 <code>hexo &lt;command&gt;</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">F:\hexosite\hexosite\node_modules\.bin</span><br></pre></td></tr></table></figure>

<h4 id="部署插件"><a href="#部署插件" class="headerlink" title="部署插件"></a>部署插件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h4 id="Github配置"><a href="#Github配置" class="headerlink" title="Github配置"></a>Github配置</h4><h5 id="配置用户名"><a href="#配置用户名" class="headerlink" title="配置用户名"></a>配置用户名</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br></pre></td></tr></table></figure>

<h5 id="配置GitHub账户邮箱"><a href="#配置GitHub账户邮箱" class="headerlink" title="配置GitHub账户邮箱"></a>配置GitHub账户邮箱</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure>

<h5 id="输入命令生成SSH-key"><a href="#输入命令生成SSH-key" class="headerlink" title="输入命令生成SSH key:"></a>输入命令生成SSH key:</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure>

<p>命令界面会显示生成的位置，例如我的是在”c&#x2F;users&#x2F;dell&#x2F;.ssh&#x2F;id_rsa.pub”。打开id_rsa.pub文件，里面的内容全部复制。在网页中点击GitHub账户头像选择”Settings”，再点击”SSH and GPG keys”，点击SSH右边的”new SSH key”，Title可以随便输入，Key中就将刚刚复制的密钥粘贴过去，点击”Add SSH key”，之后就会生成的16进制的SSH 密令。打开GitHub上的仓库，复制SSH地址链接，</p>
<h5 id="Git-Bash中输入关联GitHub账户"><a href="#Git-Bash中输入关联GitHub账户" class="headerlink" title="Git Bash中输入关联GitHub账户:"></a>Git Bash中输入关联GitHub账户:</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure>

<p>在你的博客项目文件夹中打开”_config.yml”文件，直接拉到最下面</p>
<h5 id="配置项目部署环境"><a href="#配置项目部署环境" class="headerlink" title="配置项目部署环境"></a>配置项目部署环境</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:Isdear/Isdear.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h4 id="Hexo版本升级"><a href="#Hexo版本升级" class="headerlink" title="Hexo版本升级"></a>Hexo版本升级</h4><h5 id="检查版本"><a href="#检查版本" class="headerlink" title="检查版本"></a>检查版本</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure>

<h5 id="版本检查命令"><a href="#版本检查命令" class="headerlink" title="版本检查命令"></a>版本检查命令</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#安装检查命令</span></span></span><br><span class="line">npm install -g npm-check</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#检查</span></span></span><br><span class="line">npm-check</span><br></pre></td></tr></table></figure>

<h5 id="版本升级详情"><a href="#版本升级详情" class="headerlink" title="版本升级详情"></a>版本升级详情</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#安装检查命令</span></span></span><br><span class="line">npm install -g npm-upgrade</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#检查</span></span></span><br><span class="line">npm-upgrade</span><br></pre></td></tr></table></figure>

<p>这个命令执行完之后，就会出现当前版本与可升级版本的比较，然后让你选择是否升级，一直yes就行了。Hexo版本升级</p>
<h5 id="检查版本-1"><a href="#检查版本-1" class="headerlink" title="检查版本"></a>检查版本</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure>

<h5 id="版本检查命令-1"><a href="#版本检查命令-1" class="headerlink" title="版本检查命令"></a>版本检查命令</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#安装检查命令</span></span></span><br><span class="line">npm install -g npm-check</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#检查</span></span></span><br><span class="line">npm-check</span><br></pre></td></tr></table></figure>

<h5 id="版本升级详情-1"><a href="#版本升级详情-1" class="headerlink" title="版本升级详情"></a>版本升级详情</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#安装检查命令</span></span></span><br><span class="line">npm install -g npm-upgrade</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#检查</span></span></span><br><span class="line">npm-upgrade</span><br></pre></td></tr></table></figure>

<p>这个命令执行完之后，就会出现当前版本与可升级版本的比较，然后让你选择是否升级，一直yes就行了。</p>
<h4 id="相对路径引用图片失败"><a href="#相对路径引用图片失败" class="headerlink" title="相对路径引用图片失败"></a>相对路径引用图片失败</h4><p>安装<code>hexo-asset-image</code>后，需要对文件进行修改，修改index.js文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPosition</span>(<span class="params">str, m, i</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">split</span>(m, i).<span class="title function_">join</span>(m).<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="title class_">String</span>(hexo.<span class="property">version</span>).<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.<span class="property">config</span>;</span><br><span class="line">  <span class="keyword">if</span>(config.<span class="property">post_asset_folder</span>)&#123;</span><br><span class="line">    	<span class="keyword">var</span> link = data.<span class="property">permalink</span>;</span><br><span class="line">	<span class="keyword">if</span>(version.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; <span class="title class_">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">	   <span class="keyword">var</span> beginPos = <span class="title function_">getPosition</span>(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	   <span class="keyword">var</span> beginPos = <span class="title function_">getPosition</span>(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">	<span class="keyword">var</span> endPos = link.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.<span class="title function_">substring</span>(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.<span class="property">length</span>; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.<span class="title function_">load</span>(data[key], &#123;</span><br><span class="line">        <span class="attr">ignoreWhitespace</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">xmlMode</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">lowerCaseTags</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">decodeEntities</span>: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> ($(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">			<span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">			<span class="keyword">var</span> src = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">			<span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.<span class="title function_">test</span>(src) &amp;&amp;</span><br><span class="line">			   !<span class="regexp">/^\s*\//</span>.<span class="title function_">test</span>(src)) &#123;</span><br><span class="line">			  <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">			  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">			  <span class="keyword">var</span> linkArray = link.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">elem</span>)&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">var</span> srcArray = src.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">elem</span>)&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">if</span>(srcArray.<span class="property">length</span> &gt; <span class="number">1</span>)</span><br><span class="line">				srcArray.<span class="title function_">shift</span>();</span><br><span class="line">			  src = srcArray.<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">			  $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, config.<span class="property">root</span> + link + src);</span><br><span class="line">			  <span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.<span class="property">root</span> + link + src);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">			<span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>($(<span class="variable language_">this</span>));</span><br><span class="line">		&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.<span class="title function_">html</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>IO流的分类</title>
    <url>/2022/05/04/IO%E6%B5%81%E7%9A%84%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<p>IO流的所有分类<span id="more"></span></p>
<img src="/2022/05/04/IO%E6%B5%81%E7%9A%84%E5%88%86%E7%B1%BB/20220504221602.png" class>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java定时任务</title>
    <url>/2021/11/27/Java%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<p>本文使用Spring框架自带的Scheduled注解来实现Java定时任务，只说明不停止服务自定义时间执行任务。<span id="more"></span></p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在Spring框架的主启动类上加上<code>@EnableScheduling</code>注解，表示开启定时任务，具体的执行任务在其他类。</p>
<h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><h5 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h5><p>在执行类的方法上增加<code>@Scheduled(cron = &quot;* * * * * ?&quot;)</code>注解，</p>
<p>​    cron的参数示例如下：</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">值</th>
<th align="center">允许的特殊字符</th>
</tr>
</thead>
<tbody><tr>
<td align="center">秒</td>
<td align="center">0-59</td>
<td align="center">, - * &#x2F;</td>
</tr>
<tr>
<td align="center">分</td>
<td align="center">0-59</td>
<td align="center">, - * &#x2F;</td>
</tr>
<tr>
<td align="center">小时</td>
<td align="center">0-23</td>
<td align="center">, - * &#x2F;</td>
</tr>
<tr>
<td align="center">日</td>
<td align="center">1-31</td>
<td align="center">, - * ? &#x2F; L W C</td>
</tr>
<tr>
<td align="center">月</td>
<td align="center">1-12 或者 JAN-DEC</td>
<td align="center">, - * &#x2F;</td>
</tr>
<tr>
<td align="center">星期</td>
<td align="center">1-7 或者 SUN-SAT</td>
<td align="center">, - * ? &#x2F; L C #</td>
</tr>
<tr>
<td align="center">年（可选）</td>
<td align="center">留空, 1970-2099</td>
<td align="center">, - * &#x2F;</td>
</tr>
</tbody></table>
<p>0 0 10,14,16 * * ? 每天上午10点，下午2点，4点</p>
<p>0 0&#x2F;30 9-17 * * ?  朝九晚五工作时间内每半小时</p>
<p>0 0 12 ? * WED 表示每个星期三中午12点 </p>
<p>“0 0 12 * * ?” 每天中午12点触发 </p>
<p>“0 15 10 ? * *” 每天上午10:15触发 </p>
<p>“0 15 10 * * ?” 每天上午10:15触发 </p>
<p>“0 15 10 * * ? *” 每天上午10:15触发 </p>
<p>“0 15 10 * * ? 2005” 2005年的每天上午10:15触发 </p>
<p>“0 * 14 * * ?” 在每天下午2点到下午2:59期间的每1分钟触发 </p>
<p>“0 0&#x2F;5 14 * * ?” 在每天下午2点到下午2:55期间的每5分钟触发 </p>
<p>“0 0&#x2F;5 14,18 * * ?” 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发 </p>
<p>“0 0-5 14 * * ?” 在每天下午2点到下午2:05期间的每1分钟触发 </p>
<p>“0 10,44 14 ? 3 WED” 每年三月的星期三的下午2:10和2:44触发 </p>
<p>“0 15 10 ? * MON-FRI” 周一至周五的上午10:15触发 </p>
<p>“0 15 10 15 * ?” 每月15日上午10:15触发 </p>
<p>“0 15 10 L * ?” 每月最后一日的上午10:15触发 </p>
<p>“0 15 10 ? * 6L” 每月的最后一个星期五上午10:15触发 </p>
<p>“0 15 10 ? * 6L 2002-2005” 2002年至2005年的每月的最后一个星期五上午10:15触发 </p>
<p>“0 15 10 ? * 6#3” 每月的第三个星期五上午10:15触发 </p>
<p>有些子表达式能包含一些范围或列表</p>
<p>例如：子表达式（<strong>天（星期）</strong>）可以为 “MON-FRI”，“MON，WED，FRI”，“MON-WED,SAT”</p>
<p>“*”字符代表所有可能的值</p>
<p>因此，“<em>”在子表达式（<strong>月</strong>）里表示每个月的含义，“</em>”在子表达式（<strong>天（星期）</strong>）表示星期的每一天</p>
<h5 id="动态修改时间"><a href="#动态修改时间" class="headerlink" title="动态修改时间"></a>动态修改时间</h5><h6 id="资源文件配置变量"><a href="#资源文件配置变量" class="headerlink" title="资源文件配置变量"></a>资源文件配置变量</h6><p>cron使用自定义变量，在SpringCloud的配置中心修改即可不重启服务使用修改后的变量</p>
<h6 id="保存到数据库"><a href="#保存到数据库" class="headerlink" title="保存到数据库"></a>保存到数据库</h6><p>将时间表达式保存到数据库，从程序中读取，就可以随时修改任务时间</p>
<h6 id="表"><a href="#表" class="headerlink" title="表"></a>表</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for spring_scheduled_cron</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `spring_scheduled_cron`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `spring_scheduled_cron`  (</span><br><span class="line">  `cron_id` <span class="type">varchar</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键id&#x27;</span>,</span><br><span class="line">  `cron_key` <span class="type">varchar</span>(<span class="number">128</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;定时任务完整类名&#x27;</span>,</span><br><span class="line">  `cron_expression` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;cron表达式&#x27;</span>,</span><br><span class="line">  `task_explain` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;任务描述&#x27;</span>,</span><br><span class="line">  `status` tinyint(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> COMMENT <span class="string">&#x27;状态,1:正常;2:停用&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`cron_id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">UNIQUE</span> INDEX `cron_key`(`cron_key`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">UNIQUE</span> INDEX `cron_key_unique_idx`(`cron_key`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">4</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci COMMENT <span class="operator">=</span> <span class="string">&#x27;定时任务表&#x27;</span> ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of spring_scheduled_cron</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `spring_scheduled_cron` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;com.example.springcloud0614.controller.DynamicPrintTask&#x27;</span>, <span class="string">&#x27;*/5 * * * * ?&#x27;</span>, <span class="string">&#x27;定时任务描述&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `spring_scheduled_cron` <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;com.example.springcloud0614.controller.DynamicPrintTask1&#x27;</span>, <span class="string">&#x27;*/5 * * * * ?&#x27;</span>, <span class="string">&#x27;定时任务描述1&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `spring_scheduled_cron` <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;com.example.springcloud0614.controller.DynamicPrintTask2&#x27;</span>, <span class="string">&#x27;*/5 * * * * ?&#x27;</span>, <span class="string">&#x27;定时任务描述2&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h6 id="Spring工具类"><a href="#Spring工具类" class="headerlink" title="Spring工具类"></a>Spring工具类</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springcloud0614.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.LocaleResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringUtils工具类获取bean</span></span><br><span class="line"><span class="comment"> * Description: &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * date: 2020/4/26 14:59&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lvxk&lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> JDK 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringUtils</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; tClass)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(tClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String name, Class&lt;T&gt; type)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(name, type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HttpServletRequest <span class="title function_">getCurrentReq</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ServletRequestAttributes</span> <span class="variable">requestAttrs</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        <span class="keyword">if</span> (requestAttrs == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> requestAttrs.getRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMessage</span><span class="params">(String code, Object... args)</span> &#123;</span><br><span class="line">        <span class="type">LocaleResolver</span> <span class="variable">localeResolver</span> <span class="operator">=</span> getBean(LocaleResolver.class);</span><br><span class="line">        <span class="type">Locale</span> <span class="variable">locale</span> <span class="operator">=</span> localeResolver.resolveLocale(getCurrentReq());</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getMessage(code, args, locale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="定时任务类"><a href="#定时任务类" class="headerlink" title="定时任务类"></a>定时任务类</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springcloud0614.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springcloud0614.entity.ScheduledCron;</span><br><span class="line"><span class="keyword">import</span> com.example.springcloud0614.service.ScheduledCronService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.TaskScheduler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.SchedulingConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.config.ScheduledTaskRegistrar;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.config.Task;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.support.CronTrigger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> kuang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/11/27 17:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduledConfig</span> <span class="keyword">implements</span> <span class="title class_">SchedulingConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ScheduledCronService cronService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Callback allowing a &#123;<span class="doctag">@link</span> TaskScheduler</span></span><br><span class="line"><span class="comment">     * TaskScheduler&#125; and specific &#123;<span class="doctag">@link</span> Task Task&#125;</span></span><br><span class="line"><span class="comment">     * instances to be registered against the given the &#123;<span class="doctag">@link</span> ScheduledTaskRegistrar&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> taskRegistrar the registrar to be configured.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureTasks</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (ScheduledCron scheduledCron : cronService.findAll()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;表达式：&#123;&#125;&quot;</span>, scheduledCron);</span><br><span class="line">            Class&lt;?&gt; clazz;</span><br><span class="line">            Object task;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                clazz = Class.forName(scheduledCron.getCronKey());</span><br><span class="line">                task = context.getBean(clazz);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;spring_scheduled_cron表数据&quot;</span> + scheduledCron.getCronKey() + <span class="string">&quot;有误&quot;</span>, e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (BeansException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(scheduledCron.getCronKey() + <span class="string">&quot;未纳入到spring管理&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">            Assert.isAssignable(ScheduledOfTask.class, task.getClass(), <span class="string">&quot;定时任务类必须实现ScheduledOfTask接口&quot;</span>);</span><br><span class="line">            <span class="comment">// 可以通过改变数据库数据进而实现动态改变执行周期</span></span><br><span class="line">            <span class="comment">//所有定时任务类只需要实现这个接口并相应的在数据库插入一条记录，那么在微服务启动的时候，就会被自动注册到Spring的定时任务里</span></span><br><span class="line">            taskRegistrar.addTriggerTask(((Runnable) task),</span><br><span class="line">                    triggerContext -&gt; &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">cronExpression</span> <span class="operator">=</span> cronService.findByCronId(scheduledCron.getCronId()).getCronExpression();</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CronTrigger</span>(cronExpression).nextExecutionTime(triggerContext);</span><br><span class="line">                    &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">taskExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Executors.newScheduledThreadPool(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="启用和禁用功能"><a href="#启用和禁用功能" class="headerlink" title="启用和禁用功能"></a>启用和禁用功能</h6><p>如果不需要可以不实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springcloud0614.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springcloud0614.entity.ScheduledCron;</span><br><span class="line"><span class="keyword">import</span> com.example.springcloud0614.service.ScheduledCronService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> kuang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/11/27 20:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ScheduledOfTask</span> <span class="keyword">extends</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定时任务方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现控制定时任务启用或禁用的功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ScheduledCronService</span> <span class="variable">cronService</span> <span class="operator">=</span> SpringUtils.getBean(ScheduledCronService.class);</span><br><span class="line">        <span class="type">ScheduledCron</span> <span class="variable">scheduledCron</span> <span class="operator">=</span> cronService.findByCronKey(<span class="built_in">this</span>.getClass().getName());</span><br><span class="line">        <span class="keyword">if</span> (scheduledCron.getStatus() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h6><p>其余方法一致</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springcloud0614.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springcloud0614.config.ScheduledOfTask;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> kuang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/11/27 20:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicPrintTask</span> <span class="keyword">implements</span> <span class="title class_">ScheduledOfTask</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;DynamicPrintTask execute times:&#123;&#125;&quot;</span>, ++i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java异步</title>
    <url>/2022/05/03/Java%E5%BC%82%E6%AD%A5/</url>
    <content><![CDATA[<p>Java异步执行测试。<span id="more"></span></p>
<h3 id="实现Runable重写run方法"><a href="#实现Runable重写run方法" class="headerlink" title="实现Runable重写run方法"></a>实现Runable重写run方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;task executing&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    	Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    	e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;task executed&quot;</span>);</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>

<h3 id="原生的CompletableFuture"><a href="#原生的CompletableFuture" class="headerlink" title="原生的CompletableFuture"></a>原生的CompletableFuture</h3><p>从Java 8开始引入了<code>CompletableFuture</code>，它针对<code>Future</code>做了改进，可以传入回调对象，当异步任务完成或者发生异常时，自动调用回调对象的回调方法。</p>
<p>示例一：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建异步执行任务:</span></span><br><span class="line">        CompletableFuture&lt;Double&gt; cf = CompletableFuture.supplyAsync(Main::fetchPrice);</span><br><span class="line">        <span class="comment">// 如果执行成功:</span></span><br><span class="line">        cf.thenAccept((result) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;price: &quot;</span> + result);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 如果执行异常:</span></span><br><span class="line">        cf.exceptionally((e) -&gt; &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 主线程不要立刻结束，否则CompletableFuture默认使用的线程池会立刻关闭:</span></span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Double <span class="title function_">fetchPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Math.random() &lt; <span class="number">0.3</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;fetch price failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span> + Math.random() * <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">price: 8.1129900214411</span><br></pre></td></tr></table></figure>

<p>创建一个<code>CompletableFuture</code>是通过<code>CompletableFuture.supplyAsync()</code>实现的，它需要一个实现了<code>Supplier</code>接口的对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Supplier</span>&lt;T&gt; &#123;</span><br><span class="line">    T <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们用lambda语法简化了一下，直接传入<code>Main::fetchPrice</code>，因为<code>Main.fetchPrice()</code>静态方法的签名符合<code>Supplier</code>接口的定义（除了方法名外）。</p>
<p>紧接着，<code>CompletableFuture</code>已经被提交给默认的线程池执行了，我们需要定义的是<code>CompletableFuture</code>完成时和异常时需要回调的实例。完成时，<code>CompletableFuture</code>会调用<code>Consumer</code>对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Consumer</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>异常时，<code>CompletableFuture</code>会调用<code>Function</code>对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Function</span>&lt;T, R&gt; &#123;</span><br><span class="line">    R <span class="title function_">apply</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>CompletableFuture</code>的优点是：</p>
<ul>
<li>异步任务结束时，会自动回调某个对象的方法；</li>
<li>异步任务出错时，会自动回调某个对象的方法；</li>
<li>主线程设置好回调后，不再关心异步任务的执行。</li>
</ul>
<p>如果只是实现了异步回调机制，我们还看不出<code>CompletableFuture</code>相比<code>Future</code>的优势。<code>CompletableFuture</code>更强大的功能是，多个<code>CompletableFuture</code>可以串行执行，例如，定义两个<code>CompletableFuture</code>，第一个<code>CompletableFuture</code>根据证券名称查询证券代码，第二个<code>CompletableFuture</code>根据证券代码查询证券价格，这两个<code>CompletableFuture</code>实现串行操作如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 第一个任务:</span></span><br><span class="line">        CompletableFuture&lt;String&gt; cfQuery = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> queryCode(<span class="string">&quot;中国石油&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// cfQuery成功后继续执行下一个任务:</span></span><br><span class="line">        CompletableFuture&lt;Double&gt; cfFetch = cfQuery.thenApplyAsync((code) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> fetchPrice(code);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// cfFetch成功后打印结果:</span></span><br><span class="line">        cfFetch.thenAccept((result) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;price: &quot;</span> + result);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 主线程不要立刻结束，否则CompletableFuture默认使用的线程池会立刻关闭:</span></span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String <span class="title function_">queryCode</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;601857&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Double <span class="title function_">fetchPrice</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span> + Math.random() * <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了串行执行外，多个<code>CompletableFuture</code>还可以并行执行。例如，我们考虑这样的场景：</p>
<p>同时从新浪和网易查询证券代码，只要任意一个返回结果，就进行下一步查询价格，查询价格也同时从新浪和网易查询，只要任意一个返回结果，就完成操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 两个CompletableFuture执行异步查询:</span></span><br><span class="line">        CompletableFuture&lt;String&gt; cfQueryFromSina = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> queryCode(<span class="string">&quot;中国石油&quot;</span>, <span class="string">&quot;https://finance.sina.com.cn/code/&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        CompletableFuture&lt;String&gt; cfQueryFrom163 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> queryCode(<span class="string">&quot;中国石油&quot;</span>, <span class="string">&quot;https://money.163.com/code/&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用anyOf合并为一个新的CompletableFuture:</span></span><br><span class="line">        CompletableFuture&lt;Object&gt; cfQuery = CompletableFuture.anyOf(cfQueryFromSina, cfQueryFrom163);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 两个CompletableFuture执行异步查询:</span></span><br><span class="line">        CompletableFuture&lt;Double&gt; cfFetchFromSina = cfQuery.thenApplyAsync((code) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> fetchPrice((String) code, <span class="string">&quot;https://finance.sina.com.cn/price/&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        CompletableFuture&lt;Double&gt; cfFetchFrom163 = cfQuery.thenApplyAsync((code) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> fetchPrice((String) code, <span class="string">&quot;https://money.163.com/price/&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用anyOf合并为一个新的CompletableFuture:</span></span><br><span class="line">        CompletableFuture&lt;Object&gt; cfFetch = CompletableFuture.anyOf(cfFetchFromSina, cfFetchFrom163);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最终结果:</span></span><br><span class="line">        cfFetch.thenAccept((result) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;price: &quot;</span> + result);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 主线程不要立刻结束，否则CompletableFuture默认使用的线程池会立刻关闭:</span></span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String <span class="title function_">queryCode</span><span class="params">(String name, String url)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;query code from &quot;</span> + url + <span class="string">&quot;...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep((<span class="type">long</span>) (Math.random() * <span class="number">100</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;601857&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Double <span class="title function_">fetchPrice</span><span class="params">(String code, String url)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;query price from &quot;</span> + url + <span class="string">&quot;...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep((<span class="type">long</span>) (Math.random() * <span class="number">100</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span> + Math.random() * <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述逻辑实现的异步查询规则实际上是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌─────────────┐ ┌─────────────┐</span><br><span class="line">│ Query Code  │ │ Query Code  │</span><br><span class="line">│  from sina  │ │  from 163   │</span><br><span class="line">└─────────────┘ └─────────────┘</span><br><span class="line">       │               │</span><br><span class="line">       └───────┬───────┘</span><br><span class="line">               ▼</span><br><span class="line">        ┌─────────────┐</span><br><span class="line">        │    anyOf    │</span><br><span class="line">        └─────────────┘</span><br><span class="line">               │</span><br><span class="line">       ┌───────┴────────┐</span><br><span class="line">       ▼                ▼</span><br><span class="line">┌─────────────┐  ┌─────────────┐</span><br><span class="line">│ Query Price │  │ Query Price │</span><br><span class="line">│  from sina  │  │  from 163   │</span><br><span class="line">└─────────────┘  └─────────────┘</span><br><span class="line">       │                │</span><br><span class="line">       └────────┬───────┘</span><br><span class="line">                ▼</span><br><span class="line">         ┌─────────────┐</span><br><span class="line">         │    anyOf    │</span><br><span class="line">         └─────────────┘</span><br><span class="line">                │</span><br><span class="line">                ▼</span><br><span class="line">         ┌─────────────┐</span><br><span class="line">         │Display Price│</span><br><span class="line">         └─────────────┘</span><br></pre></td></tr></table></figure>

<p>除了<code>anyOf()</code>可以实现“任意个<code>CompletableFuture</code>只要一个成功”，<code>allOf()</code>可以实现“所有<code>CompletableFuture</code>都必须成功”，这些组合操作可以实现非常复杂的异步流程控制。</p>
<p>最后我们注意<code>CompletableFuture</code>的命名规则：</p>
<ul>
<li><code>xxx()</code>：表示该方法将继续在已有的线程中执行；</li>
<li><code>xxxAsync()</code>：表示将异步在线程池中执行。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;task start execute&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;task executed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;, executor);</span><br><span class="line">    future.thenAcceptAsync(System.out::println);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">Timestamp</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().getTime()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>newFixedThreadPool()</code>创建一个线程池，重复使用固定数量的线程在共享的无界队列上操作。</p>
<p><code>supplyAsync()</code>返回一个新的CompletableFuture，该CompletableFuture由在给定执行器中运行的任务异步完成，该任务的值通过调用给定的Supplier获得。</p>
<p><code>thenAcceptAsync()</code>返回一个新的CompletionStage，当此阶段正常完成时，使用此阶段的默认异步执行工具执行该阶段，并将此阶段的结果作为所提供函数的参数。</p>
<h4 id="异步结果"><a href="#异步结果" class="headerlink" title="异步结果"></a>异步结果</h4><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">main start</span><br><span class="line">task start execute</span><br><span class="line">2021-06-27 23:52:22.558</span><br><span class="line">2021-06-27 23:52:22.569</span><br><span class="line">2021-06-27 23:52:22.569</span><br><span class="line">2021-06-27 23:52:22.569</span><br><span class="line">2021-06-27 23:52:22.57</span><br><span class="line">2021-06-27 23:52:22.57</span><br><span class="line">2021-06-27 23:52:22.57</span><br><span class="line">2021-06-27 23:52:22.57</span><br><span class="line">2021-06-27 23:52:22.57</span><br><span class="line">2021-06-27 23:52:22.57</span><br><span class="line">main finished</span><br><span class="line">task start execute</span><br><span class="line">task start execute</span><br><span class="line">task start execute</span><br><span class="line">task start execute</span><br><span class="line">task executed</span><br><span class="line">task start execute</span><br><span class="line">4</span><br><span class="line">task executed</span><br><span class="line">task executed</span><br><span class="line">task executed</span><br><span class="line">task executed</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">task start execute</span><br><span class="line">task start execute</span><br><span class="line">task start execute</span><br><span class="line">task start execute</span><br><span class="line">task executed</span><br><span class="line">4</span><br><span class="line">task executed</span><br><span class="line">task executed</span><br><span class="line">task executed</span><br><span class="line">task executed</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">4</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java线程池</title>
    <url>/2022/04/27/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<p>Java建立线程池的几种方法。<span id="more"></span></p>
<p>在面向对象编程中，创建和销毁对象是很费时间的，因为创建一个对象要获取内存资源或者其它更多资源。在Java中更是如此，虚拟机将试图跟踪每一个对象，以便能够在对象销毁后进行垃圾回收。所以提高服务程序效率的一个手段就是尽可能减少创建和销毁对象的次数，特别是一些很耗资源的对象创建和销毁，这就是”池化资源”技术产生的原因。线程池顾名思义就是事先创建若干个可执行的线程放入一个池（容器）中，需要的时候从池中获取线程不用自行创建，使用完毕不需要销毁线程而是放回池中，从而减少创建和销毁线程对象的开销。</p>
<p>Java 5+中的Executor接口定义一个执行线程的工具。它的子类型即线程池接口是ExecutorService。要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，因此在工具类Executors面提供了一些静态工厂方法，生成一些常用的线程池，如下所示：</p>
<h4 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h4><p>创建一个单线程的线程池。这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。</p>
<h4 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h4><p>创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。</p>
<h4 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h4><p>创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。</p>
<h4 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a>newScheduledThreadPool</h4><p>创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。</p>
<h4 id="newSingleThreadExecutor-1"><a href="#newSingleThreadExecutor-1" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h4><p>创建一个单线程的线程池。此线程池支持定时以及周期性执行任务的需求。</p>
<h4 id="使用参数以及方法策略"><a href="#使用参数以及方法策略" class="headerlink" title="使用参数以及方法策略"></a>使用参数以及方法策略</h4><p>线程池主要就是指定线程池核心线程数大小，最大线程数，存储的队列，拒绝策略，空闲线程存活时长。当需要任务大于核心线程数时候，就开始把任务往存储任务的队列里，当存储队列满了的话，就开始增加线程池创建的线程数量，如果当线程数量也达到了最大，就开始执行拒绝策略，比如说记录日志，直接丢弃，或者丢弃最老的任务。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统下MongoDB的安装与配置</title>
    <url>/2021/11/10/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8BMongoDB%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p> 快速安装教程<span id="more"></span></p>
<h5 id="一键安装MongoDB数据库"><a href="#一键安装MongoDB数据库" class="headerlink" title="一键安装MongoDB数据库"></a>一键安装MongoDB数据库</h5><p>使用wget命令在线一键安装MongoDB数据库，并配置密码123456。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">注意：不要在 / 目录下运行</span><br><span class="line">wget -c http://mirrors.linuxeye.com/oneinstack-full.tar.gz &amp;&amp; tar xzf oneinstack-full.tar.gz &amp;&amp; ./oneinstack/install.sh --db_option 15 --dbinstallmethod 1 --dbrootpwd 123456 --reboot</span><br></pre></td></tr></table></figure>

<p>安装时间较长，请耐心等待。</p>
<p>如果没有找到wget命令，就使用下列命令安装wget:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install wget</span><br></pre></td></tr></table></figure>

<h5 id="验证超级管理员账户"><a href="#验证超级管理员账户" class="headerlink" title="验证超级管理员账户"></a>验证超级管理员账户</h5><p>重新进入服务器后，在窗口中输入 <em>mongo</em> ，进入数据库。</p>
<p>输入 <em>db</em> ，默认是在test数据库下，输入 <em>use admin</em> ，进入 <em>admin</em> 数据库。然后再输入*db.auth(‘root’,’123456’)*，返回1表示验证成功。注意：这个账户密码就是刚刚安装数据库时设置的。</p>
<h5 id="创建新数据库并配置"><a href="#创建新数据库并配置" class="headerlink" title="创建新数据库并配置"></a>创建新数据库并配置</h5><p>输入<em>use newDatabase</em>，进入新的数据库，然后输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.createUser(&#123;user: &quot;username&quot;, pwd: &quot;password&quot;, roles: [&#123; role: &quot;dbOwner&quot;, db: &quot;newDatabase&quot; &#125;]&#125;)</span><br></pre></td></tr></table></figure>

<p>username和password分别对应自己设定的账户和密码，db后的集合名一定要和use的名称一致。每创建一个数据库都要进行授权，否则无法访问。</p>
<h5 id="MongoDB参数配置"><a href="#MongoDB参数配置" class="headerlink" title="MongoDB参数配置"></a>MongoDB参数配置</h5><p>进入到&#x2F;usr&#x2F;local&#x2F;mongodb文件夹，创建data、log目录和mongo.conf文件，用来存储数据及日志文件，其中log目录下创建mongodb.log文件。mongodb.conf文件内用vim写入下列命令：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">port</span>=<span class="string">27017 #端口</span></span><br><span class="line"><span class="attr">dbpath</span>= <span class="string">/programs/mongodb/data #数据库存文件存放目录</span></span><br><span class="line"><span class="attr">logpath</span>= <span class="string">/programs/mongodb/log/mongodb.log #日志文件存放路径</span></span><br><span class="line"><span class="attr">logappend</span>=<span class="string">true #使用追加的方式写日志</span></span><br><span class="line"><span class="attr">fork</span>=<span class="string">true #以守护进程的方式运行，创建服务器进程</span></span><br><span class="line"><span class="attr">maxConns</span>=<span class="string">100 #最大同时连接数</span></span><br><span class="line"><span class="attr">auth</span>=<span class="string">true #启用验证</span></span><br><span class="line"><span class="attr">journal</span>=<span class="string">true #每次写入会记录一条操作日志（通过journal可以重新构造出写入的数据）。</span></span><br><span class="line"><span class="comment">#即使宕机，启动时wiredtiger会先将数据恢复到最近一次的checkpoint点，然后重放后续的journal日志来恢复。</span></span><br><span class="line"><span class="attr">storageEngine</span>=<span class="string">wiredTiger  #存储引擎有mmapv1、wiretiger、mongorocks</span></span><br><span class="line"><span class="attr">bind_ip</span> = <span class="string">0.0.0.0  #这样就可外部访问了，例如从win10中去连虚拟机中的MongoDB</span></span><br></pre></td></tr></table></figure>

<h5 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h5><p>输入下列命令便可以直接在&#x2F;etc&#x2F;rc.local文件中写入mongodb services用于开机自启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;/usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data -logpath=/usr/local/mongodb/log -logappend --auth --port=27017&quot; &gt;&gt; /etc/rc.local</span><br></pre></td></tr></table></figure>

<p>配置参数含义</p>
<table>
<thead>
<tr>
<th>–quiet</th>
<th>安静输出</th>
</tr>
</thead>
<tbody><tr>
<td>–port arg</td>
<td>指定服务端口号，默认端口27017</td>
</tr>
<tr>
<td>–bind_ip arg</td>
<td>绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP</td>
</tr>
<tr>
<td>–logpath arg</td>
<td>指定MongoDB日志文件，注意是指定文件不是目录</td>
</tr>
<tr>
<td>–logappend</td>
<td>使用追加的方式写日志</td>
</tr>
<tr>
<td>–pidfilepath arg</td>
<td>PID File 的完整路径，如果没有设置，则没有PID文件</td>
</tr>
<tr>
<td>–keyFile arg</td>
<td>集群的私钥的完整路径，只对于Replica Set 架构有效</td>
</tr>
<tr>
<td>–unixSocketPrefix arg</td>
<td>UNIX域套接字替代目录,(默认为 &#x2F;tmp)</td>
</tr>
<tr>
<td>–fork</td>
<td>以守护进程的方式运行MongoDB，创建服务器进程</td>
</tr>
<tr>
<td>–auth</td>
<td>启用验证</td>
</tr>
<tr>
<td>–cpu</td>
<td>定期显示CPU的CPU利用率和iowait</td>
</tr>
<tr>
<td>–dbpath arg</td>
<td>指定数据库路径</td>
</tr>
<tr>
<td>–diaglog arg</td>
<td>diaglog选项 0&#x3D;off 1&#x3D;W 2&#x3D;R 3&#x3D;both 7&#x3D;W+some reads</td>
</tr>
<tr>
<td>–directoryperdb</td>
<td>设置每个数据库将被保存在一个单独的目录</td>
</tr>
<tr>
<td>–journal</td>
<td>启用日志选项，MongoDB的数据操作将会写入到journal文件夹的文件里</td>
</tr>
<tr>
<td>–journalOptions arg</td>
<td>启用日志诊断选项</td>
</tr>
<tr>
<td>–ipv6</td>
<td>启用IPv6选项</td>
</tr>
<tr>
<td>–jsonp</td>
<td>允许JSONP形式通过HTTP访问（有安全影响）</td>
</tr>
<tr>
<td>–maxConns arg</td>
<td>最大同时连接数 默认2000</td>
</tr>
<tr>
<td>–noauth</td>
<td>不启用验证</td>
</tr>
<tr>
<td>–nohttpinterface</td>
<td>关闭http接口，默认关闭27018端口访问</td>
</tr>
<tr>
<td>–noprealloc</td>
<td>禁用数据文件预分配(往往影响性能)</td>
</tr>
<tr>
<td>–noscripting</td>
<td>禁用脚本引擎</td>
</tr>
<tr>
<td>–notablescan</td>
<td>不允许表扫描</td>
</tr>
<tr>
<td>–nounixsocket</td>
<td>禁用Unix套接字监听</td>
</tr>
<tr>
<td>–nssize arg (&#x3D;16)</td>
<td>设置信数据库.ns文件大小(MB)</td>
</tr>
<tr>
<td>–objcheck</td>
<td>在收到客户数据,检查的有效性，</td>
</tr>
<tr>
<td>–profile arg</td>
<td>档案参数 0&#x3D;off 1&#x3D;slow, 2&#x3D;all</td>
</tr>
<tr>
<td>–quota</td>
<td>限制每个数据库的文件数，设置默认为8</td>
</tr>
<tr>
<td>–quotaFiles arg</td>
<td>number of files allower per db, requires –quota</td>
</tr>
<tr>
<td>–rest</td>
<td>开启简单的rest API</td>
</tr>
<tr>
<td>–repair</td>
<td>修复所有数据库run repair on all dbs</td>
</tr>
<tr>
<td>–repairpath arg</td>
<td>修复库生成的文件的目录,默认为目录名称dbpath</td>
</tr>
<tr>
<td>–slowms arg (&#x3D;100)</td>
<td>value of slow for profile and console log</td>
</tr>
<tr>
<td>–smallfiles</td>
<td>使用较小的默认文件</td>
</tr>
<tr>
<td>–syncdelay arg (&#x3D;60)</td>
<td>数据写入磁盘的时间秒数(0&#x3D;never,不推荐)</td>
</tr>
<tr>
<td>–sysinfo</td>
<td>打印一些诊断系统信息</td>
</tr>
<tr>
<td>–upgrade</td>
<td>如果需要升级数据库</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux程序开机自启动</title>
    <url>/2019/11/22/Linux%E7%A8%8B%E5%BA%8F%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<p>Linux系统程序开机自启动配置<span id="more"></span></p>
<h4 id="修改启动配置文件"><a href="#修改启动配置文件" class="headerlink" title="修改启动配置文件"></a>修改启动配置文件</h4><p>新建一个sh后缀的脚本文件（例如:stratup.sh），把你所要启动的命令编写进去。然后再编辑“**&#x2F;etc&#x2F;rc.local<strong>”启动配置文件，把</strong>脚本文件所在位置的全路径**输入进去即可。</p>
<h4 id="计划定时启动"><a href="#计划定时启动" class="headerlink" title="计划定时启动"></a>计划定时启动</h4><p>通过crontab可以设定程序的执行时间表， 例如让程序在每天的9点，或者每个星期一的9点执行一次。</p>
<p>crontab -l 列出时间表；</p>
<p>crontab -e编辑时间表；</p>
<p>crontab -d删除时间表；</p>
<p>“-l”查看时间表；</p>
<p>“-e”是编辑(其实就是用vim编辑一个特定文件);</p>
<p>“-d”删除，把该用户所有的时间表都删除，一般都是用“-e”编辑把不要了的时间表逐行删除；</p>
<p>crontab文件的格式是：M H D m d CMD。</p>
<p>一个6个字段，其中最后一个CMD就是所要执行的程序，如haha.sh。</p>
<p>M：分钟（0-59）</p>
<p>H：小时（0-23）</p>
<p>D：日期（1-31）</p>
<p>m：月份（1-12）</p>
<p>d：一个星期中的某天（0-6，0代表周日）</p>
<p>这5个时间字段用空格隔开，其值可以是一个数字，也可以用逗号隔开的多个数字（或其他） ，如果不需设置，则默认为“*”。</p>
<p>例如，每天的9点0分执行startup.sh，就是“0 9 * * * &#x2F;home&#x2F;programs&#x2F;.&#x2F;startup.sh”。</p>
<h4 id="注册系统服务"><a href="#注册系统服务" class="headerlink" title="注册系统服务"></a>注册系统服务</h4><p>操作系统自带的服务，如ssh，ftp等等，开机都是自动启动的，我们也可以通过这种方式让自己开发的程序伪装成系统服务。</p>
<p>比如我想把某个程序添加为系统服务，可以执行以下命令：</p>
<p>chkconfig –add 程序名称(首先，添加为系统服务，<strong>注意add前面是两个横杠</strong>)</p>
<p>chkconfig -leve 启动级别 服务名 on</p>
<p>（说明，3级别代表在命令行模式启动，5级别代表在图形界面启动，on表示开启）</p>
<p>chkconfig -leve 启动级别 服务名 off（说明，off表示关闭自启动）</p>
<p>例如：chkconfig -level 3 mysql on (说明：让mysql服务在命令行模式，随系统启动)</p>
<p>也可以使用 chkconfig –del 服务名称 来删除系统服务</p>
<p>如果要查看哪些服务被添加为系统服务可以使用命令 ：</p>
<p>ntsysv 或者chkconfig –list</p>
<p>如果要查看哪些程序被添加为自启动，可以使用命令 ：</p>
<p>cat &#x2F;etc&#x2F;rc.local（查看这个文件中添加了哪些程序路径）</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Java获取操作系统信息</title>
    <url>/2021/11/10/Java%E8%8E%B7%E5%8F%96%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>常用操作系统信息获取<span id="more"></span></p>
<h6 id="获取本机的IP地址"><a href="#获取本机的IP地址" class="headerlink" title="获取本机的IP地址:"></a>获取本机的IP地址:</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getIpAddress</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException &#123; </span><br><span class="line">    <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getLocalHost(); </span><br><span class="line">    <span class="keyword">return</span> address.getHostAddress(); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h6 id="获取网卡地址"><a href="#获取网卡地址" class="headerlink" title="获取网卡地址:"></a>获取网卡地址:</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMACAddress</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">os</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">osUser</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.name&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(os != <span class="literal">null</span> &amp;&amp; os.startsWith(<span class="string">&quot;Windows&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> <span class="string">&quot;cmd.exe /c ipconfig /all&quot;</span>;</span><br><span class="line">            <span class="type">Process</span>  <span class="variable">p</span> <span class="operator">=</span> Runtime.getRuntime().exec(command);</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(p.getInputStream()));</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span>((line = buffer.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(line.indexOf(<span class="string">&quot;Physical Address&quot;</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> line.indexOf(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">                    index += <span class="number">2</span>;</span><br><span class="line">                    address = line.substring(index);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            buffer.close();</span><br><span class="line">            <span class="keyword">return</span> address.trim();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="获取操作系统账号"><a href="#获取操作系统账号" class="headerlink" title="获取操作系统账号"></a>获取操作系统账号</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String osUser = System.getProperty(&quot;user.name&quot;);</span><br></pre></td></tr></table></figure>

<h6 id="获取操作系统版本"><a href="#获取操作系统版本" class="headerlink" title="获取操作系统版本:"></a>获取操作系统版本:</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Properties; </span><br><span class="line"></span><br><span class="line">Properties props=System.getProperties(); <span class="comment">//获得系统属性集    </span></span><br><span class="line"><span class="type">String</span> <span class="variable">osName</span> <span class="operator">=</span> props.getProperty(<span class="string">&quot;os.name&quot;</span>); <span class="comment">//操作系统名称    </span></span><br><span class="line"><span class="type">String</span> <span class="variable">osArch</span> <span class="operator">=</span> props.getProperty(<span class="string">&quot;os.arch&quot;</span>); <span class="comment">//操作系统构架    </span></span><br><span class="line"><span class="type">String</span> <span class="variable">osVersion</span> <span class="operator">=</span> props.getProperty(<span class="string">&quot;os.version&quot;</span>); <span class="comment">//操作系统版本</span></span><br></pre></td></tr></table></figure>

<h6 id="一些常用信息获得"><a href="#一些常用信息获得" class="headerlink" title="一些常用信息获得"></a>一些常用信息获得</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getProperty</span><span class="params">(String key)</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">键</th>
<th>相关值的描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">java.version</td>
<td>Java 运行时环境版本</td>
</tr>
<tr>
<td align="left">java.vendor</td>
<td>Java 运行时环境供应商</td>
</tr>
<tr>
<td align="left">java.vendor.url</td>
<td>Java 供应商的 URL</td>
</tr>
<tr>
<td align="left">java.home</td>
<td>Java 安装目录</td>
</tr>
<tr>
<td align="left">java.vm.specification.version</td>
<td>Java 虚拟机规范版本</td>
</tr>
<tr>
<td align="left">java.vm.specification.vendor</td>
<td>Java 虚拟机规范供应商</td>
</tr>
<tr>
<td align="left">java.vm.specification.name</td>
<td>Java 虚拟机规范名称</td>
</tr>
<tr>
<td align="left">java.vm.version</td>
<td>Java 虚拟机实现版本</td>
</tr>
<tr>
<td align="left">java.vm.vendor</td>
<td>Java 虚拟机实现供应商</td>
</tr>
<tr>
<td align="left">java.vm.name</td>
<td>Java 虚拟机实现名称</td>
</tr>
<tr>
<td align="left">java.specification.version</td>
<td>Java 运行时环境规范版本</td>
</tr>
<tr>
<td align="left">java.specification.vendor</td>
<td>Java 运行时环境规范供应商</td>
</tr>
<tr>
<td align="left">java.specification.name</td>
<td>Java 运行时环境规范名称</td>
</tr>
<tr>
<td align="left">java.class.version</td>
<td>Java 类格式版本号</td>
</tr>
<tr>
<td align="left">java.class.path</td>
<td>Java 类路径</td>
</tr>
<tr>
<td align="left">java.library.path</td>
<td>加载库时搜索的路径列表</td>
</tr>
<tr>
<td align="left">java.io.tmpdir</td>
<td>默认的临时文件路径</td>
</tr>
<tr>
<td align="left">java.compiler</td>
<td>要使用的 JIT 编译器的名称</td>
</tr>
<tr>
<td align="left">java.ext.dirs</td>
<td>一个或多个扩展目录的路径</td>
</tr>
<tr>
<td align="left">file.separator</td>
<td>文件分隔符（在 UNIX 系统中是“&#x2F;”）</td>
</tr>
<tr>
<td align="left">path.separator</td>
<td>路径分隔符（在 UNIX 系统中是“:”）</td>
</tr>
<tr>
<td align="left">line.separator</td>
<td>行分隔符（在 UNIX 系统中是“&#x2F;n”）</td>
</tr>
<tr>
<td align="left">user.name</td>
<td>用户的账户名称</td>
</tr>
<tr>
<td align="left">user.home</td>
<td>用户的主目录</td>
</tr>
<tr>
<td align="left">user.dir</td>
<td>用户的当前工作目录</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux防火墙命令</title>
    <url>/2022/01/09/Linux%E9%98%B2%E7%81%AB%E5%A2%99%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>本文以CentOS 7为例。<span id="more"></span></p>
<h5 id="防火墙常用操作"><a href="#防火墙常用操作" class="headerlink" title="防火墙常用操作"></a>防火墙常用操作</h5><p>开启防火墙</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld.service</span><br></pre></td></tr></table></figure>

<p>关闭防火墙</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>

<p>开机自启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable firewalld.service</span><br></pre></td></tr></table></figure>

<p>关闭开机自启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl disabel firewalld.service</span><br></pre></td></tr></table></figure>

<p>查看开放的端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-all</span><br><span class="line">or</span><br><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure>

<p>添加永久开放端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br></pre></td></tr></table></figure>

<p>移除开放端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --remove-port=3306/tcp --permanent</span><br></pre></td></tr></table></figure>

<p>重启防火墙生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p>查看规则</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -L -n</span><br></pre></td></tr></table></figure>

<p>查看开放的服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-services</span><br></pre></td></tr></table></figure>

<p>查看防火墙状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure>

<h5 id="伪装IP"><a href="#伪装IP" class="headerlink" title="伪装IP"></a>伪装IP</h5><p>检查是否允许伪装IP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --query-masquerade</span><br></pre></td></tr></table></figure>

<p>允许防火墙伪装IP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-masquerade</span><br></pre></td></tr></table></figure>

<p>禁止防火墙伪装IP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --remove-masquerade</span><br></pre></td></tr></table></figure>

<h5 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h5><p>转发的目的不指定 IP 的话就默认为本机，如果指定了 IP 却没指定端口，则默认使用来源端口。如果配置好端口转发之后不能用，可以检查以下两个方面的问题：</p>
<ol>
<li>比如我将 80 端口转发至 8080 端口，首先检查本地的 80 端口和目标的 8080 端口是否开放监听了（也就是监听程序是否运行了）；</li>
<li>检查是否允许伪装 IP，没允许的话要开启伪装 IP。</li>
</ol>
<p>添加映射</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-forward-port=proto=80:proto=tcp:toaddr=192.168.0.1:toport=8080</span><br></pre></td></tr></table></figure>

<p>删除映射</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --remove-forward-port=proto=80:proto=tcp:toaddr=192.168.0.1:toport=8080</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>防火墙</tag>
      </tags>
  </entry>
  <entry>
    <title>List转Map、分组、过滤</title>
    <url>/2022/05/03/List%E8%BD%ACMap%E3%80%81%E5%88%86%E7%BB%84%E3%80%81%E8%BF%87%E6%BB%A4/</url>
    <content><![CDATA[<p>java8的List新特性，可以用简洁高效的代码来实现一些数据处理。<span id="more"></span></p>
<h6 id="创建一个对象"><a href="#创建一个对象" class="headerlink" title="创建一个对象"></a>创建一个对象</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Apple</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal money;</span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Apple</span><span class="params">(Integer id, String name, BigDecimal money, Integer num)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="添加测试数据"><a href="#添加测试数据" class="headerlink" title="添加测试数据"></a>添加测试数据</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Apple&gt; appleList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//存放apple对象集合</span></span><br><span class="line"> </span><br><span class="line"><span class="type">Apple</span> <span class="variable">apple1</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Apple</span>(<span class="number">1</span>,<span class="string">&quot;苹果1&quot;</span>,<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;3.25&quot;</span>),<span class="number">10</span>);</span><br><span class="line"><span class="type">Apple</span> <span class="variable">apple12</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Apple</span>(<span class="number">1</span>,<span class="string">&quot;苹果2&quot;</span>,<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1.35&quot;</span>),<span class="number">20</span>);</span><br><span class="line"><span class="type">Apple</span> <span class="variable">apple2</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Apple</span>(<span class="number">2</span>,<span class="string">&quot;香蕉&quot;</span>,<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;2.89&quot;</span>),<span class="number">30</span>);</span><br><span class="line"><span class="type">Apple</span> <span class="variable">apple3</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Apple</span>(<span class="number">3</span>,<span class="string">&quot;荔枝&quot;</span>,<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;9.99&quot;</span>),<span class="number">40</span>);</span><br><span class="line"> </span><br><span class="line">appleList.add(apple1);</span><br><span class="line">appleList.add(apple12);</span><br><span class="line">appleList.add(apple2);</span><br><span class="line">appleList.add(apple3);</span><br></pre></td></tr></table></figure>

<h6 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h6><p>List里面的对象元素，以某个属性来分组，例如，以id分组，将id相同的放在一起：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//List 以ID分组 Map&lt;Integer,List&lt;Apple&gt;&gt;</span></span><br><span class="line">Map&lt;Integer, List&lt;Apple&gt;&gt; groupBy = appleList.stream().collect(Collectors.groupingBy(Apple::getId));</span><br><span class="line"> </span><br><span class="line">System.err.println(<span class="string">&quot;groupBy:&quot;</span>+groupBy);</span><br><span class="line">&#123;<span class="number">1</span>=[Apple&#123;id=<span class="number">1</span>, name=<span class="string">&#x27;苹果1&#x27;</span>, money=<span class="number">3.25</span>, num=<span class="number">10</span>&#125;, Apple&#123;id=<span class="number">1</span>, name=<span class="string">&#x27;苹果2&#x27;</span>, money=<span class="number">1.35</span>, num=<span class="number">20</span>&#125;], <span class="number">2</span>=[Apple&#123;id=<span class="number">2</span>, name=<span class="string">&#x27;香蕉&#x27;</span>, money=<span class="number">2.89</span>, num=<span class="number">30</span>&#125;], <span class="number">3</span>=[Apple&#123;id=<span class="number">3</span>, name=<span class="string">&#x27;荔枝&#x27;</span>, money=<span class="number">9.99</span>, num=<span class="number">40</span>&#125;]&#125;</span><br></pre></td></tr></table></figure>

<h6 id="List转Map"><a href="#List转Map" class="headerlink" title="List转Map"></a>List转Map</h6><p>id为key，apple对象为value，可以这么做：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * List -&gt; Map</span></span><br><span class="line"><span class="comment"> * 需要注意的是：</span></span><br><span class="line"><span class="comment"> * toMap 如果集合对象有重复的key，会报错Duplicate key ....</span></span><br><span class="line"><span class="comment"> *  apple1,apple12的id都为1。</span></span><br><span class="line"><span class="comment"> *  可以用 (k1,k2)-&gt;k1 来设置，如果有重复的key,则保留key1,舍弃key2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Map&lt;Integer, Apple&gt; appleMap = appleList.stream().collect(Collectors.toMap(Apple::getId, a -&gt; a,(k1,k2)-&gt;k1));</span><br></pre></td></tr></table></figure>

<p>打印appleMap</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="number">1</span>=Apple<span class="punctuation">&#123;</span>id=<span class="number">1</span><span class="punctuation">,</span> name=&#x27;苹果<span class="number">1</span>&#x27;<span class="punctuation">,</span> money=<span class="number">3.25</span><span class="punctuation">,</span> num=<span class="number">10</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="number">2</span>=Apple<span class="punctuation">&#123;</span>id=<span class="number">2</span><span class="punctuation">,</span> name=&#x27;香蕉&#x27;<span class="punctuation">,</span> money=<span class="number">2.89</span><span class="punctuation">,</span> num=<span class="number">30</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="number">3</span>=Apple<span class="punctuation">&#123;</span>id=<span class="number">3</span><span class="punctuation">,</span> name=&#x27;荔枝&#x27;<span class="punctuation">,</span> money=<span class="number">9.99</span><span class="punctuation">,</span> num=<span class="number">40</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h6 id="过滤Filter"><a href="#过滤Filter" class="headerlink" title="过滤Filter"></a>过滤Filter</h6><p>从集合中过滤出来符合条件的元素：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//过滤出符合条件的数据</span></span><br><span class="line">List&lt;Apple&gt; filterList = appleList.stream().filter(a -&gt; a.getName().equals(<span class="string">&quot;香蕉&quot;</span>)).collect(Collectors.toList());</span><br><span class="line"> </span><br><span class="line">System.err.println(<span class="string">&quot;filterList:&quot;</span>+filterList);</span><br><span class="line">[Apple&#123;id=<span class="number">2</span>, name=<span class="string">&#x27;香蕉&#x27;</span>, money=<span class="number">2.89</span>, num=<span class="number">30</span>&#125;]</span><br></pre></td></tr></table></figure>

<h6 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h6><p>将集合中的数据按照某个属性求和:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算 总金额</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">totalMoney</span> <span class="operator">=</span> appleList.stream().map(Apple::getMoney).reduce(BigDecimal.ZERO, BigDecimal::add);</span><br><span class="line"></span><br><span class="line">System.err.println(<span class="string">&quot;totalMoney:&quot;</span>+totalMoney);  <span class="comment">//totalMoney:17.48</span></span><br></pre></td></tr></table></figure>

<h6 id="查找流中最大-最小值"><a href="#查找流中最大-最小值" class="headerlink" title="查找流中最大 最小值"></a>查找流中最大 最小值</h6><p>Collectors.maxBy 和 Collectors.minBy 来计算流中的最大或最小值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Dish&gt; maxDish = Dish.menu.stream().</span><br><span class="line">      collect(Collectors.maxBy(Comparator.comparing(Dish::getCalories)));</span><br><span class="line">maxDish.ifPresent(System.out::println);</span><br><span class="line"> </span><br><span class="line">Optional&lt;Dish&gt; minDish = Dish.menu.stream().</span><br><span class="line">      collect(Collectors.minBy(Comparator.comparing(Dish::getCalories)));</span><br><span class="line">minDish.ifPresent(System.out::println);</span><br></pre></td></tr></table></figure>

<h6 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.Comparator.comparingLong;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.collectingAndThen;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toCollection;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 根据id去重</span></span><br><span class="line">     List&lt;Person&gt; unique = appleList.stream().collect(</span><br><span class="line">                collectingAndThen(</span><br><span class="line">                        toCollection(() -&gt; <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(comparingLong(Apple::getId))), ArrayList::<span class="keyword">new</span>)</span><br><span class="line">        );</span><br></pre></td></tr></table></figure>

<h6 id="下表展示-Collectors-类的静态工厂方法。"><a href="#下表展示-Collectors-类的静态工厂方法。" class="headerlink" title="下表展示 Collectors 类的静态工厂方法。"></a>下表展示 Collectors 类的静态工厂方法。</h6><table>
<thead>
<tr>
<th>工厂方法</th>
<th>返回类型</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>toList</td>
<td><code>List&lt;T&gt;</code></td>
<td>把流中所有项目收集到一个 List</td>
</tr>
<tr>
<td>toSet</td>
<td><code>Set&lt;T&gt;</code></td>
<td>把流中所有项目收集到一个 Set，删除重复项</td>
</tr>
<tr>
<td>toCollection</td>
<td><code>Collection&lt;T&gt;</code></td>
<td>把流中所有项目收集到给定的供应源创建的集合<code>menuStream.collect(toCollection(), ArrayList::new)</code></td>
</tr>
<tr>
<td>counting</td>
<td>Long</td>
<td>计算流中元素的个数</td>
</tr>
<tr>
<td>sumInt</td>
<td>Integer</td>
<td>对流中项目的一个整数属性求和</td>
</tr>
<tr>
<td>averagingInt</td>
<td>Double</td>
<td>计算流中项目 Integer 属性的平均值</td>
</tr>
<tr>
<td>summarizingInt</td>
<td>IntSummaryStatistics</td>
<td>收集关于流中项目 Integer 属性的统计值，例如最大、最小、 总和与平均值</td>
</tr>
<tr>
<td>joining</td>
<td>String</td>
<td>连接对流中每个项目调用 toString 方法所生成的字符串<code>collect(joining(&quot;, &quot;))</code></td>
</tr>
<tr>
<td>maxBy</td>
<td><code>Optional&lt;T&gt;</code></td>
<td>一个包裹了流中按照给定比较器选出的最大元素的 Optional， 或如果流为空则为 Optional.empty()</td>
</tr>
<tr>
<td>minBy</td>
<td><code>Optional&lt;T&gt;</code></td>
<td>一个包裹了流中按照给定比较器选出的最小元素的 Optional， 或如果流为空则为 Optional.empty()</td>
</tr>
<tr>
<td>reducing</td>
<td>归约操作产生的类型</td>
<td>从一个作为累加器的初始值开始，利用 BinaryOperator 与流 中的元素逐个结合，从而将流归约为单个值<code>累加int totalCalories = menuStream.collect(reducing(0, Dish::getCalories, Integer::sum));</code></td>
</tr>
<tr>
<td>collectingAndThen</td>
<td>转换函数返回的类型</td>
<td>包裹另一个收集器，对其结果应用转换函数<code>int howManyDishes = menuStream.collect(collectingAndThen(toList(), List::size))</code></td>
</tr>
<tr>
<td>groupingBy</td>
<td><code>Map&lt;K, List&lt;T&gt;&gt;</code></td>
<td>根据项目的一个属性的值对流中的项目作问组，并将属性值作 为结果 Map 的键</td>
</tr>
<tr>
<td>partitioningBy</td>
<td><code>Map&lt;Boolean,List&lt;T&gt;&gt;</code></td>
<td>根据对流中每个项目应用谓词的结果来对项目进行分区</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB文件上传和下载</title>
    <url>/2022/05/03/MongoDB%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<p>前台上传文件或者后台生成文件直接上传到MongoDB数据库，然后根据MongoDB的<code>_id</code>下载文件<span id="more"></span></p>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="GridFS对象"><a href="#GridFS对象" class="headerlink" title="GridFS对象"></a>GridFS对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> GridFsTemplate gridFsTemplate;</span><br></pre></td></tr></table></figure>

<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">uploadFile</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 获得提交的文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    <span class="comment">// 获得文件输入流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">ins</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">    <span class="comment">// 获得文件类型</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> file.getContentType();</span><br><span class="line">    <span class="comment">// 将文件存储到mongodb中,mongodb 将会返回这个文件的具体信息</span></span><br><span class="line">    <span class="type">ObjectId</span> <span class="variable">gridFSFile</span> <span class="operator">=</span> gridFsTemplate.store(ins, fileName, contentType);</span><br><span class="line">    <span class="keyword">return</span> gridFSFile.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadFile</span><span class="params">(<span class="meta">@RequestParam(name = &quot;file_id&quot;)</span> String fileId, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> Query.query(Criteria.where(<span class="string">&quot;_id&quot;</span>).is(fileId));</span><br><span class="line">        <span class="comment">// 查询单个文件</span></span><br><span class="line">        <span class="type">GridFsFile</span> <span class="variable">gfsFile</span> <span class="operator">=</span> gridFsTemplate.findOne(query);</span><br><span class="line">      GridFsResource gridFsResource=<span class="keyword">new</span> <span class="title class_">GridFsResource</span>(gfsFile,        		 GridFsBuckets.create(mongoDbFactory.getDb)).openDownloadStream(gfsFile.getObjectId()));</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> gfsfile.getFilename().replace(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//处理中文文件名乱码</span></span><br><span class="line">        <span class="keyword">if</span> (request.getHeader(<span class="string">&quot;User-Agent&quot;</span>).toUpperCase().contains(<span class="string">&quot;MSIE&quot;</span>) ||</span><br><span class="line">                request.getHeader(<span class="string">&quot;User-Agent&quot;</span>).toUpperCase().contains(<span class="string">&quot;TRIDENT&quot;</span>)</span><br><span class="line">                || request.getHeader(<span class="string">&quot;User-Agent&quot;</span>).toUpperCase().contains(<span class="string">&quot;EDGE&quot;</span>)) &#123;</span><br><span class="line">            fileName = java.net.URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//非IE浏览器的处理：</span></span><br><span class="line">            fileName = <span class="keyword">new</span> <span class="title class_">String</span>(fileName.getBytes(<span class="string">&quot;UTF-8&quot;</span>), <span class="string">&quot;ISO-8859-1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通知浏览器进行文件下载</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=\&quot;&quot;</span> + fileName + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">       IOUtils.copy(gridFsResource.getInputStream(),response.getOutputStream());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">deleteFile</span><span class="params">(<span class="meta">@RequestParam(name = &quot;file_id&quot;)</span> String fileId)</span> &#123;</span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> Query.query(Criteria.where(<span class="string">&quot;_id&quot;</span>).is(fileId));</span><br><span class="line">        <span class="comment">// 查询单个文件</span></span><br><span class="line">        <span class="type">GridFSDBFile</span> <span class="variable">gfsfile</span> <span class="operator">=</span> gridFsTemplate.findOne(query);</span><br><span class="line">        <span class="keyword">if</span> (gfsfile == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ServiceResultHelper.genResultWithFaild(Constant.ErrorCode.FILE_NOT_EXIST_ERROR_MSG, Constant.ErrorCode.FILE_NOT_EXIST_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        gridFsTemplate.delete(query);</span><br><span class="line">        <span class="keyword">return</span> ServiceResultHelper.genResultWithSuccess();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>NotBlank注解无效问题</title>
    <url>/2022/05/03/NotBlank%E6%B3%A8%E8%A7%A3%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>@NotBlank使用时无效问题解决。<span id="more"></span></p>
<h5 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h5><p>问题解决之前一直调试都没有发现依赖的问题，后来也是看评论中有人遇到同样的问题，才发现依赖不对。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="实体类注解"><a href="#实体类注解" class="headerlink" title="实体类注解"></a>实体类注解</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message=&quot;昵称不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;邮箱不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Email(message = &quot;邮箱格式不正确&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="判断字段为空的三种注解："><a href="#判断字段为空的三种注解：" class="headerlink" title="判断字段为空的三种注解："></a>判断字段为空的三种注解：</h6><p>@NotBlank：只用在String上，表示传进来的值不能为null，而且调用trim()后，长度必须大于0</p>
<p>@NotNull：不能为null，但可以为empty(分配了内存空间，但值为空)</p>
<p>@NotEmpty：不能为null，而且长度必须大于0</p>
<h5 id="参数注解"><a href="#参数注解" class="headerlink" title="参数注解"></a>参数注解</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">save</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> Result.succ(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以使用<code>@Valid</code>注解参数，<code>@Validated</code>注解Service层。经试验同样有效。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ学习记录</title>
    <url>/2022/08/29/RabbitMQ%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="MQ相关概念"><a href="#MQ相关概念" class="headerlink" title="MQ相关概念"></a>MQ相关概念</h2><h3 id="什么是MQ"><a href="#什么是MQ" class="headerlink" title="什么是MQ"></a>什么是MQ</h3><p>MQ(message queue)，本质是队列，FIFO先入先出，只不过队列中存放的是message。还是一种跨进程的通信机制，用于上下游传递消息。在互联网架构中，MQ是一种非常常见的上下游“逻辑解耦+物理解耦”的消息通信服务。使用了MQ之后，消息发送上游只需要依赖MQ，不用依赖其他服务。<span id="more"></span></p>
<h3 id="为什么要用MQ"><a href="#为什么要用MQ" class="headerlink" title="为什么要用MQ"></a>为什么要用MQ</h3><h4 id="流量消峰"><a href="#流量消峰" class="headerlink" title="流量消峰"></a>流量消峰</h4><p>在正常情况下，如果订单系统最多只能处理一万条数据。但是在高峰的时候，如果有两万条数据，订单系统处理不了，可能导致下单失败。如果使用消息队列作为缓冲，部分订单先放到队列里，用户虽然等待时间长，但是能够正常下单使用。</p>
<h4 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h4><p>在大型项目中包含多个系统，部分系统是耦合的，这个数据处理完之后交由另一个系统处理，如果另一个系统发生故障，就会导致数据异常。如果采用消息队列模式，就算系统发生故障，等待系统恢复后也可以数据正常，提升系统的可用性。</p>
<h4 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h4><p>有些服务之间调用时异步的，例如A调用B，B需要花费很长时间执行，但是A需要B什么时候可以执行完。以前一般有两种方式，A过一段时间去调用B的查询API查询，或者A提供一个callback api，B执行完之后调用API通知A服务。这两种方式都不是很优雅，使用消息总线，可以很方便解决这个问题，A调用B服务后，只需要监听B处理完成的消息，当B处理完之后，会发送消息给MQ，MQ会将此消息转发给A服务。这样A服务既不用循环调用B的查询API，也不用提供callback api。同样B服务也不用做这些操作。A服务还能及时的得到异步处理成功的消息。</p>
<h3 id="RabbitMQ介绍"><a href="#RabbitMQ介绍" class="headerlink" title="RabbitMQ介绍"></a>RabbitMQ介绍</h3><p>2007年发布，是一个在AMQP(高级消息队列协议)基础上完成的，可复用的企业消息系统，是当前最主流的消息中间件之一。</p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>由于erlang语言的高并发特性，性能较好；吞吐量到万级，MQ功能比较完备、健壮、稳定、易用、跨平台、支持多种语言，如Python、Ruby、.NET、Java、C、PHP、JMS、ActionScript、XMPP、STOMP等，支持AJAX文档齐全；开源提供的管理界面非常棒，用起来很好用，社区活跃高；更新频率相当高。<a href="https://www.rabbitmq.com/new.html">https://www.rabbitmq.com/new.html</a></p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>商业版需要收费，学习成本较高</p>
<h3 id="MQ的选择"><a href="#MQ的选择" class="headerlink" title="MQ的选择"></a>MQ的选择</h3><h4 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h4><p>Kafka主要特点是基于Pull的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输，适合产生大量数据的互联网服务的数据收集业务。大型公司建议可以选用，如果有日志采集功能，肯定是首选Kafka了。</p>
<h4 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h4><p>天生为金融互联网领域而生，对于可靠性要求很高的场景，尤其是电商里面的订单扣款，以及业务消峰，在大量交易涌入时，后端可能无法及时处理的情况。RocketMQ在稳定性上可能更是值得信赖，这些业务场景在阿里双11已经经历了多次考验，如果你的业务有上述并发场景，建议选择RocketMQ。</p>
<h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><p>结合erlang语言本身的并发优势，性能好时效性微秒级，社区活跃度也比较高，管理界面用起来十分方便，如果你的数据量没有那么大，中小型公司选择功能比较完备的鄂RabbitMQ。</p>
<h2 id="RabbitMQ-1"><a href="#RabbitMQ-1" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>RabbitMQ是一个消息中间件：它接收、存储并转发消息。</p>
<h3 id="四大核心概念"><a href="#四大核心概念" class="headerlink" title="四大核心概念"></a>四大核心概念</h3><ul>
<li>生产者：产生数据发送消息的程序是生产者</li>
<li>交换机：交换机是RabbitMQ非常重要的一个部件，一方面它接收来自生产者的消息，另一方面他将消息推送到队列中。交换机必须确切知道如何处理它接收到的消息，是将这些消息推送到特定队列还是推送到多队列，亦或者是把消息丢弃，这个得有交换机类型决定</li>
<li>队列：队列是RabbitMQ内部使用的一种数据结果，尽管消息流经RabbitMQ和应用程序，但它们只能存储在队列中。队列仅受主机的内存和磁盘限制的约束，本质是一个大的消息缓存区。许多生产者可以将消息发送到一个队列，许多消费者可以尝试从一个队列接收数据。这就是我们使用队列的方式</li>
<li>消费者：消费与接收具有相似的含义。消费者大多时候是一个等待接收消息的程序。请注意生产者、消费者和消息中间件很多时候并不在同一机器上。同一个应用程序既可以是生产者又可以是消费者。</li>
</ul>
<h3 id="RabbitMQ核心部部分"><a href="#RabbitMQ核心部部分" class="headerlink" title="RabbitMQ核心部部分"></a>RabbitMQ核心部部分</h3>]]></content>
      <categories>
        <category>消息队列</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis使用场景</title>
    <url>/2022/08/02/Redis%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<p>redis的使用场景<span id="more"></span></p>
<h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><p>String类型</p>
<p>例如：热点数据缓存（例如报表、明星出轨），对象缓存、全页缓存、可以提升热点数据的访问数据。</p>
<h4 id="数据共享分布式"><a href="#数据共享分布式" class="headerlink" title="数据共享分布式"></a>数据共享分布式</h4><p>String 类型，因为 Redis 是分布式的独立服务，可以在多个应用之间共享</p>
<p>例如：分布式Session</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h4><p>String 类型setnx方法，只有不存在时才能添加成功，返回true</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">getLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">flag</span> <span class="operator">=</span> jedis.setnx(key, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">        jedis.expire(key, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">return</span> <span class="variable">flag</span> <span class="operator">=</span>= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">releaseLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    jedis.del(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全局ID"><a href="#全局ID" class="headerlink" title="全局ID"></a>全局ID</h4><p>int类型，incrby，利用原子性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">incrby userid 1000</span><br></pre></td></tr></table></figure>

<p>分库分表的场景，一次性拿一段</p>
<h4 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h4><p>int类型，incr方法</p>
<p>例如：文章的阅读量、微博点赞数、允许一定的延迟，先写入Redis再定时同步到数据库</p>
<h4 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h4><p>int类型，incr方法</p>
<p>以访问者的ip和其他信息作为key，访问一次增加一次计数，超过次数则返回false</p>
<h4 id="位统计"><a href="#位统计" class="headerlink" title="位统计"></a>位统计</h4><p>String类型的bitcount（1.6.6的bitmap数据结构介绍）</p>
<p>字符是以8位二进制存储的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">set k1 a</span><br><span class="line">setbit k1 <span class="number">6</span> <span class="number">1</span></span><br><span class="line">setbit k1 <span class="number">7</span> <span class="number">0</span></span><br><span class="line">get k1 </span><br><span class="line"><span class="comment">/* 6 7 代表的a的二进制位的修改</span></span><br><span class="line"><span class="comment">a 对应的ASCII码是97，转换为二进制数据是01100001</span></span><br><span class="line"><span class="comment">b 对应的ASCII码是98，转换为二进制数据是01100010</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">因为bit非常节省空间（1 MB=8388608 bit），可以用来做大数据量的统计。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>例如：在线用户统计，留存用户统计</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setbit onlineusers <span class="number">01</span> </span><br><span class="line">setbit onlineusers <span class="number">11</span> </span><br><span class="line">setbit onlineusers <span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>支持按位与、按位或等等操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BITOPANDdestkeykey[key...] ，对一个或多个 key 求逻辑并，并将结果保存到 destkey 。       </span><br><span class="line">BITOPORdestkeykey[key...] ，对一个或多个 key 求逻辑或，并将结果保存到 destkey 。 </span><br><span class="line">BITOPXORdestkeykey[key...] ，对一个或多个 key 求逻辑异或，并将结果保存到 destkey 。 </span><br><span class="line">BITOPNOTdestkeykey ，对给定 key 求逻辑非，并将结果保存到 destkey 。</span><br></pre></td></tr></table></figure>

<p>计算出7天都在线的用户</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BITOP <span class="string">&quot;AND&quot;</span> <span class="string">&quot;7_days_both_online_users&quot;</span> <span class="string">&quot;day_1_online_users&quot;</span> <span class="string">&quot;day_2_online_users&quot;</span> ...  <span class="string">&quot;day_7_online_users&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h4><p>String 或hash。所有String可以做的hash都可以做</p>
<ul>
<li><p>key：用户id；field：商品id；value：商品数量。</p>
</li>
<li><p>+1：hincr。-1：hdecr。删除：hdel。全选：hgetall。商品数：hlen。</p>
</li>
</ul>
<h4 id="用户消息时间线timeline"><a href="#用户消息时间线timeline" class="headerlink" title="用户消息时间线timeline"></a>用户消息时间线timeline</h4><p>​    list，双向链表，直接作为timeline就好了。插入有序</p>
<h4 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h4><p>List提供了两个阻塞的弹出操作：blpop&#x2F;brpop，可以设置超时时间</p>
<ul>
<li>blpop：blpop key1 timeout 移除并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</li>
<li>brpop：brpop key1 timeout 移除并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</li>
</ul>
<p>上面的操作。其实就是java的阻塞队列。</p>
<ul>
<li>队列：先进先除：rpush blpop，左头右尾，右边进入队列，左边出队列</li>
<li>栈：先进后出：rpush brpop</li>
</ul>
<h4 id="抽奖"><a href="#抽奖" class="headerlink" title="抽奖"></a>抽奖</h4><p>自带一个随机获得值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spop myset</span><br></pre></td></tr></table></figure>

<h4 id="点赞、签到、打卡"><a href="#点赞、签到、打卡" class="headerlink" title="点赞、签到、打卡"></a>点赞、签到、打卡</h4><p>假如微博ID是t1001，用户ID是u3001</p>
<p>用 like:t1001 来维护 t1001 这条微博的所有点赞用户</p>
<ul>
<li>点赞了这条微博：sadd like:t1001 u3001</li>
<li>取消点赞：srem like:t1001 u3001</li>
<li>是否点赞：sismember like:t1001 u3001</li>
<li>点赞的所有用户：smembers like:t1001</li>
<li>点赞数：scard like:t1001</li>
</ul>
<h4 id="商品标签"><a href="#商品标签" class="headerlink" title="商品标签"></a>商品标签</h4><p>用 tags:i5001 来维护商品所有的标签。</p>
<ul>
<li>sadd tags:i5001 画面清晰细腻</li>
<li>sadd tags:i5001 真彩清晰显示屏</li>
<li>sadd tags:i5001 流程至极</li>
</ul>
<h4 id="商品筛选"><a href="#商品筛选" class="headerlink" title="商品筛选"></a>商品筛选</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取差集</span></span><br><span class="line">sdiff set1 set2</span><br><span class="line"><span class="comment">// 获取交集（intersection ）</span></span><br><span class="line">sinter set1 set2</span><br><span class="line"><span class="comment">// 获取并集</span></span><br><span class="line">sunion set1 set2</span><br><span class="line"></span><br><span class="line"><span class="comment">//假如：iPhone11 上市了</span></span><br><span class="line"></span><br><span class="line">sadd brand:apple iPhone11</span><br><span class="line"></span><br><span class="line">sadd brand:ios iPhone11</span><br><span class="line"></span><br><span class="line">sad screensize:<span class="number">6.0</span>-<span class="number">6.24</span> iPhone11</span><br><span class="line"></span><br><span class="line">sad screentype:lcd iPhone <span class="number">11</span></span><br><span class="line">赛选商品，苹果的、ios的、屏幕在<span class="number">6.0</span>-<span class="number">6.24</span>之间的，屏幕材质是LCD屏幕</span><br><span class="line"></span><br><span class="line">sinter brand:apple brand:ios screensize:<span class="number">6.0</span>-<span class="number">6.24</span> screentype:lcd</span><br></pre></td></tr></table></figure>

<h4 id="用户关注、推荐模型"><a href="#用户关注、推荐模型" class="headerlink" title="用户关注、推荐模型"></a>用户关注、推荐模型</h4><p>follow 关注 fans 粉丝</p>
<p>相互关注：</p>
<ul>
<li>sadd 1:follow 2</li>
<li>sadd 2:fans 1</li>
<li>sadd 1:fans 2</li>
<li>sadd 2:follow 1</li>
</ul>
<p>我关注的人也关注了他(取交集)：</p>
<ul>
<li>sinter 1:follow 2:fans</li>
</ul>
<p>可能认识的人：</p>
<ul>
<li>用户1可能认识的人(差集)：sdiff 2:follow 1:follow</li>
<li>用户2可能认识的人：sdiff 1:follow 2:follow</li>
</ul>
<h4 id="排行榜"><a href="#排行榜" class="headerlink" title="排行榜"></a>排行榜</h4><p>id 为6001 的新闻点击数加1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zincrby hotNews:20190926 1 n6001</span><br></pre></td></tr></table></figure>

<p>获取今天点击最多的15条：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zrevrange hotNews:20190926 0 15 withscores</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis随笔</title>
    <url>/2022/01/16/Redis%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<p>redis使用相关知识<span id="more"></span></p>
<h6 id="Redis的List能在什么场景下使用？"><a href="#Redis的List能在什么场景下使用？" class="headerlink" title="Redis的List能在什么场景下使用？"></a>Redis的List能在什么场景下使用？</h6><p>Redis 中list的数据结构实现是双向链表，所以可以非常便捷的应用于消息队列（生产者 &#x2F; 消费者模型）。消息的生产者只需要通过lpush将消息放入 list，消费者便可以通过rpop取出该消息，并且可以保证消息的有序性。如果需要实现带有优先级的消息队列也可以选择sorted set。而pub&#x2F;sub功能也可以用作发布者 &#x2F; 订阅者模型的消息。</p>
<h6 id="Redis为什么是单线程？"><a href="#Redis为什么是单线程？" class="headerlink" title="Redis为什么是单线程？"></a>Redis为什么是单线程？</h6><p>因为CPU不是Redis的瓶颈。Redis的瓶颈最有可能是机器内存或者网络带宽。既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案了。</p>
<p>缺点：服务器其他核闲置。</p>
<h6 id="为什么-redis-读写速率快、性能好？"><a href="#为什么-redis-读写速率快、性能好？" class="headerlink" title="为什么 redis 读写速率快、性能好？"></a>为什么 redis 读写速率快、性能好？</h6><p>Redis是纯内存数据库，相对于读写磁盘，读写内存的速度就不是几倍几十倍了，一般，hash查找可以达到每秒百万次的数量级。</p>
<p>多路复用IO，“多路”指的是多个网络连接，“复用”指的是复用同一个线程。采用多路 I&#x2F;O 复用技术可以让单个线程高效的处理多个连接请求（尽量减少网络IO的时间消耗）。可以直接理解为：单线程的原子操作，避免上下文切换的时间和性能消耗；加上对内存中数据的处理速度，很自然的提高redis的吞吐量。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>ResponseBodyAdvice统一处理返回值/响应体</title>
    <url>/2022/05/03/ResponseBodyAdvice%E7%BB%9F%E4%B8%80%E5%A4%84%E7%90%86%E8%BF%94%E5%9B%9E%E5%80%BC-%E5%93%8D%E5%BA%94%E4%BD%93/</url>
    <content><![CDATA[<p>ResponseBodyAdvice的作用：拦截Controller方法的返回值，统一处理返回值&#x2F;响应体，一般用来统一返回格式，加解密，签名等等。使用后不需要在每一个接口返回值写返回体，统一返回结果，减少重复代码。<span id="more"></span></p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ResponseBodyAdvice</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 是否支持advice功能</span></span><br><span class="line"><span class="comment">  * true 支持，false 不支持</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(MethodParameter var1, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; var2)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 对返回的数据进行处理</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    T <span class="title function_">beforeBodyWrite</span><span class="params">(<span class="meta">@Nullable</span> T var1, MethodParameter var2, MediaType var3, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; var4, ServerHttpRequest var5, ServerHttpResponse var6)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p>ResponseBodyAdvice 接口是在 Controller 执行 return 之后，在 response 返回给客户端之前，执行的对 response 的一些处理，可以实现对 response 数据的一些统一封装或者加密等操作。</p>
<p>（1）supports —— 判断是否要执行beforeBodyWrite方法，true为执行，false不执行 —— 通过supports方法，我们可以选择哪些类或哪些方法要对response进行处理，其余的则不处理。</p>
<p>（2）beforeBodyWrite —— 对 response 处理的具体执行方法。</p>
<p>在supports中返回<code>true</code>，可以对所有返回值处理。</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><h5 id="Controller层代码"><a href="#Controller层代码" class="headerlink" title="Controller层代码"></a>Controller层代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span> <span class="comment">//此注解包含@ResponseBody注解</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/mp&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseBodyAdviceController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hello&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="ResponseBodyAdvice实现类"><a href="#ResponseBodyAdvice实现类" class="headerlink" title="ResponseBodyAdvice实现类"></a>ResponseBodyAdvice实现类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestResultWrapper</span> <span class="keyword">implements</span> <span class="title class_">ResponseBodyAdvice</span>&lt;Object&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">beforeBodyWrite</span><span class="params">(Object body, MethodParameter returnType, MediaType selectedContentType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; selectedConverterType, ServerHttpRequest request,</span></span><br><span class="line"><span class="params">                                  ServerHttpResponse response)</span> &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//定义一个统一的返回类</span></span><br><span class="line">            <span class="type">RestResult</span> <span class="variable">responseResult</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestResult</span>( <span class="string">&quot;0&quot;</span>, body, <span class="string">&quot;success&quot;</span>);</span><br><span class="line">             <span class="comment">//如果handler处理类的返回类型是String（即控制层的返回值类型），为了保证一致性，这里需要将ResponseResult转回去</span></span><br><span class="line">            <span class="keyword">if</span>(body <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                <span class="keyword">return</span> JSON.toJSONString(responseResult);</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="comment">//封装后的数据返回到前端页面</span></span><br><span class="line">            <span class="keyword">return</span> JSONObject.toJSON(responseResult);       </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@RestControllerAdvice</code>是<code>@RestController</code>注解的增强，可以实现三个方面的功能：</p>
<ul>
<li><p>全局异常处理</p>
</li>
<li><p>全局数据绑定</p>
</li>
<li><p>全局数据预处理</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(o <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">    <span class="keyword">return</span> objectMapper.writeValueAsString(ResultData.success(o));</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<p>如果Controller直接返回String的话，SpringBoot是直接返回，故我们需要手动转换成json。</p>
<h5 id="公共返回类"><a href="#公共返回类" class="headerlink" title="公共返回类"></a>公共返回类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 统一返回Rest风格的数据结构</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestResult</span>&lt;T&gt;  <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;2000&quot;</span>;</span><br><span class="line">    <span class="comment">// 成功时返回的数据，失败时返回具体的异常信息</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="comment">// 请求失败返回的提示信息，给前端进行页面展示的信息</span></span><br><span class="line">    <span class="keyword">private</span> String message ; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RestResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;RestResult&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;code=&#x27;&quot;</span> + code + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, data=&quot;</span> + data +</span><br><span class="line">                <span class="string">&quot;, message=&quot;</span> + message +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RestResult</span><span class="params">(String code, T data, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot多数据源配置</title>
    <url>/2022/05/03/SpringBoot%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>项目配置多数据源举例。<span id="more"></span></p>
<h3 id="属性配置"><a href="#属性配置" class="headerlink" title="属性配置"></a>属性配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#主数据库</span></span><br><span class="line"><span class="attr">primary.spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">primary.spring.datasource.jdbc-url</span>=<span class="string">jdbc:mysql://localhost:3306/vueblog?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line"><span class="attr">primary.spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">primary.spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"><span class="comment">#备数据库</span></span><br><span class="line"><span class="attr">secondary.spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">secondary.spring.datasource.jdbc-url</span>=<span class="string">jdbc:mysql://localhost:3306/vueuser?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line"><span class="attr">secondary.spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">secondary.spring.datasource.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><p>每一个数据源对应一个配置类</p>
<h4 id="主数据源"><a href="#主数据源" class="headerlink" title="主数据源"></a>主数据源</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.jdbc.DataSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多数据源配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.example.springcloud0614.mapper.primary&quot;, sqlSessionFactoryRef = &quot;primarySqlSessionFactory&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrimaryDataSourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主数据源配置</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(&quot;primary&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;primary.spring.datasource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">primaryDataSourceProperties</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主数据源</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(&quot;primarySqlSessionFactory&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">primarySqlSessionFactory</span><span class="params">(<span class="meta">@Qualifier(&quot;primary&quot;)</span> DataSource dataSource)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        bean.setDataSource(dataSource);</span><br><span class="line">        bean.setMapperLocations(<span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>().getResources(<span class="string">&quot;classpath:mapper/primary/*.xml&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> bean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(&quot;primarySqlSessionTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionTemplate <span class="title function_">primarySqlSessionTemplate</span><span class="params">(<span class="meta">@Qualifier(&quot;primarySqlSessionFactory&quot;)</span> SqlSessionFactory factory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlSessionTemplate</span>(factory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>备数据源配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.jdbc.DataSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多数据源配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.example.springcloud0614.mapper.secondary&quot;, sqlSessionFactoryRef = &quot;secondarySqlSessionFactory&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecondaryDataSourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;secondary&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;secondary.spring.datasource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">secondaryDataSourceProperties</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;secondarySqlSessionFactory&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">secondarySqlSessionFactory</span><span class="params">(<span class="meta">@Qualifier(&quot;secondary&quot;)</span> DataSource dataSource)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        bean.setDataSource(dataSource);</span><br><span class="line">        bean.setMapperLocations(<span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>().getResources(<span class="string">&quot;classpath:mapper/secondary/*.xml&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> bean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;secondarySqlSessionTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionTemplate <span class="title function_">secondarySqlSessionTemplate</span><span class="params">(<span class="meta">@Qualifier(&quot;secondarySqlSessionFactory&quot;)</span> SqlSessionFactory factory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlSessionTemplate</span>(factory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>mapper下的java文件必须放到对应的包名下<img src="/2022/05/03/SpringBoot%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/233155.png" class></p>
<p>同样的xml文件也要放到对应的包名下<img src="/2022/05/03/SpringBoot%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/233221.png" class></p>
<p>在项目启动时，包名下必须要有文件，否则项目会启动失败。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/2022/04/27/SpringMVC/</url>
    <content><![CDATA[<p>MVC是Spring的七大功能模块之一，七大功能模块分别是Spring Core，AOP，ORM，DAO，MVC，WEB，Context。WEB MVC模块为Spring提供了一套轻量级的MVC实现，在Spring的开发中，我们既可以用Struts也可以用Spring自己的MVC框架，相对于Struts，Spring自己的MVC框架更加简洁和方便。<span id="more"></span></p>
<h4 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h4><ul>
<li>视图层（View）：负责格式化数据并把它们呈现给用户，包括数据展示、用户交互、数据验证、界面设计等功能。</li>
<li>控制层（Controller）：负责接收并转发请求，对请求进行处理后，指定视图并将响应结果发送给客户端。</li>
<li>数据模型层（Model）：模型对象拥有最多的处理任务，是应用程序的主体部分，它负责数据逻辑（业务规则）的处理和实现数据操作（即在数据库中存取数据）。</li>
</ul>
<h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>Spring MVC 涉及到的组件有 DispatcherServlet（前端控制器）、HandlerMapping（处理器映射器）、HandlerAdapter（处理器适配器）、Handler（处理器）、ViewResolver（视图解析器）和 View（视图）。下面对各个组件的功能说明如下。</p>
<h5 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h5><p>DispatcherServlet 是前端控制器，从图 1 可以看出，Spring MVC 的所有请求都要经过 DispatcherServlet 来统一分发。DispatcherServlet 相当于一个转发器或中央处理器，控制整个流程的执行，对各个组件进行统一调度，以降低组件之间的耦合性，有利于组件之间的拓展。</p>
<h5 id="HandlerMapping"><a href="#HandlerMapping" class="headerlink" title="HandlerMapping"></a>HandlerMapping</h5><p>HandlerMapping 是处理器映射器，其作用是根据请求的 URL 路径，通过注解或者 XML 配置，寻找匹配的处理器（Handler）信息。</p>
<h5 id="HandlerAdapter"><a href="#HandlerAdapter" class="headerlink" title="HandlerAdapter"></a>HandlerAdapter</h5><p>HandlerAdapter 是处理器适配器，其作用是根据映射器找到的处理器（Handler）信息，按照特定规则执行相关的处理器（Handler）。</p>
<h5 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h5><p>Handler 是处理器，和 Java Servlet 扮演的角色一致。其作用是执行相关的请求处理逻辑，并返回相应的数据和视图信息，将其封装至 ModelAndView 对象中。</p>
<h5 id="View-Resolver"><a href="#View-Resolver" class="headerlink" title="View Resolver"></a>View Resolver</h5><p>View Resolver 是视图解析器，其作用是进行解析操作，通过 ModelAndView 对象中的 View 信息将逻辑视图名解析成真正的视图 View（如通过一个 JSP 路径返回一个真正的 JSP 页面）。</p>
<h5 id="View"><a href="#View" class="headerlink" title="View"></a>View</h5><p>View 是视图，其本身是一个接口，实现类支持不同的 View 类型（JSP、FreeMarker、Excel 等）。</p>
<h4 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h4><img src="/2022/04/27/SpringMVC/1139441444-0.png" class>

<ol>
<li>用户点击某个请求路径，发起一个 HTTP request 请求，该请求会被提交到 DispatcherServlet（前端控制器）</li>
<li>由 DispatcherServlet 请求一个或多个 HandlerMapping（处理器映射器），并返回一个执行链（HandlerExecutionChain）</li>
<li>DispatcherServlet 将执行链返回的 Handler 信息发送给 HandlerAdapter（处理器适配器）</li>
<li>HandlerAdapter 根据 Handler 信息找到并执行相应的 Handler（常称为 Controller）</li>
<li>Handler 执行完毕后会返回给 HandlerAdapter 一个 ModelAndView 对象（Spring MVC的底层对象，包括 Model 数据模型和 View 视图信息）</li>
<li>HandlerAdapter 接收到 ModelAndView 对象后，将其返回给 DispatcherServlet </li>
<li>DispatcherServlet 接收到 ModelAndView 对象后，会请求 ViewResolver（视图解析器）对视图进行解析</li>
<li>ViewResolver 根据 View 信息匹配到相应的视图结果，并返回给 DispatcherServlet</li>
<li>DispatcherServlet 接收到具体的 View 视图后，进行视图渲染，将 Model 中的模型数据填充到 View 视图中的 request 域，生成最终的 View（视图）</li>
<li>视图负责将结果显示到浏览器（客户端）</li>
</ol>
<h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p>Spring MVC拦截器包含三个方法：preHandle()、postHandle()、afterCompletion()。</p>
]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring配置邮件发送</title>
    <url>/2022/01/08/Spring%E9%85%8D%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</url>
    <content><![CDATA[<p>SpringBoot使用SMTP协议邮件发送。<span id="more"></span></p>
<h4 id="协议分类"><a href="#协议分类" class="headerlink" title="协议分类"></a>协议分类</h4><p><strong>SMTP协议</strong></p>
<p>SMTP的全称是“Simple Mail Transfer Protocol”，即”简单邮件传输协议”。它是一组用于从源地址到目的地址传输邮件的规范，通过它来控制邮件的中转方式</p>
<p><strong>POP协议</strong></p>
<p>POP全称是 Post Office Protocol，邮局协议。它定义了邮件客户端软件和POP3邮件服务器的通信规则</p>
<p><strong>IMAP</strong></p>
<p>IMAP全称是 Internet Message Access Protocol,Internet消息访问协议，它是对POP3协议的一种扩展，也是定义了邮件客户端软件和IMAP邮件服务器的通信规则</p>
<h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="attr">spring.mail.port</span>=<span class="string">25</span></span><br><span class="line"><span class="attr">spring.mail.username</span>=<span class="string">xxxqq.com</span></span><br><span class="line"><span class="attr">spring.mail.from</span>=<span class="string">xxx@qq.com</span></span><br><span class="line"><span class="attr">spring.mail.password</span>=<span class="string">xxxx //授权密码</span></span><br><span class="line"><span class="attr">spring.mail.default-encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="attr">spring.mail.protocol</span>=<span class="string">smtp</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.auth</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.starttls.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.starttls.required</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.socketFactory.class</span>=<span class="string">javax.net.ssl.SSLSocketFactory</span></span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><h5 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//邮件发送接口</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> JavaMailSender mailSender;</span><br><span class="line"><span class="comment">//发送人昵称</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String nick;</span><br></pre></td></tr></table></figure>

<h5 id="简单邮件"><a href="#简单邮件" class="headerlink" title="简单邮件"></a>简单邮件</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单邮件</span></span><br><span class="line"><span class="type">SimpleMailMessage</span> <span class="variable">simpleMailMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line"><span class="comment">// 发件人邮箱</span></span><br><span class="line">simpleMailMessage.setFrom(String.valueOf(<span class="keyword">new</span> <span class="title class_">InternetAddress</span>(nick + <span class="string">&quot;&lt;&quot;</span> + <span class="string">&quot;xxx@qq.com&quot;</span> + <span class="string">&quot;&gt;&quot;</span>)));</span><br><span class="line"><span class="comment">// 收件人</span></span><br><span class="line">simpleMailMessage.setTo(<span class="string">&quot;xxxx@163.com&quot;</span>);</span><br><span class="line">simpleMailMessage.setSubject(<span class="string">&quot;这是一封测试邮件！！！&quot;</span>);</span><br><span class="line"><span class="comment">//4.设置邮件内容</span></span><br><span class="line"><span class="type">String</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="string">&quot;SpirngBoot测试邮件HTML&quot;</span>;</span><br><span class="line">simpleMailMessage.setText(stringBuilder);</span><br><span class="line">mailSender.send(simpleMailMessage);</span><br><span class="line">System.out.println(<span class="string">&quot;邮件发送成功....&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="邮件参数"><a href="#邮件参数" class="headerlink" title="邮件参数"></a>邮件参数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The &quot;To&quot; (primary) recipients.收件人</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">RecipientType</span> <span class="variable">TO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecipientType</span>(<span class="string">&quot;To&quot;</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The &quot;Cc&quot; (carbon copy) recipients.抄送人</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">RecipientType</span> <span class="variable">CC</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecipientType</span>(<span class="string">&quot;Cc&quot;</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The &quot;Bcc&quot; (blind carbon copy) recipients.密送人</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">RecipientType</span> <span class="variable">BCC</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecipientType</span>(<span class="string">&quot;Bcc&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="HTML格式邮件"><a href="#HTML格式邮件" class="headerlink" title="HTML格式邮件"></a>HTML格式邮件</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MimeMessage</span> <span class="variable">mimeMailMessage</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    mimeMailMessage = mailSender.createMimeMessage();</span><br><span class="line">    <span class="comment">//收件人</span></span><br><span class="line">    mimeMailMessage.addRecipients(Message.RecipientType.TO,String.valueOf(<span class="keyword">new</span> <span class="title class_">InternetAddress</span>(<span class="string">&quot;xxx@163.com&quot;</span>)));</span><br><span class="line">    <span class="comment">//抄送人</span></span><br><span class="line">    mimeMailMessage.addRecipients(Message.RecipientType.CC,String.valueOf(<span class="keyword">new</span> <span class="title class_">InternetAddress</span>(<span class="string">&quot;xxx@163.com&quot;</span>)));</span><br><span class="line">    <span class="type">MimeMessageHelper</span> <span class="variable">mimeMessageHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(mimeMailMessage, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//发送人</span></span><br><span class="line">    mimeMessageHelper.setFrom(<span class="string">&quot;xxx@qq.com&quot;</span>);</span><br><span class="line">    <span class="comment">//收件人</span></span><br><span class="line">    mimeMessageHelper.setTo(<span class="string">&quot;xxx@163.com&quot;</span>);</span><br><span class="line">    mimeMessageHelper.setSubject(<span class="string">&quot;邮件测试&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="string">&quot;&lt;h1&gt;SpirngBoot测试邮件HTML&lt;/h1&gt;&quot;</span> +</span><br><span class="line">        <span class="string">&quot;&lt;p style=&#x27;color:#F00&#x27;&gt;你是真的太棒了！&lt;/p&gt;&quot;</span> +</span><br><span class="line">        <span class="string">&quot;&lt;p style=&#x27;text-align:right&#x27;&gt;右对齐&lt;/p&gt;&quot;</span>;</span><br><span class="line">    mimeMessageHelper.setText(sb, <span class="literal">true</span>);</span><br><span class="line">    mailSender.send(mimeMailMessage);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    logger.error(<span class="string">&quot;邮件发送失败&quot;</span>, e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="带附件邮件"><a href="#带附件邮件" class="headerlink" title="带附件邮件"></a>带附件邮件</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MimeMessage</span> <span class="variable">mimeMailMessage</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    mimeMailMessage = javaMailSender.createMimeMessage();</span><br><span class="line">    <span class="type">MimeMessageHelper</span> <span class="variable">mimeMessageHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(mimeMailMessage, <span class="literal">true</span>);</span><br><span class="line">    mimeMessageHelper.setFrom(<span class="string">&quot;xxx@qq.com&quot;</span>);</span><br><span class="line">    mimeMessageHelper.setTo(<span class="string">&quot;xxx@163.com&quot;</span>);</span><br><span class="line">    mimeMessageHelper.setSubject(<span class="string">&quot;邮件测试&quot;</span>);</span><br><span class="line">    mimeMessageHelper.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">//文件路径</span></span><br><span class="line">    <span class="type">FileSystemResource</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemResource</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/main/resources/static/image/mail.png&quot;</span>));</span><br><span class="line">    mimeMessageHelper.addAttachment(<span class="string">&quot;mail.png&quot;</span>, file);</span><br><span class="line">    javaMailSender.send(mimeMailMessage);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">	logger.error(<span class="string">&quot;邮件发送失败&quot;</span>, e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="带有图片邮件"><a href="#带有图片邮件" class="headerlink" title="带有图片邮件"></a>带有图片邮件</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MimeMessage</span> <span class="variable">mimeMailMessage</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    mimeMailMessage = mailSender.createMimeMessage();</span><br><span class="line">    <span class="type">MimeMessageHelper</span> <span class="variable">mimeMessageHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(mimeMailMessage, <span class="literal">true</span>);</span><br><span class="line">    mimeMailMessage.addRecipients(Message.RecipientType.TO,String.valueOf(<span class="keyword">new</span> <span class="title class_">InternetAddress</span>(<span class="string">&quot;xxx@163.com&quot;</span>)));</span><br><span class="line">    mimeMailMessage.addRecipients(Message.RecipientType.CC,String.valueOf(<span class="keyword">new</span> <span class="title class_">InternetAddress</span>(<span class="string">&quot;xxx@163.com&quot;</span>)));</span><br><span class="line">    mimeMessageHelper.setFrom(<span class="string">&quot;xxx@qq.com&quot;</span>);</span><br><span class="line">    mimeMessageHelper.setTo(<span class="string">&quot;xxx@163.com&quot;</span>);</span><br><span class="line">    mimeMessageHelper.setSubject(<span class="string">&quot;邮件测试&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="string">&quot;&lt;html&gt;&lt;body&gt;&lt;img src=&#x27;cid:picture&#x27; /&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>;</span><br><span class="line">    mimeMessageHelper.setText(sb, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//文件路径</span></span><br><span class="line">    <span class="type">FileSystemResource</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemResource</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:/图片/75afd5dff626dcc229afcf0ca33cc378.jpg&quot;</span>));</span><br><span class="line">    mimeMessageHelper.addInline(<span class="string">&quot;picture&quot;</span>, file);</span><br><span class="line">    mailSender.send(mimeMailMessage);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">	log.error(<span class="string">&quot;邮件发送失败&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="多人邮件"><a href="#多人邮件" class="headerlink" title="多人邮件"></a>多人邮件</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多次调用此方法</span></span><br><span class="line">mimeMailMessage.addRecipients(Message.RecipientType.TO,String.valueOf(<span class="keyword">new</span> <span class="title class_">InternetAddress</span>(<span class="string">&quot;xxx@163.com&quot;</span>)));</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring知识</title>
    <url>/2022/01/16/Spring%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>spring知识随笔<span id="more"></span></p>
<h6 id="IoC和DI以及DI如何实现"><a href="#IoC和DI以及DI如何实现" class="headerlink" title="IoC和DI以及DI如何实现"></a>IoC和DI以及DI如何实现</h6><p>IoC叫控制反转，是Inversion of Control的缩写，DI（Dependency Injection）叫依赖注入，是对IoC更简单的诠释。控制反转是把传统上由程序代码直接操控的对象的调用权交给容器，通过容器来实现对象组件的装配和管理。所谓的”控制反转”就是对组件对象控制权的转移，从程序代码本身转移到了外部容器，由容器来创建对象并管理对象之间的依赖关系。IoC体现了好莱坞原则 - “Don’t call me, we will call you”。依赖注入的基本原则是应用组件不应该负责查找资源或者其他依赖的协作对象。配置对象的工作应该由容器负责，查找资源的逻辑应该从应用组件的代码中抽取出来，交给容器来完成。DI是对IoC更准确的描述，即组件之间的依赖关系由容器在运行期决定，形象的来说，即由容器动态的将某种依赖关系注入到组件之中。</p>
<p>一个类A需要用到接口B中的方法，那么就需要为类A和接口B建立关联或依赖关系，最原始的方法是在类A中创建一个接口B的实现类C的实例，但这种方法需要开发人员自行维护二者的依赖关系，也就是说当依赖关系发生变动的时候需要修改代码并重新构建整个系统。如果通过一个容器来管理这些对象以及对象的依赖关系，则只需要在类A中定义好用于关联接口B的方法（构造器或setter方法），将类A和接口B的实现类C放入容器中，通过对容器的配置来实现二者的关联。<br>依赖注入可以通过setter方法注入（设值注入）、构造器注入和接口注入三种方式来实现，Spring支持setter注入和构造器注入，通常使用构造器注入来注入必须的依赖关系，对于可选的依赖关系，则setter注入是更好的选择，setter注入需要类提供无参构造器或者无参的静态工厂方法来创建对象。</p>
<h6 id="Spring中自动装配的方式"><a href="#Spring中自动装配的方式" class="headerlink" title="Spring中自动装配的方式"></a>Spring中自动装配的方式</h6><ul>
<li>no：不进行自动装配，手动设置Bean的依赖关系；</li>
<li>byName：根据Bean的名字进行自动装配；</li>
<li>byType：根据Bean的类型进行自动装配；</li>
<li>constructor：类似于byType，不过是应用于构造器的参数，如果正好有一个Bean与构造器的参数类型相同则可以自动装配，否则会导致错误；</li>
<li>autodetect：如果有默认的构造器，则通过constructor的方式进行自动装配，否则使用byType的方式进行自动装配；</li>
</ul>
<p>自动装配没有自定义装配方式那么精确，而且不能自动装配简单属性（基本类型、字符串等），在使用时应注意。</p>
<h6 id="Spring中BeanFactory和ApplicationContext的区别"><a href="#Spring中BeanFactory和ApplicationContext的区别" class="headerlink" title="Spring中BeanFactory和ApplicationContext的区别"></a>Spring中BeanFactory和ApplicationContext的区别</h6><p><strong>BeanFactory</strong>：</p>
<p>BeanFactory是spring中比较原始，比较古老的Factory。因为比较古老，所以BeanFactory无法支持spring插件，例如：AOP、Web应用等功能。</p>
<p><strong>ApplicationContext</strong>：</p>
<p>ApplicationContext是BeanFactory的子类，因为古老的BeanFactory无法满足不断更新的spring的需求，于是ApplicationContext就基本上代替了BeanFactory的工作，以一种更面向框架的工作方式以及对上下文进行分层和实现继承，并在这个基础上对功能进行扩展：</p>
<ul>
<li>MessageSource, 提供国际化的消息访问</li>
<li>资源访问（如URL和文件）</li>
<li>事件传递</li>
<li>Bean的自动装配</li>
<li>各种不同应用层的Context实现</li>
</ul>
<p>区别：</p>
<ol>
<li>如果使用ApplicationContext，如果配置的bean是singleton，那么不管你有没有或想不想用它，它都会被实例化。好处是可以预先加载，坏处是浪费内存。</li>
<li>BeanFactory，当使用BeanFactory实例化对象时，配置的bean不会马上被实例化，而是等到你使用该bean的时候（getBean）才会被实例化。好处是节约内存，坏处是速度比较慢。多用于移动设备的开发。</li>
<li>没有特殊要求的情况下，应该使用ApplicationContext完成。因为BeanFactory能完成的事情，ApplicationContext都能完成，并且提供了更多接近现在开发的功能。</li>
</ol>
<h6 id="Spring中Bean的作用域"><a href="#Spring中Bean的作用域" class="headerlink" title="Spring中Bean的作用域"></a>Spring中Bean的作用域</h6><p>在Spring的早期版本中，仅有两个作用域：<strong>singleton</strong>和<strong>prototype</strong>，前者表示Bean以单例的方式存在；后者表示每次从容器中调用Bean时，都会返回一个新的实例，prototype通常翻译为原型。</p>
<p>设计模式中的创建型模式中也有一个原型模式，原型模式也是一个常用的模式，例如做一个室内设计软件，所有的素材都在工具箱中，而每次从工具箱中取出的都是素材对象的一个原型，可以通过对象克隆来实现原型模式。Spring 2.x中针对WebApplicationContext新增了3个作用域，分别是：<strong>request</strong>（每次HTTP请求都会创建一个新的Bean）、<strong>session</strong>（同一个HttpSession共享同一个Bean，不同的HttpSession使用不同的Bean）和<strong>globalSession</strong>（同一个全局Session共享一个Bean）。</p>
<p>单例模式和原型模式都是重要的设计模式。一般情况下，无状态或状态不可变的类适合使用单例模式。在传统开发中，由于DAO持有Connection这个非线程安全对象因而没有使用单例模式；但在Spring环境下，所有DAO类对可以采用单例模式，因为Spring利用AOP和Java API中的ThreadLocal对非线程安全的对象进行了特殊处理。</p>
<h6 id="依赖注入的方式"><a href="#依赖注入的方式" class="headerlink" title="依赖注入的方式"></a>依赖注入的方式</h6><p>1、Setter注入 2、构造器(Construct)注入 3、接口注入</p>
<h6 id="Autowired和Resource的区别"><a href="#Autowired和Resource的区别" class="headerlink" title="Autowired和Resource的区别"></a>Autowired和Resource的区别</h6><p>1.共同点</p>
<p>两者都可以写在字段和setter方法上。两者如果都写在字段上，那么就不需要再写setter方法。</p>
<p>2、不同点</p>
<p>（1）@Autowired</p>
<p>@Autowired为Spring提供的注解，只按照byType注入。默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。如果我们想使用按照名称（byName）来装配，可以结合@Qualifier注解一起使用。</p>
<p>（2）@Resource</p>
<p>@Resource默认按照ByName自动注入，由J2EE提供。@Resource有两个重要的属性：name和type，而Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。</p>
<h6 id="Spring的事务管理类型"><a href="#Spring的事务管理类型" class="headerlink" title="Spring的事务管理类型"></a>Spring的事务管理类型</h6><p>Spring支持编程式事务管理和声明式事务管理。许多Spring框架的用户选择声明式事务管理，因为这种方式和应用程序的关联较少，因此更加符合轻量级容器的概念。声明式事务管理要优于编程式事务管理，尽管在灵活性方面它弱于编程式事务管理，因为编程式事务允许你通过代码控制业务。</p>
<p>事务分为全局事务和局部事务。全局事务由应用服务器管理，需要底层服务器JTA支持（如WebLogic、WildFly等）。局部事务和底层采用的持久化方案有关，例如使用JDBC进行持久化时，需要使用Connection对象来操作事务；而采用Hibernate进行持久化时，需要使用Session对象来操作事务。</p>
<p>这些事务的父接口都是PlatformTransactionManager。Spring的事务管理机制是一种典型的策略模式，PlatformTransactionManager代表事务管理接口，该接口定义了三个方法，该接口并不知道底层如何管理事务，但是它的实现类必须提供getTransaction()方法（开启事务）、commit()方法（提交事务）、rollback()方法（回滚事务）的多态实现，这样就可以用不同的实现类代表不同的事务管理策略。使用JTA全局事务策略时，需要底层应用服务器支持，而不同的应用服务器所提供的JTA全局事务可能存在细节上的差异，因此实际配置全局事务管理器是可能需要使用JtaTransactionManager的子类，如：WebLogicJtaTransactionManager（Oracle的WebLogic服务器提供）、UowJtaTransactionManager（IBM的WebSphere服务器提供）等。</p>
<h6 id="Spring框架的优点"><a href="#Spring框架的优点" class="headerlink" title="Spring框架的优点"></a>Spring框架的优点</h6><p>Spring是一个轻量级的DI和AOP容器框架，在项目的中的使用越来越广泛，它的优点主要有以下几点：</p>
<ul>
<li><p>Spring是一个非侵入式框架，其目标是使应用程序代码对框架的依赖最小化，应用代码可以在没有Spring或者其他容器的情况运行。</p>
</li>
<li><p>Spring提供了一个一致的编程模型，使应用直接使用POJO开发，从而可以使运行环境隔离开来。</p>
</li>
<li><p>Spring推动应用的设计风格向面向对象及面向接口编程转变，提高了代码的重用性和可测试性。</p>
</li>
<li><p>Spring改进了结构体系的选择，虽然作为应用平台，Spring可以帮助我们选择不同的技术实现，比如从Hibernate切换到其他的ORM工具，从Struts切换到Spring MVC,尽管我们通常不会这么做，但是我们在技术方案上选择使用Spring作为应用平台，Spring至少为我们提供了这种可能性的选择，从而降低了平台锁定风险。</p>
</li>
</ul>
<h6 id="持久层设计要考虑的问题"><a href="#持久层设计要考虑的问题" class="headerlink" title="持久层设计要考虑的问题"></a>持久层设计要考虑的问题</h6><p>所谓”持久”就是将数据保存到可掉电式存储设备中以便今后使用，简单的说，就是将内存中的数据保存到关系型数据库、文件系统、消息队列等提供持久化支持的设备中。持久层就是系统中专注于实现数据持久化的相对独立的层面。</p>
<p>持久层设计的目标包括：</p>
<ul>
<li>数据存储逻辑的分离，提供抽象化的数据访问接口</li>
<li>数据访问底层实现的分离，可以在不修改代码的情况下切换底层实现</li>
<li>资源管理和调度的分离，在数据访问层实现统一的资源调度（如缓存机制）</li>
<li>数据抽象，提供更面向对象的数据操作</li>
</ul>
<h6 id="SpringMVC的工作原理"><a href="#SpringMVC的工作原理" class="headerlink" title="SpringMVC的工作原理"></a>SpringMVC的工作原理</h6><p>①客户端的所有请求都交给前端控制器DispatcherServlet来处理，它会负责调用系统的其他模块来真正处理用户的请求。</p>
<p>② DispatcherServlet收到请求后，将根据请求的信息（包括URL、HTTP协议方法、请求头、请求参数、Cookie等）以及HandlerMapping的配置找到处理该请求的Handler（任何一个对象都可以作为请求的Handler）。</p>
<p>③在这个地方Spring会通过HandlerAdapter对该处理器进行封装。</p>
<p>④ HandlerAdapter是一个适配器，它用统一的接口对各种Handler中的方法进行调用。</p>
<p>⑤ Handler完成对用户请求的处理后，会返回一个ModelAndView对象给DispatcherServlet，ModelAndView顾名思义，包含了数据模型以及相应的视图的信息。</p>
<p>⑥ ModelAndView的视图是逻辑视图，DispatcherServlet还要借助ViewResolver完成从逻辑视图到真实视图对象的解析工作。</p>
<p>⑦ 当得到真正的视图对象后，DispatcherServlet会利用视图对象对模型数据进行渲染。</p>
<p>⑧ 客户端得到响应，可能是一个普通的HTML页面，也可以是XML或JSON字符串，还可以是一张图片或者一个PDF文件。</p>
<h6 id="Request对象的主要方法"><a href="#Request对象的主要方法" class="headerlink" title="Request对象的主要方法"></a>Request对象的主要方法</h6><p>setAttribute(String name,Object)：设置名字为name的request的参数值</p>
<p>getAttribute(String name)：返回由name指定的属性值</p>
<p>getAttributeNames()：返回request对象所有属性的名字集合，结果是一个枚举的实例</p>
<p>getCookies()：返回客户端的所有Cookie对象，结果是一个Cookie数组</p>
<p>getCharacterEncoding()：返回请求中的字符编码方式</p>
<p>getContentLength()：返回请求的Body的长度</p>
<p>getHeader(String name)：获得HTTP协议定义的文件头信息</p>
<p>getHeaders(String name)：返回指定名字的request Header的所有值，结果是一个枚举的实例</p>
<p>getHeaderNames()：返回所以request Header的名字，结果是一个枚举的实例</p>
<p>getInputStream()：返回请求的输入流，用于获得请求中的数据</p>
<p>getMethod()：获得客户端向服务器端传送数据的方法</p>
<p>getParameter(String name)：获得客户端传送给服务器端的有name指定的参数值</p>
<p>getParameterNames()：获得客户端传送给服务器端的所有参数的名字，结果是一个枚举的实例</p>
<p>getParameterValues(String name)：获得有name指定的参数的所有值</p>
<p>getProtocol()：获取客户端向服务器端传送数据所依据的协议名称</p>
<p>getQueryString()：获得查询字符串</p>
<p>getRequestURI()：获取发出请求字符串的客户端地址</p>
<p>getRemoteAddr()：获取客户端的IP地址</p>
<p>getRemoteHost()：获取客户端的名字</p>
<p>getSession([Boolean create])：返回和请求相关Session</p>
<p>getServerName()：获取服务器的名字</p>
<p>getServletPath()：获取客户端所请求的脚本文件的路径</p>
<p>getServerPort()：获取服务器的端口号</p>
<p>removeAttribute(String name)：删除请求中的一个属性</p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>String.format函数</title>
    <url>/2022/08/11/String-format%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>String.format(String format, Object… args)字符串格式化。预先设置字符串格式，然后对相应的参数格式化。<span id="more"></span></p>
<h4 id="常用格式化用到的数据类型"><a href="#常用格式化用到的数据类型" class="headerlink" title="常用格式化用到的数据类型"></a>常用格式化用到的数据类型</h4><table>
<thead>
<tr>
<th align="left">转换符</th>
<th align="left">详细说明</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">%s</td>
<td align="left">字符串类型</td>
<td align="left">“字符串”</td>
</tr>
<tr>
<td align="left">%c</td>
<td align="left">字符类型</td>
<td align="left">‘m’</td>
</tr>
<tr>
<td align="left">%b</td>
<td align="left">布尔类型</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left">%d</td>
<td align="left">整数类型（十进制）</td>
<td align="left">88</td>
</tr>
<tr>
<td align="left">%x</td>
<td align="left">整数类型（十六进制）</td>
<td align="left">FF</td>
</tr>
<tr>
<td align="left">%o</td>
<td align="left">整数类型（八进制）</td>
<td align="left">77</td>
</tr>
<tr>
<td align="left">%f</td>
<td align="left">浮点类型</td>
<td align="left">8.888</td>
</tr>
<tr>
<td align="left">%a</td>
<td align="left">十六进制浮点类型</td>
<td align="left">FF.35AE</td>
</tr>
<tr>
<td align="left">%e</td>
<td align="left">指数类型</td>
<td align="left">9.38e+5</td>
</tr>
<tr>
<td align="left">%g</td>
<td align="left">通用浮点类型（f和e类型中较短的）</td>
<td align="left">不举例(基本用不到)</td>
</tr>
<tr>
<td align="left">%h</td>
<td align="left">散列码</td>
<td align="left">不举例(基本用不到)</td>
</tr>
<tr>
<td align="left">%%</td>
<td align="left">百分比类型</td>
<td align="left">％(%特殊字符%%才能显示%)</td>
</tr>
<tr>
<td align="left">%n</td>
<td align="left">换行符</td>
<td align="left">不举例(基本用不到)</td>
</tr>
<tr>
<td align="left">%tx</td>
<td align="left">日期与时间类型（x代表不同的日期与时间转换符)</td>
<td align="left">不举例(基本用不到)</td>
</tr>
</tbody></table>
<h4 id="输出示例"><a href="#输出示例" class="headerlink" title="输出示例"></a>输出示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str=<span class="literal">null</span>;  </span><br><span class="line">str=String.format(<span class="string">&quot;Hi,%s&quot;</span>, <span class="string">&quot;小超&quot;</span>);  </span><br><span class="line">System.out.println(str);  </span><br><span class="line">str=String.format(<span class="string">&quot;Hi,%s %s %s&quot;</span>, <span class="string">&quot;小超&quot;</span>,<span class="string">&quot;是个&quot;</span>,<span class="string">&quot;大帅哥&quot;</span>);            </span><br><span class="line">System.out.println(str);                           </span><br><span class="line">System.out.printf(<span class="string">&quot;字母c的大写是：%c %n&quot;</span>, <span class="string">&#x27;C&#x27;</span>);  </span><br><span class="line">System.out.printf(<span class="string">&quot;布尔结果是：%b %n&quot;</span>, <span class="string">&quot;小超&quot;</span>.equal(<span class="string">&quot;帅哥&quot;</span>));  </span><br><span class="line">System.out.printf(<span class="string">&quot;100的一半是：%d %n&quot;</span>, <span class="number">100</span>/<span class="number">2</span>);  </span><br><span class="line">System.out.printf(<span class="string">&quot;100的16进制数是：%x %n&quot;</span>, <span class="number">100</span>);  </span><br><span class="line">System.out.printf(<span class="string">&quot;100的8进制数是：%o %n&quot;</span>, <span class="number">100</span>);  </span><br><span class="line">System.out.printf(<span class="string">&quot;50元的书打8.5折扣是：%f 元%n&quot;</span>, <span class="number">50</span>*<span class="number">0.85</span>);  </span><br><span class="line">System.out.printf(<span class="string">&quot;上面价格的16进制数是：%a %n&quot;</span>, <span class="number">50</span>*<span class="number">0.85</span>);  </span><br><span class="line">System.out.printf(<span class="string">&quot;上面价格的指数表示：%e %n&quot;</span>, <span class="number">50</span>*<span class="number">0.85</span>);  </span><br><span class="line">System.out.printf(<span class="string">&quot;上面价格的指数和浮点数结果的长度较短的是：%g %n&quot;</span>, <span class="number">50</span>*<span class="number">0.85</span>);  </span><br><span class="line">System.out.printf(<span class="string">&quot;上面的折扣是%d%% %n&quot;</span>, <span class="number">85</span>);  </span><br><span class="line">System.out.printf(<span class="string">&quot;字母A的散列码是：%h %n&quot;</span>, <span class="string">&#x27;A&#x27;</span>);  </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi,小超 </span><br><span class="line">Hi,小超 是个 大帅哥  </span><br><span class="line">字母c的大写是：C   </span><br><span class="line">布尔的结果是：false   </span><br><span class="line">100的一半是：50   </span><br><span class="line">100的16进制数是：64   </span><br><span class="line">100的8进制数是：144   </span><br><span class="line">50元的书打8.5折扣是：42.500000 元  </span><br><span class="line">上面价格的16进制数是：0x1.54p5   </span><br><span class="line">上面价格的指数表示：4.250000e+01   </span><br><span class="line">上面价格的指数和浮点数结果的长度较短的是：42.5000   </span><br><span class="line">上面的折扣是85%   </span><br><span class="line">字母A的散列码是：41   </span><br></pre></td></tr></table></figure>

<h4 id="搭配转换符还有实现高级功能"><a href="#搭配转换符还有实现高级功能" class="headerlink" title="搭配转换符还有实现高级功能"></a>搭配转换符还有实现高级功能</h4><table>
<thead>
<tr>
<th align="left">标志</th>
<th align="left">说明</th>
<th align="left">示例</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">+</td>
<td align="left">为正数或者负数添加符号</td>
<td align="left">(“%+d”,15)</td>
<td align="left">+15</td>
</tr>
<tr>
<td align="left">0</td>
<td align="left">数字前面补0(加密常用)</td>
<td align="left">(“%04d”, 99)</td>
<td align="left">0099</td>
</tr>
<tr>
<td align="left">空格</td>
<td align="left">在整数之前添加指定数量的空格</td>
<td align="left">(“% 4d”, 99)</td>
<td align="left">99</td>
</tr>
<tr>
<td align="left">,</td>
<td align="left">以“,”对数字分组(常用显示金额)</td>
<td align="left">(“%,f”, 9999.99)</td>
<td align="left">9,999.990000</td>
</tr>
<tr>
<td align="left">(</td>
<td align="left">使用括号包含负数</td>
<td align="left">(“%(f”, -99.99)</td>
<td align="left">(99.990000)</td>
</tr>
<tr>
<td align="left">#</td>
<td align="left">如果是浮点数则包含小数点，如果是16进制或8进制则添加0x或0</td>
<td align="left">(“%#x”, 99)(“%#o”, 99)</td>
<td align="left">0x63 0143</td>
</tr>
<tr>
<td align="left">&lt;</td>
<td align="left">格式化前一个转换符所描述的参数</td>
<td align="left">(“%f和%&lt;3.2f”, 99.45)</td>
<td align="left">99.450000和99.45</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left">$符号前加数字，可以取第几个参数</td>
<td align="left">(“%d,%1$s”,99,”abc”)和(“%d,%2$s”,99,”abc”)</td>
<td align="left">99,99和99,abc</td>
</tr>
</tbody></table>
<h4 id="日期转换符"><a href="#日期转换符" class="headerlink" title="日期转换符"></a>日期转换符</h4><table>
<thead>
<tr>
<th align="left">标志</th>
<th align="left">说明</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">c</td>
<td align="left">包括全部日期和时间信息</td>
<td align="left">星期六 十月 27 14:21:20 CST 2007</td>
</tr>
<tr>
<td align="left">F</td>
<td align="left">“年-月-日”格式</td>
<td align="left">2007-10-27</td>
</tr>
<tr>
<td align="left">D</td>
<td align="left">“月&#x2F;日&#x2F;年”格式</td>
<td align="left">10&#x2F;27&#x2F;07</td>
</tr>
<tr>
<td align="left">r</td>
<td align="left">“HH:MM:SS PM”格式（12时制）</td>
<td align="left">02:25:51 下午</td>
</tr>
<tr>
<td align="left">T</td>
<td align="left">“HH:MM:SS”格式（24时制）</td>
<td align="left">14:28:16</td>
</tr>
<tr>
<td align="left">R</td>
<td align="left">“HH:MM”格式（24时制）</td>
<td align="left">14:28</td>
</tr>
</tbody></table>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date date=<span class="keyword">new</span> <span class="title class_">Date</span>();                                  </span><br><span class="line"><span class="comment">//c的使用  </span></span><br><span class="line">System.out.printf(<span class="string">&quot;全部日期和时间信息：%tc%n&quot;</span>,date);          </span><br><span class="line"><span class="comment">//f的使用  </span></span><br><span class="line">System.out.printf(<span class="string">&quot;年-月-日格式：%tF%n&quot;</span>,date);  </span><br><span class="line"><span class="comment">//d的使用  </span></span><br><span class="line">System.out.printf(<span class="string">&quot;月/日/年格式：%tD%n&quot;</span>,date);  </span><br><span class="line"><span class="comment">//r的使用  </span></span><br><span class="line">System.out.printf(<span class="string">&quot;HH:MM:SS PM格式（12时制）：%tr%n&quot;</span>,date);  </span><br><span class="line"><span class="comment">//t的使用  </span></span><br><span class="line">System.out.printf(<span class="string">&quot;HH:MM:SS格式（24时制）：%tT%n&quot;</span>,date);  </span><br><span class="line"><span class="comment">//R的使用  </span></span><br><span class="line">System.out.printf(<span class="string">&quot;HH:MM格式（24时制）：%tR&quot;</span>,date);  </span><br></pre></td></tr></table></figure>

<h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">全部日期和时间信息：星期三 九月 21 22:43:36 CST 2016  </span><br><span class="line">年-月-日格式：2016-09-21</span><br><span class="line">月/日/年格式：16/10/21  </span><br><span class="line">HH:MM:SS PM格式（12时制）：10:43:36 下午  </span><br><span class="line">HH:MM:SS格式（24时制）：22:43:36  </span><br><span class="line">HH:MM格式（24时制）：22:43  </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>StringJoiner字符串拼接</title>
    <url>/2022/05/03/StringJoiner%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5/</url>
    <content><![CDATA[<p>StringJoiner属于Java8中的处理字符串拼接的工具类，极大节省的代码量。<span id="more"></span></p>
<h4 id="待分割的字符串转List"><a href="#待分割的字符串转List" class="headerlink" title="待分割的字符串转List"></a>待分割的字符串转List</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="string">&quot;lint lint lnit ln&quot;</span>;</span><br><span class="line">List&lt;String&gt; stringList = Arrays.asList(value.split(<span class="string">&quot; &quot;</span>));</span><br></pre></td></tr></table></figure>

<h4 id="新建StringJoiner类"><a href="#新建StringJoiner类" class="headerlink" title="新建StringJoiner类"></a>新建StringJoiner类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringJoiner</span> <span class="variable">joiner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;,&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>StringJoiner类有三个参数(按顺序)：</p>
<ul>
<li>分隔符</li>
<li>前缀</li>
<li>后缀</li>
</ul>
<p>分隔符是拼接字符串之间的分隔符，前缀和后缀是拼接完成之后字符串的前缀和后缀，不需用我们重新去拼接了。</p>
<h4 id="遍历集合拼接字符串"><a href="#遍历集合拼接字符串" class="headerlink" title="遍历集合拼接字符串"></a>遍历集合拼接字符串</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//stringList.forEach(s -&gt; joiner.add(s));</span></span><br><span class="line">stringList.forEach(joiner::add);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Target注解</title>
    <url>/2022/08/17/Target%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<p>Target注解的使用说明<span id="more"></span></p>
<p>Target说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。</p>
<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>用于描述注解的使用范围</p>
<h4 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h4><ol>
<li>CONSTRUCTOR:用于描述构造器</li>
<li>FIELD:用于描述域</li>
<li>LOCAL_VARIABLE:用于描述局部变量</li>
<li>METHOD:用于描述方法</li>
<li>PACKAGE:用于描述包</li>
<li>PARAMETER:用于描述参数</li>
<li>TYPE:用于描述类、接口(包括注解类型) 或enum声明</li>
<li>TYPE_PARAMETER:类型参数声明</li>
<li>TYPE_USE:类型的使用</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>StringUtils判断非空问题</title>
    <url>/2022/05/03/StringUtils%E5%88%A4%E6%96%AD%E9%9D%9E%E7%A9%BA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>StringUtils 方法的操作对象是 java.lang.String 类型的对象，是 JDK 提供的 String 类型操作方法的补充，并且是 null 安全的(即如果输入参数 String 为 null 则不会抛出 NullPointerException ，而是做了相应处理。例如，如果输入为 null 则返回也是 null 等)<span id="more"></span></p>
<h5 id="isEmpty-String-str"><a href="#isEmpty-String-str" class="headerlink" title="isEmpty(String str)"></a>isEmpty(String str)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(String str)</span></span><br></pre></td></tr></table></figure>

<p>判断某字符串是否为空，为空的标准是 <code>str==null</code>或 <code>str.length()==0</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringUtils.isEmpty(<span class="literal">null</span>) = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">StringUtils.isEmpty(<span class="string">&quot;&quot;</span>) = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">StringUtils.isEmpty(<span class="string">&quot; &quot;</span>) = <span class="literal">false</span> <span class="comment">//注意在 StringUtils 中空格作非空处理</span></span><br><span class="line"></span><br><span class="line">StringUtils.isEmpty(<span class="string">&quot;  &quot;</span>) = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">StringUtils.isEmpty(<span class="string">&quot;bob&quot;</span>) = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">StringUtils.isEmpty(<span class="string">&quot; bob &quot;</span>) = <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h5 id="isNotEmpty-String-str"><a href="#isNotEmpty-String-str" class="headerlink" title="isNotEmpty(String str)"></a>isNotEmpty(String str)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isNotEmpty</span><span class="params">(String str)</span></span><br></pre></td></tr></table></figure>

<p>判断某字符串是否非空，等于 <code>!isEmpty(String str)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringUtils.isNotEmpty(<span class="literal">null</span>) = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">StringUtils.isNotEmpty(<span class="string">&quot;&quot;</span>) = <span class="literal">false</span></span><br><span class="line">      </span><br><span class="line">StringUtils.isNotEmpty(<span class="string">&quot; &quot;</span>) = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">StringUtils.isNotEmpty(<span class="string">&quot;         &quot;</span>) = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">StringUtils.isNotEmpty(<span class="string">&quot;bob&quot;</span>) = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">StringUtils.isNotEmpty(<span class="string">&quot; bob &quot;</span>) = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h5 id="isBlank-String-str"><a href="#isBlank-String-str" class="headerlink" title="isBlank(String str)"></a>isBlank(String str)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isBlank</span><span class="params">(String str)</span></span><br></pre></td></tr></table></figure>

<p>判断某字符串是否为空或长度为0或由空白符(whitespace) 构成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringUtils.isBlank(<span class="literal">null</span>) = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">StringUtils.isBlank(<span class="string">&quot;&quot;</span>) = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">StringUtils.isBlank(<span class="string">&quot; &quot;</span>) = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">StringUtils.isBlank(<span class="string">&quot;    &quot;</span>) = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">StringUtils.isBlank(<span class="string">&quot;\t \n \f \r&quot;</span>) = <span class="literal">true</span>  <span class="comment">//对于制表符、换行符、换页符和回车符</span></span><br><span class="line"></span><br><span class="line">StringUtils.isBlank()  <span class="comment">//均识为空白符</span></span><br><span class="line"></span><br><span class="line">StringUtils.isBlank(<span class="string">&quot;\b&quot;</span>) = <span class="literal">false</span>  <span class="comment">//&quot;\b&quot;为单词边界符</span></span><br><span class="line">  </span><br><span class="line">StringUtils.isBlank(<span class="string">&quot;bob&quot;</span>) = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">StringUtils.isBlank(<span class="string">&quot; bob &quot;</span>) = <span class="literal">false</span>   </span><br></pre></td></tr></table></figure>

<h5 id="isNotBlank-String-str"><a href="#isNotBlank-String-str" class="headerlink" title="isNotBlank(String str)"></a>isNotBlank(String str)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isNotBlank</span><span class="params">(String str)</span></span><br></pre></td></tr></table></figure>

<p>判断某字符串是否不为空且长度不为0且不由空白符(whitespace) 构成，等于 <code>!isBlank(String str)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringUtils.isNotBlank(<span class="literal">null</span>) = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">StringUtils.isNotBlank(<span class="string">&quot;&quot;</span>) = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">StringUtils.isNotBlank(<span class="string">&quot; &quot;</span>) = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">StringUtils.isNotBlank(<span class="string">&quot;     &quot;</span>) = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">StringUtils.isNotBlank(<span class="string">&quot;\t \n \f \r&quot;</span>) = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">StringUtils.isNotBlank(<span class="string">&quot;\b&quot;</span>) = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">StringUtils.isNotBlank(<span class="string">&quot;bob&quot;</span>) = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">StringUtils.isNotBlank(<span class="string">&quot; bob &quot;</span>) = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h5 id="trim-String-str"><a href="#trim-String-str" class="headerlink" title="trim(String str)"></a>trim(String str)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">trim</span><span class="params">(String str)</span></span><br></pre></td></tr></table></figure>

<p>去掉字符串两端的控制符(control characters, char &lt;&#x3D; 32) , 如果输入为 null 则返回null</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">StringUtils.trim(null) = null</span><br><span class="line"></span><br><span class="line">StringUtils.trim(&quot;&quot;) = &quot;&quot;</span><br><span class="line"></span><br><span class="line">StringUtils.trim(&quot; &quot;) = &quot;&quot;</span><br><span class="line"></span><br><span class="line">StringUtils.trim(&quot; \b \t \n \f \r  &quot;) = &quot;&quot;</span><br><span class="line"></span><br><span class="line">StringUtils.trim(&quot;   \n\tss  \b&quot;) = &quot;ss&quot;</span><br><span class="line"></span><br><span class="line">StringUtils.trim(&quot; d  d dd   &quot;) = &quot;d  d dd&quot;</span><br><span class="line"></span><br><span class="line">StringUtils.trim(&quot;dd   &quot;) = &quot;dd&quot;</span><br><span class="line"></span><br><span class="line">StringUtils.trim(&quot;   dd    &quot;) = &quot;dd&quot;</span><br></pre></td></tr></table></figure>

<h5 id="trimToNull-String-str"><a href="#trimToNull-String-str" class="headerlink" title="trimToNull(String str)"></a>trimToNull(String str)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">trimToNull</span><span class="params">(String str)</span></span><br></pre></td></tr></table></figure>

<p>去掉字符串两端的控制符(control characters, char &lt;&#x3D; 32) ,如果变为 null 或””，则返回 null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringUtils.trimToNull(<span class="literal">null</span>) = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">StringUtils.trimToNull(<span class="string">&quot;&quot;</span>) = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">StringUtils.trimToNull(<span class="string">&quot; &quot;</span>) = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">StringUtils.trimToNull(<span class="string">&quot;   \b \t \n \f \r  &quot;</span>) = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">StringUtils.trimToNull(<span class="string">&quot;   \n\tss  \b&quot;</span>) = <span class="string">&quot;ss&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.trimToNull(<span class="string">&quot; d  d dd   &quot;</span>) = <span class="string">&quot;d  d dd&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.trimToNull(<span class="string">&quot;dd   &quot;</span>) = <span class="string">&quot;dd&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.trimToNull(<span class="string">&quot;   dd    &quot;</span>) = <span class="string">&quot;dd&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="trimToEmpty-String-str"><a href="#trimToEmpty-String-str" class="headerlink" title="trimToEmpty(String str)"></a>trimToEmpty(String str)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">trimToEmpty</span><span class="params">(String str)</span></span><br></pre></td></tr></table></figure>

<p>去掉字符串两端的控制符(control characters, char &lt;&#x3D; 32) ,如果变为 null 或 “” ，则返回 “”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringUtils.trimToEmpty(<span class="literal">null</span>) = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.trimToEmpty(<span class="string">&quot;&quot;</span>) = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.trimToEmpty(<span class="string">&quot; &quot;</span>) = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.trimToEmpty(<span class="string">&quot;   \b \t \n \f \r  &quot;</span>) = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.trimToEmpty(<span class="string">&quot;   \n\tss  \b&quot;</span>) = <span class="string">&quot;ss&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.trimToEmpty(<span class="string">&quot; d  d dd   &quot;</span>) = <span class="string">&quot;d  d dd&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.trimToEmpty(<span class="string">&quot;dd   &quot;</span>) = <span class="string">&quot;dd&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.trimToEmpty(<span class="string">&quot;   dd    &quot;</span>) = <span class="string">&quot;dd&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="strip-String-str"><a href="#strip-String-str" class="headerlink" title="strip(String str)"></a>strip(String str)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">strip</span><span class="params">(String str)</span></span><br></pre></td></tr></table></figure>

<p>去掉字符串两端的空白符(whitespace) ，如果输入为 null 则返回 null</p>
<p>下面是示例(注意和 trim() 的区别)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringUtils.strip(<span class="literal">null</span>) = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">StringUtils.strip(<span class="string">&quot;&quot;</span>) = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.strip(<span class="string">&quot; &quot;</span>) = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.strip(<span class="string">&quot;   \b \t \n \f \r  &quot;</span>) = <span class="string">&quot;\b&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.strip(<span class="string">&quot;   \n\tss  \b&quot;</span>) = <span class="string">&quot;ss  \b&quot;</span></span><br><span class="line"> </span><br><span class="line">StringUtils.strip(<span class="string">&quot; d  d dd   &quot;</span>) = <span class="string">&quot;d  d dd&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.strip(<span class="string">&quot;dd   &quot;</span>) = <span class="string">&quot;dd&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.strip(<span class="string">&quot;   dd    &quot;</span>) = <span class="string">&quot;dd&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="stripToNull-String-str"><a href="#stripToNull-String-str" class="headerlink" title="stripToNull(String str)"></a>stripToNull(String str)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">stripToNull</span><span class="params">(String str)</span></span><br></pre></td></tr></table></figure>

<p>去掉字符串两端的空白符(whitespace) ，如果变为 null 或””，则返回 null</p>
<p>下面是示例(注意和 trimToNull() 的区别)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringUtils.stripToNull(<span class="literal">null</span>) = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">StringUtils.stripToNull(<span class="string">&quot;&quot;</span>) = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">StringUtils.stripToNull(<span class="string">&quot; &quot;</span>) = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">StringUtils.stripToNull(<span class="string">&quot;   \b \t \n \f \r  &quot;</span>) = <span class="string">&quot;\b&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.stripToNull(<span class="string">&quot;   \n\tss  \b&quot;</span>) = <span class="string">&quot;ss  \b&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.stripToNull(<span class="string">&quot; d  d dd   &quot;</span>) = <span class="string">&quot;d  d dd&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.stripToNull(<span class="string">&quot;dd   &quot;</span>) = <span class="string">&quot;dd&quot;</span></span><br><span class="line"> </span><br><span class="line">StringUtils.stripToNull(<span class="string">&quot;   dd    &quot;</span>) = <span class="string">&quot;dd&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="stripToEmpty-String-str"><a href="#stripToEmpty-String-str" class="headerlink" title="stripToEmpty(String str)"></a>stripToEmpty(String str)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">stripToEmpty</span><span class="params">(String str)</span></span><br></pre></td></tr></table></figure>

<p>去掉字符串两端的空白符(whitespace) ，如果变为 null 或”” ，则返回””</p>
<p>下面是示例(注意和 trimToEmpty() 的区别)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringUtils.stripToNull(<span class="literal">null</span>) = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.stripToNull(<span class="string">&quot;&quot;</span>) = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.stripToNull(<span class="string">&quot; &quot;</span>) = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.stripToNull(<span class="string">&quot;   \b \t \n \f \r  &quot;</span>) = <span class="string">&quot;\b&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.stripToNull(<span class="string">&quot;   \n\tss  \b&quot;</span>) = <span class="string">&quot;ss  \b&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.stripToNull(<span class="string">&quot; d  d dd   &quot;</span>) = <span class="string">&quot;d  d dd&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.stripToNull(<span class="string">&quot;dd   &quot;</span>) = <span class="string">&quot;dd&quot;</span></span><br><span class="line"></span><br><span class="line">StringUtils.stripToNull(<span class="string">&quot;   dd    &quot;</span>) = <span class="string">&quot;dd&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="以下方法只介绍其功能，不再举例："><a href="#以下方法只介绍其功能，不再举例：" class="headerlink" title="以下方法只介绍其功能，不再举例："></a>以下方法只介绍其功能，不再举例：</h5><h6 id="strip-String-str-String-stripChars"><a href="#strip-String-str-String-stripChars" class="headerlink" title="strip(String str, String stripChars)"></a>strip(String str, String stripChars)</h6><p>public static String strip(String str, String stripChars)</p>
<p>去掉 str 两端的在 stripChars 中的字符。</p>
<p>如果 str 为 null 或等于”” ，则返回它本身；</p>
<p>如果 stripChars 为 null 或”” ，则返回 strip(String str) 。</p>
<h6 id="stripStart-String-str-String-stripChars"><a href="#stripStart-String-str-String-stripChars" class="headerlink" title="stripStart(String str, String stripChars)"></a>stripStart(String str, String stripChars)</h6><p>public static String stripStart(String str, String stripChars)</p>
<p>和strip(String str, String stripChars)相似，去掉 str 前端的在 stripChars 中的字符。</p>
<h6 id="stripEnd-String-str-String-stripChars"><a href="#stripEnd-String-str-String-stripChars" class="headerlink" title="stripEnd(String str, String stripChars)"></a>stripEnd(String str, String stripChars)</h6><p>public static String stripEnd(String str, String stripChars)</p>
<p>和strip(String str, String stripChars)相似，去掉 str 末端的在 stripChars 中的字符。</p>
<h6 id="stripAll-String-strs"><a href="#stripAll-String-strs" class="headerlink" title="stripAll(String[] strs)"></a>stripAll(String[] strs)</h6><p>public static String[] stripAll(String[] strs)</p>
<p>对字符串数组中的每个字符串进行 strip(String str) ，然后返回。</p>
<p>如果 strs 为 null 或 strs 长度为0，则返回 strs 本身</p>
<h6 id="stripAll-String-strs-String-stripChars"><a href="#stripAll-String-strs-String-stripChars" class="headerlink" title="stripAll(String[] strs, String stripChars)"></a>stripAll(String[] strs, String stripChars)</h6><p>public static String[] stripAll(String[] strs, String stripChars)</p>
<p>对字符串数组中的每个字符串进行 strip(String str, String stripChars) ，然后返回。</p>
<p>如果 strs 为 null 或 strs 长度为0，则返回 strs 本身</p>
<h6 id="equals-String-str1-String-str2"><a href="#equals-String-str1-String-str2" class="headerlink" title="equals(String str1, String str2)"></a>equals(String str1, String str2)</h6><p>public static boolean equals(String str1, String str2)</p>
<p>比较两个字符串是否相等，如果两个均为空则也认为相等。</p>
<h6 id="equalsIgnoreCase-String-str1-String-str2"><a href="#equalsIgnoreCase-String-str1-String-str2" class="headerlink" title="equalsIgnoreCase(String str1, String str2)"></a>equalsIgnoreCase(String str1, String str2)</h6><p>public static boolean equalsIgnoreCase(String str1, String str2)</p>
<p>比较两个字符串是否相等，不区分大小写，如果两个均为空则也认为相等。</p>
<h6 id="indexOf-String-str-char-searchChar"><a href="#indexOf-String-str-char-searchChar" class="headerlink" title="indexOf(String str, char searchChar)"></a>indexOf(String str, char searchChar)</h6><p>public static int indexOf(String str, char searchChar)</p>
<p>返回字符 searchChar 在字符串 str 中第一次出现的位置。</p>
<p>如果 searchChar 没有在 str 中出现则返回-1，</p>
<p>如果 str 为 null 或 “” ，则也返回-1</p>
<h6 id="indexOf-String-str-char-searchChar-int-startPos"><a href="#indexOf-String-str-char-searchChar-int-startPos" class="headerlink" title="indexOf(String str, char searchChar, int startPos)"></a>indexOf(String str, char searchChar, int startPos)</h6><p>public static int indexOf(String str, char searchChar, int startPos)</p>
<p>返回字符 searchChar 从 startPos 开始在字符串 str 中第一次出现的位置。</p>
<p>如果从 startPos 开始 searchChar 没有在 str 中出现则返回-1，</p>
<p>如果 str 为 null 或 “” ，则也返回-1</p>
<h6 id="indexOf-String-str-String-searchStr"><a href="#indexOf-String-str-String-searchStr" class="headerlink" title="indexOf(String str, String searchStr)"></a>indexOf(String str, String searchStr)</h6><p>public static int indexOf(String str, String searchStr)</p>
<p>返回字符串 searchStr 在字符串 str 中第一次出现的位置。</p>
<p>如果 str 为 null 或 searchStr 为 null 则返回-1，</p>
<p>如果 searchStr 为 “” ,且 str 为不为 null ，则返回0，</p>
<p>如果 searchStr 不在 str 中，则返回-1</p>
<h6 id="ordinalIndexOf-String-str-String-searchStr-int-ordinal"><a href="#ordinalIndexOf-String-str-String-searchStr-int-ordinal" class="headerlink" title="ordinalIndexOf(String str, String searchStr, int ordinal)"></a>ordinalIndexOf(String str, String searchStr, int ordinal)</h6><p>public static int ordinalIndexOf(String str, String searchStr, int ordinal)</p>
<p>返回字符串 searchStr 在字符串 str 中第 ordinal 次出现的位置。</p>
<p>如果 str&#x3D;null 或 searchStr&#x3D;null 或 ordinal&lt;&#x3D;0 则返回-1</p>
<p>举例(*代表任意字符串)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringUtils.ordinalIndexOf(<span class="literal">null</span>, *, *) = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">StringUtils.ordinalIndexOf(*, <span class="literal">null</span>, *) = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">StringUtils.ordinalIndexOf(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, *) = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">StringUtils.ordinalIndexOf(<span class="string">&quot;aabaabaa&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="number">1</span>) = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">StringUtils.ordinalIndexOf(<span class="string">&quot;aabaabaa&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="number">2</span>) = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">StringUtils.ordinalIndexOf(<span class="string">&quot;aabaabaa&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="number">1</span>) = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">StringUtils.ordinalIndexOf(<span class="string">&quot;aabaabaa&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="number">2</span>) = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">StringUtils.ordinalIndexOf(<span class="string">&quot;aabaabaa&quot;</span>, <span class="string">&quot;ab&quot;</span>, <span class="number">1</span>) = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">StringUtils.ordinalIndexOf(<span class="string">&quot;aabaabaa&quot;</span>, <span class="string">&quot;ab&quot;</span>, <span class="number">2</span>) = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">StringUtils.ordinalIndexOf(<span class="string">&quot;aabaabaa&quot;</span>, <span class="string">&quot;bc&quot;</span>, <span class="number">1</span>) = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">StringUtils.ordinalIndexOf(<span class="string">&quot;aabaabaa&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">1</span>) = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">StringUtils.ordinalIndexOf(<span class="string">&quot;aabaabaa&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">2</span>) = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h6 id="indexOf-String-str-String-searchStr-int-startPos"><a href="#indexOf-String-str-String-searchStr-int-startPos" class="headerlink" title="indexOf(String str, String searchStr, int startPos)"></a>indexOf(String str, String searchStr, int startPos)</h6><p>public static int indexOf(String str, String searchStr, int startPos)</p>
<p>返回字符串 searchStr 从 startPos 开始在字符串 str 中第一次出现的位置。</p>
<p>举例(*代表任意字符串)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringUtils.indexOf(<span class="literal">null</span>, *, *) = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">StringUtils.indexOf(*, <span class="literal">null</span>, *) = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">StringUtils.indexOf(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">0</span>) = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">StringUtils.indexOf(<span class="string">&quot;aabaabaa&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="number">0</span>) = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">StringUtils.indexOf(<span class="string">&quot;aabaabaa&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="number">0</span>) = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">StringUtils.indexOf(<span class="string">&quot;aabaabaa&quot;</span>, <span class="string">&quot;ab&quot;</span>, <span class="number">0</span>) = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">StringUtils.indexOf(<span class="string">&quot;aabaabaa&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="number">3</span>) = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">StringUtils.indexOf(<span class="string">&quot;aabaabaa&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="number">9</span>) = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">StringUtils.indexOf(<span class="string">&quot;aabaabaa&quot;</span>, <span class="string">&quot;b&quot;</span>, -<span class="number">1</span>) = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">StringUtils.indexOf(<span class="string">&quot;aabaabaa&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">2</span>) = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">StringUtils.indexOf(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">9</span>) = <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h6 id="lastIndexOf-String-str-char-searchChar"><a href="#lastIndexOf-String-str-char-searchChar" class="headerlink" title="lastIndexOf(String str, char searchChar)"></a>lastIndexOf(String str, char searchChar)</h6><p>public static int lastIndexOf(String str, char searchChar)</p>
<p>基本原理同indexOf(String str, char searchChar)</p>
<h6 id="lastIndexOf-String-str-char-searchChar-int-startPos"><a href="#lastIndexOf-String-str-char-searchChar-int-startPos" class="headerlink" title="lastIndexOf(String str, char searchChar, int startPos)"></a>lastIndexOf(String str, char searchChar, int startPos)</h6><p>public static int lastIndexOf(String str, char searchChar, int startPos)</p>
<p>基本原理同indexOf(String str, char searchChar, int startPos)</p>
<h6 id="lastIndexOf-String-str-String-searchStr"><a href="#lastIndexOf-String-str-String-searchStr" class="headerlink" title="lastIndexOf(String str, String searchStr)"></a>lastIndexOf(String str, String searchStr)</h6><p>public static int lastIndexOf(String str, String searchStr)</p>
<p>基本原理同indexOf(String str, String searchStr)</p>
<h6 id="lastIndexOf-String-str-String-searchStr-int-startPos"><a href="#lastIndexOf-String-str-String-searchStr-int-startPos" class="headerlink" title="lastIndexOf(String str, String searchStr, int startPos)"></a>lastIndexOf(String str, String searchStr, int startPos)</h6><p>public static int lastIndexOf(String str, String searchStr, int startPos)</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>ThreadLocal应用</title>
    <url>/2022/05/03/ThreadLocal%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>ThreadLocal是一个线程内部的存储类，可以在指定线程内存储数据，数据存储以后，只有指定线程可以得到存储数据。在应用中，通常用来保存一些需要多次调用的数据，减少用户请求和代码量，而且数据对于其他线程是隔离的。<span id="more"></span></p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>从名字我们就可以看到ThreadLocal叫做线程变量，意思是ThreadLocal中填充的变量属于<strong>当前线程</strong>，该变量对其他线程而言是隔离的。ThreadLocal为变量在每个线程中都创建了一个副本，那么每个线程可以访问自己内部的副本变量。</p>
<p>从实际使用的角度来看，可以有以下用途：</p>
<ul>
<li>在进行对象跨层传递的时候，使用ThreadLocal可以避免多次传递，打破层次间的约束。</li>
<li>线程间数据隔离。</li>
<li>进行事务操作，用于存储线程事务信息。</li>
<li>数据库连接，Session会话管理。</li>
</ul>
<h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><p>以保存用户信息为例，ThreadLocal可以把用户信息保存在线程中，用户发来的每一次请求启动的线程到保存了用户信息，当请求结束，我们会把保存的用户信息清除掉，这样就方便我们在开发中获取用户登录信息。</p>
<h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><ul>
<li>创建一个ThreadLocal类，创建一个ThreadLocal对象，设置ThreadLocal的set，remove，get方法；</li>
<li>定义一个登录的拦截器类，实现HandlerInterceptor ，重写 preHandle() 和afterCompletion()方法 ，preHandle ()方法把登录信息写入ThreadLocal，afterCompletion()方法清除登录信息；</li>
<li>设置一些配置信息，创建一个类实现 WebMvcConfigurer ，重写addInterceptors()方法，创建一个登录拦截器类的对象，给他添加到配置中。</li>
</ul>
<h5 id="ThreadLocal类"><a href="#ThreadLocal类" class="headerlink" title="ThreadLocal类"></a>ThreadLocal类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalUser</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ThreadLocalUser</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;UserInfo&gt; userLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        userLocal.remove();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(UserInfo userInfo)</span> &#123;</span><br><span class="line">        userLocal.set(userInfo);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserInfo <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="登录拦截器"><a href="#登录拦截器" class="headerlink" title="登录拦截器"></a>登录拦截器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> &#123;</span><br><span class="line">        <span class="type">UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> getUserInfo(request);</span><br><span class="line">        ThreadLocalUser.set(userInfo);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception e)</span> &#123;</span><br><span class="line">        ThreadLocalUser.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="WebConfig"><a href="#WebConfig" class="headerlink" title="WebConfig"></a>WebConfig</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">        <span class="comment">// 所有请求都拦截</span></span><br><span class="line">        .addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Transactional注解</title>
    <url>/2022/04/30/Transactional%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<p><code>@Transactional </code>是声明式事务管理编程中使用的注解，声明式事务管理建立在AOP之上的，其本质是对方法前后进行拦截，然后在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。声明式事务最大的优点就是不需要通过编程的方式管理事务，这样就不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中做相关的事务规则声明(<code>@Transactional</code>注解的方式)，便可以将事务规则应用到业务逻辑中。<span id="more"></span></p>
<h4 id="添加位置"><a href="#添加位置" class="headerlink" title="添加位置"></a>添加位置</h4><ul>
<li>接口实现类或接口实现方法上，而不是接口类中。</li>
<li>访问权限：public 的方法才起作用。<code>@Transactional</code> 注解应该只被应用到 public 方法上，这是由 Spring AOP 的本质决定的。<br>  系统设计：将标签放置在需要进行事务管理的方法上，而不是放在所有接口实现类上：只读的接口就不需要事务管理，由于配置了<code>@Transactional</code>就需要AOP拦截及事务的处理，可能影响系统性能。</li>
</ul>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul>
<li><p>接口中A、B两个方法，A无@Transactional标签，B有，上层通过A间接调用B，此时事务不生效。</p>
</li>
<li><p>默认配置下，spring 只有在抛出的异常为运行时 unchecked 异常时才回滚该事务，也就是抛出的异常为RuntimeException 的子类(Errors也会导致事务回滚)，而抛出 checked 异常则不会导致事务回滚 。可通过 @Transactional rollbackFor进行配置。</p>
</li>
<li><p>多线程下事务管理因为线程不属于 spring 托管，故线程不能够默认使用 spring 的事务，也不能获取spring 注入的 bean 。在被 spring 声明式事务管理的方法内开启多线程，多线程内的方法不被事务控制。一个使用了@Transactional 的方法，如果方法内包含多线程的使用，方法内部出现异常，不会回滚线程中调用方法的事务。</p>
</li>
</ul>
<h4 id="自动提交"><a href="#自动提交" class="headerlink" title="自动提交"></a>自动提交</h4><p>​    默认情况下，数据库处于自动提交模式。每一条语句处于一个单独的事务中，在这条语句执行完毕时，如果执行成功则隐式的提交事务，如果执行失败则隐式的回滚事务。</p>
<p>对于正常的事务管理，是一组相关的操作处于一个事务之中，因此必须关闭数据库的自动提交模式。不过，这个我们不用担心，spring会将底层连接的自动提交特性设置为false。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org/springframework/jdbc/datasource/DataSourceTransactionManager.java</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// switch to manual commit if necessary. this is very expensive in some jdbc drivers,</span></span><br><span class="line"><span class="comment">// so we don&#x27;t want to do it unnecessarily (for example if we&#x27;ve explicitly</span></span><br><span class="line"><span class="comment">// configured the connection pool to set it already).</span></span><br><span class="line"><span class="keyword">if</span> (con.getautocommit()) &#123;</span><br><span class="line">    txobject.setmustrestoreautocommit(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (logger.isdebugenabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;switching jdbc connection [&quot;</span> + con + <span class="string">&quot;] to manual commit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    con.setautocommit(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="声明式事务管理实现方式"><a href="#声明式事务管理实现方式" class="headerlink" title="声明式事务管理实现方式"></a>声明式事务管理实现方式</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// 基本配置</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:task</span>=<span class="string">&quot;http://www.springframework.org/schema/task&quot;</span> <span class="attr">xmlns:jms</span>=<span class="string">&quot;http://www.springframework.org/schema/jms&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                          http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                          http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-4.1.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;transactionManager&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;shardingDataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;annotation-driven&gt;</code> 标签的声明，是在 Spring 内部启用 @Transactional 来进行事务管理，使用 @Transactional 前需要配置。</p>
<p>MyBatis 自动参与到 spring 事务管理中，无需额外配置，只要 org.mybatis.spring.SqlSessionFactoryBean 引用的数据源与<br>DataSourceTransactionManager 引用的数据源一致即可，否则事务管理会不起作用。</p>
<h4 id="Transactional注解"><a href="#Transactional注解" class="headerlink" title="@Transactional注解"></a>@Transactional注解</h4><p>@Transactional 实质是使用了 JDBC 的事务来进行事务控制的</p>
<p>@Transactional 基于 Spring 的动态代理的机制</p>
<h5 id="Transactional-实现原理"><a href="#Transactional-实现原理" class="headerlink" title="@Transactional 实现原理"></a>@Transactional 实现原理</h5><ol>
<li><p>事务开始时，通过AOP机制，生成一个代理connection对象，并将其放入 DataSource 实例的某个与DataSourceTransactionManager 相关的某处容器中。在接下来的整个事务中，客户代码都应该使用该 connection 连接数据库，执行所有数据库命令。[不使用该 connection 连接数据库执行的数据库命令，在本事务回滚的时候得不到回滚]<br>  （物理连接 connection 逻辑上新建一个会话session；DataSource 与 TransactionManager 配置相同的数据源）</p>
</li>
<li><p>事务结束时，回滚在第1步骤中得到的代理 connection 对象上执行的数据库命令，然后关闭该代理 connection 对象。（事务结束后，回滚操作不会对已执行完毕的SQL操作命令起作用）</p>
<h4 id="声明式事务的管理实现本质"><a href="#声明式事务的管理实现本质" class="headerlink" title="声明式事务的管理实现本质"></a>声明式事务的管理实现本质</h4></li>
</ol>
<p>事务的两种开启方式：</p>
<ul>
<li><p>显示开启 start transaction | begin，通过 commit | rollback 结束事务</p>
</li>
<li><p>关闭数据库中自动提交 autocommit set autocommit &#x3D; 0；MySQL 默认开启自动提交；通过手动提交或执行回滚操作来结束事务</p>
</li>
</ul>
<p>Spring 关闭数据库中自动提交：在方法执行前关闭自动提交，方法执行完毕后再开启自动提交</p>
<h4 id="Transactional属性"><a href="#Transactional属性" class="headerlink" title="@Transactional属性"></a>@Transactional属性</h4><table>
<thead>
<tr>
<th align="left">属性</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">value</td>
<td>String</td>
<td>可选的限定描述符，指定使用的事务管理器</td>
</tr>
<tr>
<td align="left">propagation</td>
<td>enum: Propagation</td>
<td>可选的事务传播行为设置</td>
</tr>
<tr>
<td align="left">isolation</td>
<td>enum: Isolation</td>
<td>可选的事务隔离级别设置</td>
</tr>
<tr>
<td align="left">readOnly</td>
<td>boolean</td>
<td>读写或只读事务，默认读写</td>
</tr>
<tr>
<td align="left">timeout</td>
<td>int (in seconds granularity)</td>
<td>事务超时时间设置</td>
</tr>
<tr>
<td align="left">rollbackFor</td>
<td>Class对象数组，必须继承自Throwable</td>
<td>导致事务回滚的异常类数组</td>
</tr>
<tr>
<td align="left">rollbackForClassName</td>
<td>类名数组，必须继承自Throwable</td>
<td>导致事务回滚的异常类名字数组</td>
</tr>
<tr>
<td align="left">noRollbackFor</td>
<td>Class对象数组，必须继承自Throwable</td>
<td>不会导致事务回滚的异常类数组</td>
</tr>
<tr>
<td align="left">noRollbackForClassName</td>
<td>类名数组，必须继承自Throwable</td>
<td>不会导致事务回滚的异常类名字数组</td>
</tr>
</tbody></table>
<h4 id="Spring事务特性"><a href="#Spring事务特性" class="headerlink" title="Spring事务特性"></a>Spring事务特性</h4><p>spring所有的事务管理策略类都继承自org.springframework.transaction.PlatformTransactionManager接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PlatformTransactionManager</span> &#123;</span><br><span class="line">  TransactionStatus <span class="title function_">getTransaction</span><span class="params">(TransactionDefinition definition)</span></span><br><span class="line">    <span class="keyword">throws</span> TransactionException;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h5><p>隔离级别是指若干个并发的事务之间的隔离程度。TransactionDefinition 接口中定义了五个表示隔离级别的常量：</p>
<ul>
<li>TransactionDefinition.ISOLATION_DEFAULT：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是TransactionDefinition.ISOLATION_READ_COMMITTED。</li>
<li>TransactionDefinition.ISOLATION_READ_UNCOMMITTED：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读，不可重复读和幻读，因此很少使用该隔离级别。比如PostgreSQL实际上并没有此级别。</li>
<li>TransactionDefinition.ISOLATION_READ_COMMITTED：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。</li>
<li>TransactionDefinition.ISOLATION_REPEATABLE_READ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。该级别可以防止脏读和不可重复读。</li>
<li>TransactionDefinition.ISOLATION_SERIALIZABLE：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</li>
</ul>
<h5 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h5><p>所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：</p>
<ul>
<li>TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。这是默认值。</li>
<li>TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li>
<li>TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li>
<li>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li>
<li>TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</li>
<li>TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li>
<li>TransactionDefinition.PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</li>
</ul>
<h5 id="事务超时"><a href="#事务超时" class="headerlink" title="事务超时"></a>事务超时</h5><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。</p>
<p>默认设置为底层事务系统的超时值，如果底层数据库事务系统没有设置超时值，那么就是none，没有超时限制。</p>
<h5 id="事务只读属性"><a href="#事务只读属性" class="headerlink" title="事务只读属性"></a>事务只读属性</h5><p>只读事务用于客户代码只读但不修改数据的情形，只读事务用于特定情景下的优化，比如使用Hibernate的时候。<br>默认为读写事务。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>XPATH语法</title>
    <url>/2022/01/09/XPATH%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>XPath使用语法<span id="more"></span></p>
<h6 id="选取节点"><a href="#选取节点" class="headerlink" title="选取节点"></a>选取节点</h6><table>
<thead>
<tr>
<th>表达式</th>
<th>描述</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>nodename</td>
<td>选取此节点的所有子节点</td>
<td>html</td>
<td>选取html下所有的子节点</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>如果是在最前面，代表从根节点选取。否则选择某节点下的某个节点</td>
<td>&#x2F;html</td>
<td>选取整个html节点</td>
</tr>
<tr>
<td>&#x2F;&#x2F;</td>
<td>从全局节点中选择节点，随便在哪个位置</td>
<td>&#x2F;&#x2F;div</td>
<td>选取所有的div节点</td>
</tr>
<tr>
<td>@</td>
<td>选取某个节点中的属性</td>
<td>&#x2F;&#x2F;div[@class]</td>
<td>选取所有div节点下的class属性</td>
</tr>
</tbody></table>
<h6 id="谓语"><a href="#谓语" class="headerlink" title="谓语"></a>谓语</h6><p>谓语用来查找某个特定的节点或者包含某个制定的值的节点，被嵌在方括号里。</p>
<p>在下面的表格中，我们列出了带有谓语的一些路径表达式，以及表达式的结果：</p>
<table>
<thead>
<tr>
<th>路径表达式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;&#x2F;body&#x2F;div[1]</td>
<td>获取body节点下的第一个div(下标从1开始)</td>
</tr>
<tr>
<td>&#x2F;&#x2F;body&#x2F;div[last()]</td>
<td>获取body节点下最后一个div元素</td>
</tr>
<tr>
<td>&#x2F;&#x2F;body&#x2F;div[position()&lt;3]</td>
<td>获取body节点下前两个div元素</td>
</tr>
<tr>
<td>&#x2F;&#x2F;div[@class]</td>
<td>获取div节点下拥有class属性的元素</td>
</tr>
<tr>
<td>&#x2F;&#x2F;div[@price&#x3D;10]</td>
<td>获取div节点下属性为price&#x3D;10的元素</td>
</tr>
<tr>
<td>&#x2F;&#x2F;div[contains(@class,”fl”)]</td>
<td>模糊匹配，选取div节点下包含fl的class元素</td>
</tr>
</tbody></table>
<h6 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h6><table>
<thead>
<tr>
<th>通配符</th>
<th>描述</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>匹配任意节点</td>
<td>&#x2F;&#x2F;body&#x2F;*</td>
<td>body下的额所有节点</td>
</tr>
<tr>
<td>@*</td>
<td>匹配节点中的任何属性</td>
<td>&#x2F;&#x2F;div[@*]</td>
<td>div下的所有属性节点</td>
</tr>
</tbody></table>
<h6 id="选取多个路径"><a href="#选取多个路径" class="headerlink" title="选取多个路径"></a>选取多个路径</h6><p>通过在路径表达式中使用”|”运算符，可以选取若干个路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//dd[@<span class="keyword">class</span>=<span class="string">&quot;job_bt&quot;</span>] | //dd[@<span class="keyword">class</span>=<span class="string">&quot;job-advant-age&quot;</span>]</span><br></pre></td></tr></table></figure>

<h6 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h6><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>|</td>
<td>计算两个节点集</td>
<td>&#x2F;&#x2F;book | &#x2F;&#x2F;cd</td>
<td>返回所有拥有 book 和 cd 元素的节点集</td>
</tr>
<tr>
<td>+</td>
<td>加法</td>
<td>6 + 4</td>
<td>10</td>
</tr>
<tr>
<td>-</td>
<td>减法</td>
<td>6 - 4</td>
<td>2</td>
</tr>
<tr>
<td>*</td>
<td>乘法</td>
<td>6 * 4</td>
<td>24</td>
</tr>
<tr>
<td>div</td>
<td>除法</td>
<td>8 div 4</td>
<td>2</td>
</tr>
<tr>
<td>&#x3D;</td>
<td>等于</td>
<td>price&#x3D;9.80</td>
<td>如果 price 是 9.80，则返回 true，否则 false。</td>
</tr>
<tr>
<td>!&#x3D;</td>
<td>不等于</td>
<td>price!&#x3D;9.80</td>
<td>如果 price 是 9.90，则返回 true，否则 false。</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td>price&lt;9.80</td>
<td>如果 price 是 9.00，则返回 true，否则 false。</td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td>小于或等于</td>
<td>price&lt;&#x3D;9.80</td>
<td>如果 price 是 9.00，则返回 true，否则 false。</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
<td>price&gt;9.80</td>
<td>如果 price 是 9.90，则返回 true，否则 false。</td>
</tr>
<tr>
<td>&gt;&#x3D;</td>
<td>大于或等于</td>
<td>price&gt;&#x3D;9.80</td>
<td>如果 price 是 9.90，则返回 true，否则 false。</td>
</tr>
<tr>
<td>or</td>
<td>或</td>
<td>price&#x3D;9.80 or price&#x3D;9.70</td>
<td>如果 price 是 9.80，则返回 true，否则 false。</td>
</tr>
<tr>
<td>and</td>
<td>与</td>
<td>price&gt;9.00 and price&lt;9.90</td>
<td>如果 price 是 9.80，则返回 true，否则 false。</td>
</tr>
<tr>
<td>mod</td>
<td>计算除法的余数</td>
<td>5 mod 2</td>
<td>1</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>XPATH</tag>
      </tags>
  </entry>
  <entry>
    <title>coalesce函数</title>
    <url>/2022/05/02/coalesce%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>coalesce函数的使用说明<span id="more"></span></p>
<h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><p>返回其参数中第一个非空表达式。</p>
<h6 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h6><p>coalesce ( 表达式1 ,…表达式n )</p>
<h6 id="返回类型"><a href="#返回类型" class="headerlink" title="返回类型"></a>返回类型</h6><p>返回数据类型优先级最高的表达式的数据类型，如果所有参数均为null，则coalesce返回null。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COALESCE</span>(<span class="keyword">NULL</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COALESCE</span>(<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>)</span><br></pre></td></tr></table></figure>

<p>第一行，由于第一个表达式为<code>null</code>，依次寻找不为null的结果，所以返回值应该是1。</p>
<p>第二行，由于所有的表达式都为<code>null</code>，所以返回值为null。</p>
<h5 id="等效的case函数"><a href="#等效的case函数" class="headerlink" title="等效的case函数"></a>等效的case函数</h5><h6 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT COALESCE(expression1,expression2,...expressionN)</span><br><span class="line">CASE</span><br><span class="line">   WHEN (expression1 IS NOT NULL) THEN expression1</span><br><span class="line">   WHEN (expressionN IS NOT NULL) THEN expressionN</span><br><span class="line">   ELSE NULL</span><br><span class="line">END</span><br></pre></td></tr></table></figure>

<p>尽管 IS NULL 等效于 COALESCE，但它们的行为是不同的。包含具有非空参数的 IS NULL 的表达式将视为 NOT NULL，而包含具有非空参数的 COALESCE 的表达式将视为 NULL。</p>
<h6 id="SQL-Server的非空参数问题"><a href="#SQL-Server的非空参数问题" class="headerlink" title="SQL Server的非空参数问题"></a>SQL Server的非空参数问题</h6><p>在 SQL Server 中，若要对包含具有非空参数的 COALESCE 的表达式创建索引，可以使用 PERSISTED 列属性将计算列持久化，例如下面案例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE #CheckSumTest</span><br><span class="line">(</span><br><span class="line">   ID int identity ,</span><br><span class="line">   Num int DEFAULT ( RAND() * 100 ) ,</span><br><span class="line">   RowCheckSum AS COALESCE( CHECKSUM( id , num ) , 0 ) PERSISTED PRIMARY KEY</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h6 id="COALESCE-使用示例"><a href="#COALESCE-使用示例" class="headerlink" title="COALESCE 使用示例"></a>COALESCE 使用示例</h6><p>在以下示例中，wages 表中包括以下三列有关雇员的年薪的信息：hourly wage、salary 和 commission。但是，每个雇员只能接受一种付款方式。若要确定支付给所有雇员的金额总数，请使用 COALESCE 函数，它只接受在 hourly_wage、salary 和 commission 中找到的非空值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET NOCOUNT ON;</span><br><span class="line"></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">USE master;</span><br><span class="line">IF EXISTS (SELECT name FROM sys.tables</span><br><span class="line">      WHERE name = &#x27;wages&#x27;)</span><br><span class="line">   DROP TABLE wages;</span><br><span class="line">   </span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">CREATE TABLE wages</span><br><span class="line">(</span><br><span class="line">   emp_id      tinyint    identity,</span><br><span class="line">   hourly_wage   decimal   NULL,</span><br><span class="line">   salary      decimal    NULL,</span><br><span class="line">   commission   decimal   NULL,</span><br><span class="line">   num_sales   tinyint   NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">INSERT wages VALUES(10.00, NULL, NULL, NULL);</span><br><span class="line">INSERT wages VALUES(20.00, NULL, NULL, NULL);</span><br><span class="line">INSERT wages VALUES(30.00, NULL, NULL, NULL);</span><br><span class="line">INSERT wages VALUES(40.00, NULL, NULL, NULL);</span><br><span class="line"></span><br><span class="line">INSERT wages VALUES(NULL, 10000.00, NULL, NULL);</span><br><span class="line">INSERT wages VALUES(NULL, 20000.00, NULL, NULL);</span><br><span class="line">INSERT wages VALUES(NULL, 30000.00, NULL, NULL);</span><br><span class="line">INSERT wages VALUES(NULL, 40000.00, NULL, NULL);</span><br><span class="line"></span><br><span class="line">INSERT wages VALUES(NULL, NULL, 15000, 3);</span><br><span class="line">INSERT wages VALUES(NULL, NULL, 25000, 2);</span><br><span class="line">INSERT wages VALUES(NULL, NULL, 20000, 6);</span><br><span class="line">INSERT wages VALUES(NULL, NULL, 14000, 4);</span><br><span class="line"></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">SET NOCOUNT OFF;</span><br><span class="line"></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">SELECT CAST(COALESCE(hourly_wage * 40 * 52,</span><br><span class="line">   salary,</span><br><span class="line">   commission * num_sales) AS money) AS &#x27;Total Salary&#x27;</span><br><span class="line">FROM wages;</span><br><span class="line"></span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<p>结果集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Total Salary</span><br><span class="line">------------</span><br><span class="line">20800.0000</span><br><span class="line"></span><br><span class="line">41600.0000</span><br><span class="line"></span><br><span class="line">62400.0000</span><br><span class="line"></span><br><span class="line">83200.0000</span><br><span class="line"></span><br><span class="line">10000.0000</span><br><span class="line"></span><br><span class="line">20000.0000</span><br><span class="line"></span><br><span class="line">30000.0000</span><br><span class="line"></span><br><span class="line">40000.0000</span><br><span class="line"></span><br><span class="line">45000.0000</span><br><span class="line"></span><br><span class="line">50000.0000</span><br><span class="line"></span><br><span class="line">120000.0000</span><br><span class="line"></span><br><span class="line">56000.0000</span><br><span class="line"></span><br><span class="line">(12 row(s) affected)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>curl调用后台接口</title>
    <url>/2022/05/03/curl%E8%B0%83%E7%94%A8%E5%90%8E%E5%8F%B0%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p>curl命令是一个利用URL规则在命令行下工作的文件传输工具。它支持文件的上传和下载，所以是综合传输工具，但按传统，习惯称curl为下载工具。作为一款强力工具，curl支持包括HTTP、HTTPS、FTP等众多协议，还支持POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征。<span id="more"></span></p>
<h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><blockquote>
<p>curl (选项) (参数)</p>
</blockquote>
<h6 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h6><table>
<thead>
<tr>
<th>-a&#x2F;–append</th>
<th>上传文件时，附加到目标文件</th>
</tr>
</thead>
<tbody><tr>
<td>-A&#x2F;–user-agent</td>
<td>设置用户代理发送给服务器</td>
</tr>
<tr>
<td>-anyauth</td>
<td>可以使用“任何”身份验证方法</td>
</tr>
<tr>
<td>-b&#x2F;–cookie &lt;name&#x3D;string&#x2F;<a href="http://man.linuxde.net/file">file</a>&gt;</td>
<td>cookie字符串或文件读取位置</td>
</tr>
<tr>
<td>–basic</td>
<td>使用HTTP基本验证</td>
</tr>
<tr>
<td>-B&#x2F;–use-ascii</td>
<td>使用ASCII &#x2F;文本传输</td>
</tr>
<tr>
<td>-c&#x2F;–cookie-jar</td>
<td>操作结束后把cookie写入到这个文件中</td>
</tr>
<tr>
<td>-C&#x2F;–continue-<a href="http://man.linuxde.net/at">at</a></td>
<td>断点续转</td>
</tr>
<tr>
<td>-d&#x2F;–data</td>
<td>HTTP POST方式传送数据</td>
</tr>
<tr>
<td>–data-ascii</td>
<td>以ascii的方式post数据</td>
</tr>
<tr>
<td>–data-binary</td>
<td>以二进制的方式post数据</td>
</tr>
<tr>
<td>–negotiate</td>
<td>使用HTTP身份验证</td>
</tr>
<tr>
<td>–digest</td>
<td>使用数字身份验证</td>
</tr>
<tr>
<td>–disable-eprt</td>
<td>禁止使用EPRT或LPRT</td>
</tr>
<tr>
<td>–disable-epsv</td>
<td>禁止使用EPSV</td>
</tr>
<tr>
<td>-D&#x2F;–<a href="http://man.linuxde.net/dump">dump</a>-header</td>
<td>把header信息写入到该文件中</td>
</tr>
<tr>
<td>–egd-file</td>
<td>为随机数据(SSL)设置EGD socket路径</td>
</tr>
<tr>
<td>–tcp-nodelay</td>
<td>使用TCP_NODELAY选项</td>
</tr>
<tr>
<td>-e&#x2F;–referer</td>
<td>来源网址</td>
</tr>
<tr>
<td>-E&#x2F;–cert &lt;cert[:<a href="http://man.linuxde.net/passwd">passwd</a>]&gt;</td>
<td>客户端证书文件和密码 (SSL)</td>
</tr>
<tr>
<td>–cert-<a href="http://man.linuxde.net/type">type</a></td>
<td>证书文件类型 (DER&#x2F;PEM&#x2F;ENG) (SSL)</td>
</tr>
<tr>
<td>–key</td>
<td>私钥文件名 (SSL)</td>
</tr>
<tr>
<td>–key-type</td>
<td>私钥文件类型 (DER&#x2F;PEM&#x2F;ENG) (SSL)</td>
</tr>
<tr>
<td>–pass</td>
<td>私钥密码 (SSL)</td>
</tr>
<tr>
<td>–engine</td>
<td>加密引擎使用 (SSL). “–engine list” for list</td>
</tr>
<tr>
<td>–cacert</td>
<td>CA证书 (SSL)</td>
</tr>
<tr>
<td>–capath</td>
<td>CA目录 (made using c_rehash) to verify peer against (SSL)</td>
</tr>
<tr>
<td>–ciphers</td>
<td>SSL密码</td>
</tr>
<tr>
<td>–compressed</td>
<td>要求返回是压缩的形势 (using deflate or <a href="http://man.linuxde.net/gzip">gzip</a>)</td>
</tr>
<tr>
<td>–connect-timeout</td>
<td>设置最大请求时间</td>
</tr>
<tr>
<td>–create-<a href="http://man.linuxde.net/dirs">dirs</a></td>
<td>建立本地目录的目录层次结构</td>
</tr>
<tr>
<td>–crlf</td>
<td>上传是把LF转变成CRLF</td>
</tr>
<tr>
<td>-f&#x2F;–fail</td>
<td>连接失败时不显示http错误</td>
</tr>
<tr>
<td>–ftp-create-dirs</td>
<td>如果远程目录不存在，创建远程目录</td>
</tr>
<tr>
<td>–ftp-method [multicwd&#x2F;nocwd&#x2F;singlecwd]</td>
<td>控制CWD的使用</td>
</tr>
<tr>
<td>–ftp-pasv</td>
<td>使用 PASV&#x2F;EPSV 代替端口</td>
</tr>
<tr>
<td>–ftp-skip-pasv-<a href="http://man.linuxde.net/ip">ip</a></td>
<td>使用PASV的时候,忽略该IP地址</td>
</tr>
<tr>
<td>–ftp-ssl</td>
<td>尝试用 SSL&#x2F;TLS 来进行ftp数据传输</td>
</tr>
<tr>
<td>–ftp-ssl-reqd</td>
<td>要求用 SSL&#x2F;TLS 来进行ftp数据传输</td>
</tr>
<tr>
<td>-F&#x2F;–form &lt;name&#x3D;content&gt;</td>
<td>模拟http表单提交数据</td>
</tr>
<tr>
<td>–form-string &lt;name&#x3D;string&gt;</td>
<td>模拟http表单提交数据</td>
</tr>
<tr>
<td>-g&#x2F;–globoff</td>
<td>禁用网址序列和范围使用{}和[]</td>
</tr>
<tr>
<td>-G&#x2F;–get</td>
<td>以get的方式来发送数据</td>
</tr>
<tr>
<td>-H&#x2F;–header</td>
<td>自定义头信息传递给服务器</td>
</tr>
<tr>
<td>–ignore-content-length</td>
<td>忽略的HTTP头信息的长度</td>
</tr>
<tr>
<td>-i&#x2F;–include</td>
<td>输出时包括protocol头信息</td>
</tr>
<tr>
<td>-I&#x2F;–<a href="http://man.linuxde.net/head">head</a></td>
<td>只显示请求头信息</td>
</tr>
<tr>
<td>-j&#x2F;–junk-session-cookies</td>
<td>读取文件进忽略session cookie</td>
</tr>
<tr>
<td>–interface</td>
<td>使用指定网络接口&#x2F;地址</td>
</tr>
<tr>
<td>–krb4</td>
<td>使用指定安全级别的krb4</td>
</tr>
<tr>
<td>-k&#x2F;–insecure</td>
<td>允许不使用证书到SSL站点</td>
</tr>
<tr>
<td>-K&#x2F;–config</td>
<td>指定的配置文件读取</td>
</tr>
<tr>
<td>-l&#x2F;–list-only</td>
<td>列出ftp目录下的文件名称</td>
</tr>
<tr>
<td>–limit-rate</td>
<td>设置传输速度</td>
</tr>
<tr>
<td>–local-port</td>
<td>强制使用本地端口号</td>
</tr>
<tr>
<td>-m&#x2F;–max-<a href="http://man.linuxde.net/time">time</a></td>
<td>设置最大传输时间</td>
</tr>
<tr>
<td>–max-redirs</td>
<td>设置最大读取的目录数</td>
</tr>
<tr>
<td>–max-filesize</td>
<td>设置最大下载的文件总量</td>
</tr>
<tr>
<td>-M&#x2F;–manual</td>
<td>显示全手动</td>
</tr>
<tr>
<td>-n&#x2F;–netrc</td>
<td>从netrc文件中读取用户名和密码</td>
</tr>
<tr>
<td>–netrc-optional</td>
<td>使用 .netrc 或者 URL来覆盖-n</td>
</tr>
<tr>
<td>–ntlm</td>
<td>使用 HTTP NTLM 身份验证</td>
</tr>
<tr>
<td>-N&#x2F;–no-buffer</td>
<td>禁用缓冲输出</td>
</tr>
<tr>
<td>-o&#x2F;–output</td>
<td>把输出写到该文件中</td>
</tr>
<tr>
<td>-O&#x2F;–remote-name</td>
<td>把输出写到该文件中，保留远程文件的文件名</td>
</tr>
<tr>
<td>-p&#x2F;–proxytunnel</td>
<td>使用HTTP代理</td>
</tr>
<tr>
<td>–proxy-anyauth</td>
<td>选择任一代理身份验证方法</td>
</tr>
<tr>
<td>–proxy-basic</td>
<td>在代理上使用基本身份验证</td>
</tr>
<tr>
<td>–proxy-digest</td>
<td>在代理上使用数字身份验证</td>
</tr>
<tr>
<td>–proxy-ntlm</td>
<td>在代理上使用ntlm身份验证</td>
</tr>
<tr>
<td>-P&#x2F;–ftp-port</td>
<td>使用端口地址，而不是使用PASV</td>
</tr>
<tr>
<td>-q</td>
<td>作为第一个参数，关闭 .curlrc</td>
</tr>
<tr>
<td>-Q&#x2F;–quote</td>
<td>文件传输前，发送命令到服务器</td>
</tr>
<tr>
<td>-r&#x2F;–range</td>
<td>检索来自HTTP&#x2F;1.1或FTP服务器字节范围</td>
</tr>
<tr>
<td>–range-file</td>
<td>读取（SSL）的随机文件</td>
</tr>
<tr>
<td>-R&#x2F;–remote-time</td>
<td>在本地生成文件时，保留远程文件时间</td>
</tr>
<tr>
<td>–retry</td>
<td>传输出现问题时，重试的次数</td>
</tr>
<tr>
<td>–retry-delay</td>
<td>传输出现问题时，设置重试间隔时间</td>
</tr>
<tr>
<td>–retry-max-time</td>
<td>传输出现问题时，设置最大重试时间</td>
</tr>
<tr>
<td>-s&#x2F;–silent</td>
<td>静默模式。不输出任何东西</td>
</tr>
<tr>
<td>-S&#x2F;–show-error</td>
<td>显示错误</td>
</tr>
<tr>
<td>–socks4 &lt;<a href="http://man.linuxde.net/host">host</a>[:port]&gt;</td>
<td>用socks4代理给定主机和端口</td>
</tr>
<tr>
<td>–socks5 &lt;host[:port]&gt;</td>
<td>用socks5代理给定主机和端口</td>
</tr>
<tr>
<td>–stderr</td>
<td></td>
</tr>
<tr>
<td>-t&#x2F;–<a href="http://man.linuxde.net/telnet">telnet</a>-option &lt;OPT&#x3D;val&gt;</td>
<td>Telnet选项设置</td>
</tr>
<tr>
<td>–trace</td>
<td>对指定文件进行debug</td>
</tr>
<tr>
<td>–trace-ascii</td>
<td>Like –跟踪但没有hex输出</td>
</tr>
<tr>
<td>–trace-time</td>
<td>跟踪&#x2F;详细输出时，添加时间戳</td>
</tr>
<tr>
<td>-T&#x2F;–upload-file</td>
<td>上传文件</td>
</tr>
<tr>
<td>–url</td>
<td>Spet URL to work with</td>
</tr>
<tr>
<td>-u&#x2F;–user &lt;user[:password]&gt;</td>
<td>设置服务器的用户和密码</td>
</tr>
<tr>
<td>-U&#x2F;–proxy-user &lt;user[:password]&gt;</td>
<td>设置代理用户名和密码</td>
</tr>
<tr>
<td>-<a href="http://man.linuxde.net/w">w</a>&#x2F;–<a href="http://man.linuxde.net/write">write</a>-out [format]</td>
<td>什么输出完成后</td>
</tr>
<tr>
<td>-x&#x2F;–proxy &lt;host[:port]&gt;</td>
<td>在给定的端口上使用HTTP代理</td>
</tr>
<tr>
<td>-X&#x2F;–request &lt;<a href="http://man.linuxde.net/command">command</a>&gt;</td>
<td>指定什么命令</td>
</tr>
<tr>
<td>-y&#x2F;–speed-time</td>
<td>放弃限速所要的时间，默认为30</td>
</tr>
<tr>
<td>-Y&#x2F;–speed-limit</td>
<td>停止传输速度的限制，速度时间</td>
</tr>
</tbody></table>
<h5 id="发送get或post请求"><a href="#发送get或post请求" class="headerlink" title="发送get或post请求"></a>发送get或post请求</h5><h6 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl http://baidu.com</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<img src="/2022/05/03/curl%E8%B0%83%E7%94%A8%E5%90%8E%E5%8F%B0%E6%8E%A5%E5%8F%A3/get%E8%AF%B7%E6%B1%82.png" class>

<h6 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -d &quot;pagenum=1&amp;pagesize=2&quot; http://localhost:8080/zz/transfer/getNearInfoList -X POST</span><br></pre></td></tr></table></figure>

<p><strong>-X 指定请求的方法，POST外还可以指定PUT等请求方法*</strong>*</p>
<p><strong>-d 请求携带的参数，多个参数使用&amp;分隔</strong></p>
<h5 id="带有Header的请求头"><a href="#带有Header的请求头" class="headerlink" title="带有Header的请求头"></a>带有Header的请求头</h5><p>有些请求需要携带请求头，例如指定Content-type&#x3D;application&#x2F;json</p>
<p>-H 指定请求头，例如 -H “Content-type:application&#x2F;json”</p>
<p>多个请求头传递多-H即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -H ‘Host: appqa.zhuaninc.com‘ -H ‘Upgrade-Insecure-Requests: 1‘ -H ‘Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8‘ -H ‘User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.1 Safari/605.1.15‘ -H ‘Accept-Language: zh-cn‘ --compressed ‘http://appqa.zhuaninc.com/appdatastructure/message/sendPushOrSysMsg?uid=71779969887312512&amp;msgtitle=$&#123;pushtitle&#125;&amp;msgcontent=checkPushContent&amp;pushimg=https://img.58cdn.com.cn/zhuanzhuan/images/iwantBuyTitle2x.png&amp;msgprotocol=&amp;envtype=0&amp;msgtype=0&amp;luodiye=%E6%99%AE%E9%80%9A%E7%B3%BB%E7%BB%9F%E6%B6%88%E6%81%AF‘</span><br></pre></td></tr></table></figure>

<h5 id="JSON格式请求"><a href="#JSON格式请求" class="headerlink" title="JSON格式请求"></a>JSON格式请求</h5><p>-d可以指定入参为json格式，此时需要-H指定application&#x2F;json的请求头</p>
<p>json格式入参：使用单引号‘‘括起json格式的入参，单引号中的内容是可以json解析的内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -i -X POST -H &quot;Content-type:application/json&quot;-d ‘&#123;&quot;to_user”:&quot;meitian&quot;,&quot;msg&quot;:&quot;‘$&#123;errorMsg&#125;‘&quot;&#125;‘ http://wxmsg.zhuaninc.com/api/message/send</span><br></pre></td></tr></table></figure>

<h5 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h5><p>curl命令可以用来执行下载、发送各种HTTP请求，指定HTTP头部等操作。如果系统没有curl可以使用<code>yum install curl</code>安装，也可以下载安装。curl是将下载文件输出到stdout，将进度信息输出到stderr，不显示进度信息使用<code>--silent</code>选项。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl URL --silent</span><br></pre></td></tr></table></figure>

<p>这条命令是将下载文件输出到终端，所有下载的数据都被写入到stdout。</p>
<p>使用选项<code>-O</code>将下载的数据写入到文件，必须使用文件的绝对地址：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl http://man.linuxde.net/text.iso --silent -O</span><br></pre></td></tr></table></figure>

<p>选项<code>-o</code>将下载数据写入到指定名称的文件中，并使用<code>--progress</code>显示进度条：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl http://man.linuxde.net/test.iso -o filename.iso --progress</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">######################################## 100.0%</span></span></span><br></pre></td></tr></table></figure>

<h5 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h5><p>curl能够从特定的文件偏移处继续下载，它可以通过指定一个便移量来下载部分文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl URL/File -C 偏移量</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">偏移量是以字节为单位的整数，如果让curl自动推断出正确的续传位置使用-C -：</span></span><br><span class="line">curl -C -URL</span><br></pre></td></tr></table></figure>

<h5 id="使用curl设置参照页字符串"><a href="#使用curl设置参照页字符串" class="headerlink" title="使用curl设置参照页字符串"></a>使用curl设置参照页字符串</h5><p>参照页是位于HTTP头部中的一个字符串，用来表示用户是从哪个页面到达当前页面的，如果用户点击网页A中的某个连接，那么用户就会跳转到B网页，网页B头部的参照页字符串就包含网页A的URL。</p>
<p>使用<code>--referer</code>选项指定参照页字符串：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl --referer http://www.google.com http://man.linuxde.net</span><br></pre></td></tr></table></figure>

<h5 id="用curl设置cookies"><a href="#用curl设置cookies" class="headerlink" title="用curl设置cookies"></a>用curl设置cookies</h5><p>使用<code>--cookie &quot;COKKIES&quot;</code>选项来指定cookie，多个cookie使用分号分隔：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl http://man.linuxde.net --cookie &quot;user=root;pass=123456&quot;</span><br></pre></td></tr></table></figure>

<p>将cookie另存为一个文件，使用<code>--cookie-jar</code>选项：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl URL --cookie-jar cookie_file</span><br></pre></td></tr></table></figure>

<h5 id="用curl设置用户代理字符串"><a href="#用curl设置用户代理字符串" class="headerlink" title="用curl设置用户代理字符串"></a>用curl设置用户代理字符串</h5><p>有些网站访问会提示只能使用IE浏览器来访问，这是因为这些网站设置了检查用户代理，可以使用curl把用户代理设置为IE，这样就可以访问了。使用<code>--user-agent</code>或者<code>-A</code>选项：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl URL --user-agent &quot;Mozilla/5.0&quot;</span><br><span class="line">curl URL -A &quot;Mozilla/5.0&quot;</span><br></pre></td></tr></table></figure>

<p>其他HTTP头部信息也可以使用curl来发送，使用<code>-H</code>“头部信息” 传递多个头部信息，例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -H &quot;Host:man.linuxde.net&quot; -H &quot;accept-language:zh-cn&quot; URL</span><br></pre></td></tr></table></figure>

<h5 id="curl的带宽控制和下载配额"><a href="#curl的带宽控制和下载配额" class="headerlink" title="curl的带宽控制和下载配额"></a>curl的带宽控制和下载配额</h5><p>使用<code>--limit-rate</code>限制curl的下载速度：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl URL --limit-rate 50k</span><br></pre></td></tr></table></figure>

<p>命令中用k（千字节）和m（兆字节）指定下载速度限制。</p>
<p>使用<code>--max-filesize</code>指定可下载的最大文件大小：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl URL --max-filesize bytes</span><br></pre></td></tr></table></figure>

<p>如果文件大小超出限制，命令则返回一个非0退出码，如果命令正常则返回0。</p>
<h5 id="用curl进行认证"><a href="#用curl进行认证" class="headerlink" title="用curl进行认证"></a>用curl进行认证</h5><p>使用curl选项 -u 可以完成HTTP或者FTP的认证，可以指定密码，也可以不指定密码在后续操作中输入密码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -u user:pwd http://man.linuxde.net</span><br><span class="line">curl -u user http://man.linuxde.net</span><br></pre></td></tr></table></figure>

<h5 id="只打印响应头部信息"><a href="#只打印响应头部信息" class="headerlink" title="只打印响应头部信息"></a>只打印响应头部信息</h5><p>通过<code>-I</code>或者<code>-head</code>可以只打印出HTTP头部信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost text]# curl -I http://man.linuxde.net</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.2.5</span><br><span class="line">date: Mon, 10 Dec 2012 09:24:34 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">X-Pingback: http://man.linuxde.net/xmlrpc.php</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>deepEquals与equals比较</title>
    <url>/2022/01/09/deepEquals%E4%B8%8Eequals%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<p>举例分析equals和deepEquals的区别。<span id="more"></span></p>
<h5 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        String[][] name1 = &#123;&#123; <span class="string">&quot;G&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;o&quot;</span>&#125;,&#123;<span class="string">&quot;H&quot;</span>,<span class="string">&quot;u&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;n&quot;</span>&#125;,&#123;<span class="string">&quot;j&quot;</span>,<span class="string">&quot;i&quot;</span>,<span class="string">&quot;e&quot;</span>&#125;&#125;;</span><br><span class="line">        String[][] name2 =  &#123;&#123; <span class="string">&quot;G&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;o&quot;</span>&#125;,&#123;<span class="string">&quot;H&quot;</span>,<span class="string">&quot;u&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;n&quot;</span>&#125;,&#123;<span class="string">&quot;j&quot;</span>,<span class="string">&quot;i&quot;</span>,<span class="string">&quot;e&quot;</span>&#125;&#125;;</span><br><span class="line">      System.out.println(Arrays.equals(name1,name2));<span class="comment">//false  </span></span><br><span class="line">      System.out.println(Arrays.deepEquals(name1,name2));<span class="comment">//true  </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        String[] name1 = &#123; <span class="string">&quot;G&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;o&quot;</span>&#125;;</span><br><span class="line">        String[] name2 = &#123; <span class="string">&quot;G&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;o&quot;</span>&#125;;</span><br><span class="line">      System.out.println(Arrays.equals(name1,name2));<span class="comment">//true  </span></span><br><span class="line">      System.out.println(Arrays.deepEquals(name1,name2));<span class="comment">//true  </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ol>
<li>deepEquals用于判定两个指定数组彼此是否深层相等，此方法适用于任意深度的嵌套数组。</li>
<li>equals用于判定两个数组是否相等，如果两个数组以相同顺序包含相同元素，则返回true，否则返回false。</li>
<li>通过比对“例一”和“例二”我们可以得出这样一个结论：如果两个数组使用equals返回true，则使用deepEquals也返回true，也就是说在比较的两个数组均为一维数组的前提下，equals和deepEquals的比较结果没有差别。</li>
</ol>
<p> 4、如果要比较多为数组，则需要使用deepEquals方法。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>explain语法解析</title>
    <url>/2022/05/03/explain%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>explain可以模拟优化器执行SQL语句，从而知道mysql是如何处理你的sql语句。<span id="more"></span></p>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>EXPLAIN可以模拟优化器执行SQL语句，从而知道mysql是如何处理你的sql语句。分析你的查询语句或是表结构的性能瓶颈。</p>
<h5 id="通过explain，我们可以分析出以下结果："><a href="#通过explain，我们可以分析出以下结果：" class="headerlink" title="通过explain，我们可以分析出以下结果："></a>通过explain，我们可以分析出以下结果：</h5><ul>
<li>表的读取顺序</li>
<li>数据读取操作的操作类型</li>
<li>哪些索引可以使用</li>
<li>哪些索引被实际使用</li>
<li>表之间的引用</li>
<li>每张表有多少行被优化器查询</li>
</ul>
<h5 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain  <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t</span><br></pre></td></tr></table></figure>

<h5 id="执行计划包含的信息"><a href="#执行计划包含的信息" class="headerlink" title="执行计划包含的信息"></a>执行计划包含的信息</h5><table>
<thead>
<tr>
<th>id</th>
<th>select_type</th>
<th>table</th>
<th>type</th>
<th>possible_keys</th>
<th>key</th>
<th>key_len</th>
<th>ref</th>
<th>rows</th>
<th>Extra</th>
</tr>
</thead>
</table>
<h4 id="执行计划各字段意义"><a href="#执行计划各字段意义" class="headerlink" title="执行计划各字段意义"></a>执行计划各字段意义</h4><h5 id="id"><a href="#id" class="headerlink" title="id"></a>id</h5><p>select查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序</p>
<h6 id="id的结果共有三种情况"><a href="#id的结果共有三种情况" class="headerlink" title="id的结果共有三种情况"></a>id的结果共有三种情况</h6><ul>
<li><p>id相同，执行顺序由上而下</p>
  <img src="/2022/05/03/explain%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/id1.png" class></li>
</ul>
<p>加载表的顺序如图上所示：t1、t3、t2。</p>
<ul>
<li><p>id不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</p>
  <img src="/2022/05/03/explain%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/id2.png" class>
</li>
<li><p>id相同和不同，同时存在</p>
  <img src="/2022/05/03/explain%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/id3.png" class></li>
</ul>
<p>如上图所示，在id为1时，table显示的是 <code>&lt;derived2&gt;</code> ,这里指的是指向id为2的表，即t3表的衍生表。</p>
<h5 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h5><p>常见的值有如下几种</p>
<img src="/2022/05/03/explain%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/select_type.png" class>

<p>分别用来表示查询的类型，主要是用于区别普通查询、联合查询、子查询等的复杂查询。</p>
<ul>
<li>SIMPLE ：简单的SELECT查询，查询中不包含子查询或者UNION</li>
<li>PRIMARY ：查询中若包含任何复杂的子部分，最外层查询则被标记为PRIMARY</li>
<li>SUBQUERY ：在SELECT或WHERE列表中包含了子查询</li>
<li>DERIVED ：在FROM列表中包含的子查询被标记为DERIVED（衍生），MySQL会递归执行这些子查询，把结果放在临时表中</li>
<li>UNION ：若第二个SELECT出现在UNION之后，则被标记为UNION：若UNION包含在FROM子句的子查询中，外层SELECT将被标记为：DERIVED</li>
<li>UNION RESULT ：从UNION表获取结果的SELECT</li>
</ul>
<h5 id="table"><a href="#table" class="headerlink" title="table"></a>table</h5><p>指的就是当前表</p>
<h5 id="type"><a href="#type" class="headerlink" title="type"></a>type</h5><p>type所显示的是查询使用了哪种类型，type包含的类型包括如下图所示的几种：</p>
<img src="/2022/05/03/explain%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/type.png" class>

<p>从最好到最差依次是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; all</span><br></pre></td></tr></table></figure>

<p><strong>一般来说，得保证查询至少达到range级别，最好能达到ref</strong></p>
<ul>
<li>system ：表只有一行记录（等于系统表），这是const类型的特列，平时不会出现，这个也可以忽略不计</li>
<li>const ：表示通过索引一次就找到了，const用于比较primary key 或者unique索引。因为只匹配一行数据，所以很快。如将主键置于where列表中，MySQL就能将该查询转换为一个常量。</li>
</ul>
<img src="/2022/05/03/explain%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/const.png" class>

<p>首先进行子查询得到一个结果的d1临时表，子查询条件为id &#x3D; 1 是常量，所以type是const，id为1的相当于只查询一条记录，所以type为system。</p>
<ul>
<li>eq_ref ：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描</li>
<li>ref ：非唯一性索引扫描，返回匹配某个单独值的所有行，本质上也是一种索引访问，它返回所有匹配某个单独值的行，然而，它可能会找到多个符合条件的行，所以他应该属于查找和扫描的混合体。</li>
</ul>
<img src="/2022/05/03/explain%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/type2.png" class>

<ul>
<li>range ：只检索给定范围的行，使用一个索引来选择行，key列显示使用了哪个索引，一般就是在你的where语句中出现between、&lt; 、&gt;、in等的查询，这种范围扫描索引比全表扫描要好，因为它只需要开始于索引的某一点，而结束于另一点，不用扫描全部索引。</li>
</ul>
<img src="/2022/05/03/explain%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/type3.png" class>

<ul>
<li>index ： Full Index Scan，Index与All区别为index类型只遍历索引树。这通常比ALL快，因为索引文件通常比数据文件小。（也就是说虽然all和Index都是读全表，但index是从索引中读取的，而all是从硬盘读取的）</li>
</ul>
<img src="/2022/05/03/explain%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/type4.png" class>

<p>id是主键，所以存在主键索引</p>
<ul>
<li>all ：Full Table Scan 将遍历全表以找到匹配的行</li>
</ul>
<img src="/2022/05/03/explain%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/type5.png" class>

<h5 id="possible-keys-和-key"><a href="#possible-keys-和-key" class="headerlink" title="possible_keys 和 key"></a>possible_keys 和 key</h5><p>possible_keys显示可能应用在这张表中的索引，一个或多个。查询涉及到的字段上若存在索引，则该索引将被列出，<strong>但不一定被查询实际使用</strong>。</p>
<p>key</p>
<ul>
<li>实际使用的索引，如果为NULL，则没有使用索引。（可能原因包括没有建立索引或索引失效）</li>
</ul>
<img src="/2022/05/03/explain%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/key1.png" class>

<ul>
<li>查询中若使用了覆盖索引（select 后要查询的字段刚好和创建的索引字段完全相同），则该索引仅出现在key列表中</li>
</ul>
<img src="/2022/05/03/explain%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/key2.png" class>

<img src="/2022/05/03/explain%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/key3.png" class>

<h5 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h5><p>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度，在不损失精确性的情况下，长度越短越好。key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的。</p>
<img src="/2022/05/03/explain%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/key_len.png" class>

<h5 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h5><p>显示索引的那一列被使用了，如果可能的话，最好是一个常数。哪些列或常量被用于查找索引列上的值。</p>
<img src="/2022/05/03/explain%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/ref.png" class>

<h5 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h5><p>根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数，也就是说，用的越少越好</p>
<img src="/2022/05/03/explain%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/rows.png" class>

<h5 id="filtered"><a href="#filtered" class="headerlink" title="filtered"></a>filtered</h5><p>通过查询条件获取的最终记录行数占通过type字段指明的搜索方式搜索出来的记录行数的百分比</p>
<h5 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h5><p>包含不适合在其他列中显式但十分重要的额外信息</p>
<h5 id="Using-filesort"><a href="#Using-filesort" class="headerlink" title="Using filesort"></a>Using filesort</h5><p>mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。MySQL中无法利用索引完成的排序操作称为“文件排序”。</p>
<img src="/2022/05/03/explain%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/sort.png" class>

<h5 id="Using-temporary"><a href="#Using-temporary" class="headerlink" title="Using temporary"></a>Using temporary</h5><p>使用了用临时表保存中间结果，MySQL在对查询结果排序时使用临时表。常见于排序order by和分组查询group by。</p>
<img src="/2022/05/03/explain%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/temporary.png" class>

<h5 id="Using-index"><a href="#Using-index" class="headerlink" title="Using index"></a>Using index</h5><p>表示相应的select操作中使用了覆盖索引（Covering Index），避免访问了表的数据行，效率不错。如果同时出现using where，表明索引被用来执行索引键值的查找；如果没有同时出现using where，表明索引用来读取数据而非执行查找动作。</p>
<img src="/2022/05/03/explain%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/index.png" class>

<img src="/2022/05/03/explain%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/index2.png" class>

<h5 id="Using-where"><a href="#Using-where" class="headerlink" title="Using where"></a>Using where</h5><p>表明使用了where过滤</p>
<h5 id="Using-join-buffer"><a href="#Using-join-buffer" class="headerlink" title="Using join buffer"></a>Using join buffer</h5><p>表明使用了连接缓存,比如说在查询的时候，多表join的次数非常多，那么将配置文件中的缓冲区的join buffer调大一些。</p>
<h5 id="impossible-where"><a href="#impossible-where" class="headerlink" title="impossible where"></a>impossible where</h5><p>where子句的值总是false，不能用来获取任何元组</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_user <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> id <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span></span><br></pre></td></tr></table></figure>

<h5 id="select-tables-optimized-away"><a href="#select-tables-optimized-away" class="headerlink" title="select tables optimized away"></a>select tables optimized away</h5><p>在没有GROUPBY子句的情况下，基于索引优化MIN&#x2F;MAX操作或者对于MyISAM存储引擎优化COUNT(*)操作，不必等到执行阶段再进行计算，查询执行计划生成的阶段即完成优化。</p>
<h5 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h5><p>优化distinct操作，在找到第一匹配的元组后即停止找同样值的动作</p>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><img src="/2022/05/03/explain%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/exp.png" class>

<ul>
<li>执行顺序1：select_type为UNION，说明第四个select是UNION里的第二个select，最先执行【select name,id from t2】</li>
<li>执行顺序2：id为3，是整个查询中第三个select的一部分。因查询包含在from中，所以为DERIVED【select id,name from t1 where other_column&#x3D;’’】</li>
<li>执行顺序3：select列表中的子查询select_type为subquery,为整个查询中的第二个select【select id from t3】</li>
<li>执行顺序4：id列为1，表示是UNION里的第一个select，select_type列的primary表示该查询为外层查询，table列被标记为<code>&lt;derived3&gt;</code>,表示查询结果来自一个衍生表，其中derived3中的3代表该查询衍生自第三个select查询，即id为3的select。【select d1.name …】</li>
<li>执行顺序5：代表从UNION的临时表中读取行的阶段，table列的&lt; union1,4 &gt;表示用第一个和第四个select的结果进行UNION操作。【两个结果union操作】</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>docker常用命令</title>
    <url>/2022/05/02/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>docker容器使用时的常用命令。<span id="more"></span></p>
<h5 id="Docker容器使用"><a href="#Docker容器使用" class="headerlink" title="Docker容器使用"></a>Docker容器使用</h5><h6 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h6><p>如果我们本地没有 ubuntu 镜像，我们可以使用 docker pull 命令来载入 ubuntu 镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu</span><br></pre></td></tr></table></figure>

<h6 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h6><p>以下命令使用 ubuntu 镜像启动一个容器，参数为以命令行模式进入该容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it ubuntu /bin/bash</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>-i: 交互式操作。</li>
<li>-t: 终端。</li>
<li>ubuntu: ubuntu 镜像。</li>
<li>&#x2F;bin&#x2F;bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 &#x2F;bin&#x2F;bash。</li>
</ul>
<p>要退出终端，直接输入 exit:</p>
<h6 id="启动已停止运行的容器"><a href="#启动已停止运行的容器" class="headerlink" title="启动已停止运行的容器"></a>启动已停止运行的容器</h6><p>查看所有的容器命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<p>启动一个已停止的容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start 容器ID</span><br></pre></td></tr></table></figure>

<h6 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -itd --name ubuntu-test ubuntu /bin/bash</span><br></pre></td></tr></table></figure>

<p>使用<code>-d</code>参数，容器启动后会进入后台，默认不会进入容器，想要进入容器需要使用指令<code>docker exec</code>。</p>
<h6 id="停止一个容器"><a href="#停止一个容器" class="headerlink" title="停止一个容器"></a>停止一个容器</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop 容器ID</span><br></pre></td></tr></table></figure>

<p>停止的容器重启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker restart 容器ID</span><br></pre></td></tr></table></figure>

<h6 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h6><ul>
<li>docker attach：从此容器中退出，会导致容器的停止。</li>
<li>docker exec：使用此命令，退出容器终端，不会导致容器的停止。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker attach 容器ID</span><br><span class="line">docker exec -it 容器ID /bin/bash</span><br></pre></td></tr></table></figure>

<h6 id="导入和导出容器"><a href="#导入和导出容器" class="headerlink" title="导入和导出容器"></a>导入和导出容器</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker export 容器ID &gt; ubuntu.tar</span><br><span class="line">cat docker/ubuntu.tar | docker import - test/ubuntu:v1</span><br></pre></td></tr></table></figure>

<p>ubuntu.tar为导出文件，test&#x2F;ubuntu:v1为镜像。</p>
<h6 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm -f 容器ID</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清除掉所有处于终止状态的容器</span></span><br><span class="line">docker container prune</span><br></pre></td></tr></table></figure>

<h6 id="运行一个web应用"><a href="#运行一个web应用" class="headerlink" title="运行一个web应用"></a>运行一个web应用</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">载入镜像</span></span><br><span class="line">docker pull training/webapp</span><br><span class="line">docker run -d -P training/webapp python app.py</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看进程</span></span><br><span class="line">docker top 容器名称</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查应用</span></span><br><span class="line">docker inspect 容器名称</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">停止web应用容器</span></span><br><span class="line">docker stop 容器名称</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">移除web应用容器，删除时容器必须停止，否则会报错</span></span><br><span class="line">docker rm</span><br></pre></td></tr></table></figure>

<p><code>-P</code>将容器内部使用的网络端口映射到我们使用的主机上。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-p 主机IP:8080:8080</span><br></pre></td></tr></table></figure>

<h6 id="查看web应用程序日志"><a href="#查看web应用程序日志" class="headerlink" title="查看web应用程序日志"></a>查看web应用程序日志</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs -f 容器ID</span><br></pre></td></tr></table></figure>

<p><code>-f</code>：让<code>docker logs</code>像使用<code>tail -f</code>一样来输出容器内部的标准输出。</p>
<h5 id="Docker镜像使用"><a href="#Docker镜像使用" class="headerlink" title="Docker镜像使用"></a>Docker镜像使用</h5><h6 id="镜像列表"><a href="#镜像列表" class="headerlink" title="镜像列表"></a>镜像列表</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p>列出本地主机上的镜像。</p>
<p>各个选项说明:</p>
<ul>
<li>REPOSITORY：表示镜像的仓库源</li>
<li>TAG：镜像的标签</li>
<li>IMAGE ID：镜像ID</li>
<li>CREATED：镜像创建时间</li>
<li>SIZE：镜像大小</li>
</ul>
<p>同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如 ubuntu 仓库源里，有 15.10、14.04 等多个不同的版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。</p>
<h6 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search 镜像仓库源名称</span><br></pre></td></tr></table></figure>

<ul>
<li>NAME: 镜像仓库源的名称</li>
<li>DESCRIPTION: 镜像的描述</li>
<li>OFFICIAL: 是否 docker 官方发布</li>
<li>stars: 类似 Github 里面的 star，表示点赞、喜欢的意思。</li>
<li>AUTOMATED: 自动构建。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载镜像</span></span><br><span class="line">docker pull 镜像仓库名称</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用镜像</span></span><br><span class="line">docker run 镜像仓库源名称</span><br></pre></td></tr></table></figure>

<h6 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rmi 镜像名称</span><br></pre></td></tr></table></figure>

<h6 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h6><p>我们使用命令 <code>docker build</code> ， 从零开始来创建一个新的镜像。为此，我们需要创建一个 Dockerfile 文件，其中包含一组指令来告诉 Docker 如何构建我们的镜像。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ cat Dockerfile </span><br><span class="line"><span class="keyword">FROM</span>    centos:<span class="number">6.7</span></span><br><span class="line"><span class="keyword">MAINTAINER</span>      Fisher <span class="string">&quot;fisher@sudops.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash">     /bin/echo <span class="string">&#x27;root:123456&#x27;</span> |chpasswd</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash">     useradd runoob</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash">     /bin/echo <span class="string">&#x27;runoob:123456&#x27;</span> |chpasswd</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash">     /bin/echo -e <span class="string">&quot;LANG=\&quot;en_US.UTF-8\&quot;&quot;</span> &gt;/etc/default/local</span></span><br><span class="line"><span class="keyword">EXPOSE</span>  <span class="number">22</span></span><br><span class="line"><span class="keyword">EXPOSE</span>  <span class="number">80</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash">     /usr/sbin/sshd -D</span></span><br></pre></td></tr></table></figure>

<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Docker image for springboot file run</span></span><br><span class="line"><span class="comment"># VERSION 0.0.1</span></span><br><span class="line"><span class="comment"># 基础镜像使用java</span></span><br><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="comment"># VOLUME 指定了临时文件目录为/tmp。</span></span><br><span class="line"><span class="comment"># 其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/tmp</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /tmp</span></span><br><span class="line"><span class="comment"># 将jar包添加到容器中并更名为app.jar</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> after-0.0.2.jar app.jar</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> bash -c <span class="string">&#x27;touch /app.jar&#x27;</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span> &gt;/etc/timezone</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>, <span class="string">&quot;--spring.profiles.active=dev&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>每一个指令都会在镜像上创建一个新的层，每一个指令的前缀都必须是大写的。</p>
<p>FROM指定使用哪个镜像源；</p>
<p>RUN 指令告诉docker 在镜像内执行命令，安装了什么。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker build -t runoob/centos:6.7 .</span><br><span class="line">Sending build context to Docker daemon 17.92 kB</span><br><span class="line">Step 1 : FROM centos:6.7</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">d95b5ca17cc3</span></span><br><span class="line">Step 2 : MAINTAINER Fisher &quot;fisher@sudops.com&quot;</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span></span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">0c92299c6f03</span></span><br><span class="line">Step 3 : RUN /bin/echo &#x27;root:123456&#x27; |chpasswd</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span></span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">0397ce2fbd0a</span></span><br><span class="line">Step 4 : RUN useradd runoob</span><br><span class="line">······</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>-t ：指定要创建的目标镜像名</li>
<li>. ：Dockerfile 文件所在目录，可以指定Dockerfile 的绝对路径</li>
</ul>
<p>使用新的镜像来创建容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -t -i runoob/centos:6.7  /bin/bash</span><br></pre></td></tr></table></figure>

<h6 id="设置镜像标签"><a href="#设置镜像标签" class="headerlink" title="设置镜像标签"></a>设置镜像标签</h6><p>使用 <code>docker tag</code> 命令，为镜像添加一个新的标签。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker tag 860c279d2fec runoob/centos:dev</span><br></pre></td></tr></table></figure>

<h5 id="容器连接"><a href="#容器连接" class="headerlink" title="容器连接"></a>容器连接</h5><h6 id="网络端口映射"><a href="#网络端口映射" class="headerlink" title="网络端口映射"></a>网络端口映射</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -P training/webapp python app.py</span><br><span class="line">docker run -d -p 5000:5000 training/webapp python app.py</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看镜像进程</span></span><br><span class="line">docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND           ...           PORTS                     NAMES</span><br><span class="line">33e4523d30aa        training/webapp     &quot;python app.py&quot;   ...   0.0.0.0:5000-&gt;5000/tcp    berserk_bartik</span><br><span class="line">fce072cc88ce        training/webapp     &quot;python app.py&quot;   ...   0.0.0.0:32768-&gt;5000/tcp   grave_hopper</span><br></pre></td></tr></table></figure>

<p>两种方式的区别是:</p>
<ul>
<li>-P :是容器内部端口<strong>随机</strong>映射到主机的高端口。</li>
<li>-p :是容器内部端口绑定到<strong>指定</strong>的主机端口。</li>
</ul>
<p>另外，我们可以指定容器绑定的网络地址，比如绑定 127.0.0.1，可以通过访问 127.0.0.1:5001 来访问容器的 5000 端口。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 127.0.0.1:5001:5000 training/webapp python app.py</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND           ...     PORTS                                NAMES</span><br><span class="line">95c6ceef88ca        training/webapp     &quot;python app.py&quot;   ...  5000/tcp, 127.0.0.1:5001-&gt;5000/tcp   adoring_stonebraker</span><br></pre></td></tr></table></figure>

<h6 id="容器命名"><a href="#容器命名" class="headerlink" title="容器命名"></a>容器命名</h6><p>当我们创建一个容器的时候，docker 会自动对它进行命名。另外，我们也可以使用 <code>--name</code> 标识来命名容器。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -P --name runoob training/webapp python app.py</span><br></pre></td></tr></table></figure>

<h5 id="Docker容器互联"><a href="#Docker容器互联" class="headerlink" title="Docker容器互联"></a>Docker容器互联</h5><p>端口映射并不是唯一把 docker 连接到另一个容器的方法。</p>
<p>docker 有一个连接系统允许将多个容器连接在一起，共享连接信息。</p>
<p>docker 连接会创建一个父子关系，其中父容器可以看到子容器的信息。</p>
<h6 id="新建网络"><a href="#新建网络" class="headerlink" title="新建网络"></a>新建网络</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network create -d bridge test-net</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<p>-d：参数指定 Docker 网络类型，有 bridge、overlay。</p>
<h6 id="连接容器"><a href="#连接容器" class="headerlink" title="连接容器"></a>连接容器</h6><p>运行一个容器并连接到新建的 test-net 网络:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -itd --name test1 --network test-net ubuntu /bin/bash</span><br></pre></td></tr></table></figure>

<p>打开新的终端，再运行一个容器并加入到 test-net 网络:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -itd --name test2 --network test-net ubuntu /bin/bash</span><br></pre></td></tr></table></figure>

<p>可以通过ping命令来证明test1容器和test2容器建立了互联关系。</p>
<h5 id="配置DNS"><a href="#配置DNS" class="headerlink" title="配置DNS"></a>配置DNS</h5><p>可以在宿主机的 &#x2F;etc&#x2F;docker&#x2F;daemon.json 文件中增加以下内容来设置全部容器的 DNS：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dns&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;114.114.114.114&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;8.8.8.8&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>设置后，启动容器的 DNS 会自动配置为 114.114.114.114 和 8.8.8.8。</p>
<p>配置完，需要重启 docker 才能生效。</p>
<p>查看容器的 DNS 是否生效可以使用以下命令，它会输出容器的 DNS 信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it --rm ubuntu  cat etc/resolv.conf</span><br></pre></td></tr></table></figure>

<h5 id="Docker-Dockerfile"><a href="#Docker-Dockerfile" class="headerlink" title="Docker Dockerfile"></a>Docker Dockerfile</h5><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p>
<h6 id="FROM-和-RUN-指令的作用"><a href="#FROM-和-RUN-指令的作用" class="headerlink" title="FROM 和 RUN 指令的作用"></a>FROM 和 RUN 指令的作用</h6><p><strong>FROM</strong>：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。</p>
<p><strong>RUN</strong>：用于执行后面跟着的命令行命令。有以下俩种格式：</p>
<p>shell 格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">RUN &lt;命令行命令&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。</span></span><br></pre></td></tr></table></figure>

<p>exec 格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">RUN [<span class="string">&quot;./test.php&quot;</span>, <span class="string">&quot;dev&quot;</span>, <span class="string">&quot;offline&quot;</span>] 等价于 RUN ./test.php dev offline</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">RUN yum install wget</span><br><span class="line">RUN wget -O redis.tar.gz &quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span><br><span class="line">RUN tar -xvf redis.tar.gz</span><br></pre></td></tr></table></figure>

<p>以上执行会创建 3 层镜像。可简化为以下格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">RUN yum install wget \</span><br><span class="line">  &amp;&amp; wget -O redis.tar.gz &quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot; \</span><br><span class="line">  &amp;&amp; tar -xvf redis.tar.gz</span><br></pre></td></tr></table></figure>

<p>如上，以 <strong>&amp;&amp;</strong> 符号连接命令，这样执行后，只会创建 1 层镜像。</p>
<h6 id="开始构建镜像"><a href="#开始构建镜像" class="headerlink" title="开始构建镜像"></a>开始构建镜像</h6><p>以下示例，通过目录下的 Dockerfile 构建一个 nginx:test（镜像名称:镜像标签）。</p>
<p><strong>注</strong>：最后的 <strong>.</strong> 代表本次执行的上下文路径.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t nginx:test .</span><br></pre></td></tr></table></figure>

<p>使用<code>docker images</code>查看镜像是否建立成功。</p>
<h6 id="指令详解"><a href="#指令详解" class="headerlink" title="指令详解"></a>指令详解</h6><ol>
<li><p>COPY: 复制指令<code>COPY 原路径 目标路径</code></p>
</li>
<li><p>ADD: 同COPY，如果源文件是tar压缩文件，则会自动复制解压到目标路径。</p>
</li>
<li><p>CMD: 类似于RUN，但CMD是在docker run时运行，RUN是在docker build。<code>CMD shell命令</code></p>
</li>
<li><p>ENTRYPOINT: 类似于 CMD 指令，但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。<code>ENTRYPOINT 可执行命令 参数1...</code></p>
</li>
<li><p>ENV: 设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。</p>
</li>
<li><p>ARG: 构建参数，与 ENV 作用一至。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。<code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]</code></p>
</li>
<li><p>VOLUME: 定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。<code>VOLUME &lt;路径&gt;</code></p>
<p> 作用：</p>
<ul>
<li>避免重要的数据，因容器重启而丢失，这是非常致命的。</li>
<li>避免容器不断变大。</li>
</ul>
</li>
<li><p>EXPOSE: 声明端口。<code>EXPOSE 端口1...</code></p>
</li>
<li><p>WORKDIR: 指定工作目录。<code>WORKDIR &lt;工作目录路径&gt;</code></p>
</li>
<li><p>USER: 用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。<code>USER &lt;用户名&gt;[:&lt;用户组&gt;]</code></p>
</li>
<li><p>HEALTHCHECK: 用于指定某个程序或者指令来监控 docker 容器服务的运行状态。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">HEALTHCHECK [选项] CMD &lt;命令&gt;：设置检查容器健康状况的命令</span><br><span class="line">HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</span><br><span class="line"></span><br><span class="line">HEALTHCHECK [选项] CMD &lt;命令&gt; : 这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。</span><br></pre></td></tr></table></figure>
</li>
<li><p>ONBUILD: 用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这是执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。<code>ONBUILD &lt;其它指令&gt;</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo上传文件失败</title>
    <url>/2022/05/03/hexo%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<p>hexo部署的时候文件过大，导致失败，删除后仍然失败。<span id="more"></span></p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>直接删除<code>.deploy_git</code>目录，然后<code>hexo clean</code>、<code>hexo g -d</code>，正常部署成功。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>java.util.Date和java.sql.Date的区别</title>
    <url>/2022/05/03/java-util-Date%E5%92%8Cjava-sql-Date%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>java.util.Date和java.sql.Date的使用区别。<span id="more"></span></p>
<h4 id="java-sql-Date"><a href="#java-sql-Date" class="headerlink" title="java.sql.Date"></a>java.sql.Date</h4><p><strong>java.sql.Date是java.util.Date的子类</strong>，java.sql.Date(Long long)中的long参数为时间戳，可以有java.util.Date().getTime()获取。</p>
<p>数据库中的Date类型字段对应的就是java.sql.Date类型。</p>
<h4 id="java-util-Date"><a href="#java-util-Date" class="headerlink" title="java.util.Date"></a>java.util.Date</h4><p>java.util.Date适用于Java中的时间类型，可以通过SimpleDateFormat转化各种格式或者获取当前的时间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">java.sql.<span class="type">Date</span> <span class="variable">date2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(date1.getTime());</span><br></pre></td></tr></table></figure>

<p>不能由java.sql.Date得到java.util.Date。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>java.sql.Date主要是用于sql中的！而java.util.Date用语一般的环境下都行！</p>
<p>（惨痛的教训，各种类型的时间格式化）</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java内存模型</title>
    <url>/2022/01/09/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p>JAVA的JVM的内存可分为3个区：堆(heap)、栈(stack)和方法区(method)<span id="more"></span></p>
<h3 id="栈区"><a href="#栈区" class="headerlink" title="栈区"></a>栈区</h3><ol>
<li><strong>每个线程包含一个栈区</strong>，栈中只保存方法中（不包括对象的成员变量）的**基础数据类型和自定义对象的引用(不是对象)**，对象都存放在堆区中</li>
<li>每个栈中的数据(原始类型和对象引用)都是私有的，其他栈不能访问。</li>
<li>栈分为3个部分：基本类型变量区、执行环境上下文、操作指令区(存放操作指令)。</li>
</ol>
<h3 id="堆区"><a href="#堆区" class="headerlink" title="堆区"></a>堆区</h3><ol>
<li>存储的全部是对象实例，每个对象都包含一个与之对应的class的信息(class信息存放在方法区)。</li>
<li><strong>jvm只有一个堆区(heap)被所有线程共享</strong>，堆中不存放基本类型和对象引用，只存放对象本身，几乎所有的<strong>对象实例和数组</strong>都在堆中分配。</li>
</ol>
<h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><ol>
<li><p>又叫静态区，跟堆一样，被所有的线程共享。它用于存储已经被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p>
 <img src="/2022/01/09/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/JavaMemory.png" class></li>
</ol>
]]></content>
      <categories>
        <category>原理</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java取消Double类型显示科学计数法</title>
    <url>/2022/05/03/java%E5%8F%96%E6%B6%88Double%E7%B1%BB%E5%9E%8B%E6%98%BE%E7%A4%BA%E7%A7%91%E5%AD%A6%E8%AE%A1%E6%95%B0%E6%B3%95/</url>
    <content><![CDATA[<p>解决double类型输出科学计数法<span id="more"></span></p>
<p>取消Double类型输出时显示科学计数法问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="string">&quot;1234567890.12&quot;</span>);   </span><br><span class="line">System.out.println(<span class="string">&quot;d:=&quot;</span>+d);  </span><br><span class="line">java.text.<span class="type">NumberFormat</span> <span class="variable">NF</span> <span class="operator">=</span> java.text.NumberFormat.getInstance();   </span><br><span class="line">NF.setGroupingUsed(<span class="literal">false</span>);<span class="comment">//去掉科学计数法显示</span></span><br><span class="line">System.out.println(<span class="string">&quot;d:=&quot;</span>+NF.format(d));</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java字符串模糊匹配</title>
    <url>/2022/05/03/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<p>java中使用字符串模糊查询，可以调用方法也可以使用正则表达式。现在介绍三种解决方案。<span id="more"></span></p>
<h5 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">( String str)</span></span><br></pre></td></tr></table></figure>

<p> 返回指定子字符串在此字符串中第一次出现处的索引。返回的整数是</p>
<p>this.startsWith(str, <em>k</em>)为 <code>true</code> 的最小 <em>k</em> 值。</p>
<p><strong>参数：</strong> <code>str</code> - 任意字符串。</p>
<p><strong>返回：</strong>如果字符串参数作为一个子字符串在此对象中出现，则返回第一个这种子字符串的第一个字符的索引；如果它不作为一个子字符串出现，则返回 <code>-1</code>。</p>
<h5 id="contains"><a href="#contains" class="headerlink" title="contains()"></a>contains()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(CharSequence s)</span></span><br></pre></td></tr></table></figure>

<p>当且仅当此字符串包含指定的 char 值序列时，返回 true。</p>
<p><strong>参数：</strong><code>s</code> - 要搜索的序列（注意：String 类是实现CharSequence(接口的一个实体类）</p>
<p><strong>返回：</strong>如果此字符串包含 <code>s</code>，则返回 true，否则返回 false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Str.contains(<span class="string">&quot;12334&quot;</span>)</span><br></pre></td></tr></table></figure>

<p> 注意：Str字符串中出现字符串“12345”五个字符中的任何一个，那么则返回true;</p>
<h5 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(String regex)</span></span><br></pre></td></tr></table></figure>

<p>告知此字符串是否匹配给定的正则表达式</p>
<p>调用此方法的 <code>str.matches(regex)</code> 形式与以下表达式产生的结果完全相同：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Pattern.matches(regex,str)</span><br></pre></td></tr></table></figure>

<p>参数：<code>regex</code> - 用来匹配此字符串的正则表达式</p>
<p>返回：当且仅当此字符串匹配给定的正则表达式时，返回 <code>true</code></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java导出Excel</title>
    <url>/2022/05/03/java%E5%AF%BC%E5%87%BAExcel/</url>
    <content><![CDATA[<p>Jakarta POI 是一套用于访问微软格式文档的Java API。Jakarta POI有很多组件组成，其中有用于操作Excel格式文件的XSSF和用于操作Word的HWPF，在各种组件中目前只有用于操作Excel的XSSF相对成熟。<span id="more"></span></p>
<p>XSSF只对<code>xls</code>后缀文件格式操作，XSSF可以对<code>xlsx</code>后缀文件格式操作。其他方法只需把<code>H</code>替换成<code>X</code>就可以转换使用。</p>
<blockquote>
<p>官方主页<a href="http://poi.apache.org/index.html">http://poi.apache.org/index.html</a></p>
</blockquote>
<blockquote>
<p>API文档<a href="http://poi.apache.org/apidocs/index.html">http://poi.apache.org/apidocs/index.html</a></p>
</blockquote>
<h5 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 对xls后缀的表格操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 对xlsx后缀的表格操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h5><ol>
<li>XSSFWorkbook：Excel对象，相当于一个 .xls&#x2F;.xlsx 文件</li>
<li>XSSFSheet：工作表对象，Excel文件包涵的sheet，一个对象代表一个表单</li>
<li>XSSFRow：表示表格中的行对象。</li>
<li>XSSFCell：表示表格中的单元格对象。</li>
<li>XSSFHeader：Excel文档Sheet的页眉。</li>
<li>XSSFFooter：Excel文档Sheet的页脚。</li>
<li>XSSFDataFormat：日期格式。</li>
<li>XSSFFont：字体对象。</li>
<li>XSSFCellStyle：单元格样式（对齐样式、边框等）</li>
<li>XSSFComment：批注（注释）。</li>
<li>XSSFPatriarch：和XSSFComment用于创建注释的位置。</li>
<li>XSSFColor：颜色对象。</li>
<li>XSSFDateUtil：日期辅助工具</li>
<li>XSSFPrintSetup：打印辅助工具</li>
<li>XSSFErrorConstants：错误信息表</li>
</ol>
<h5 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h5><h6 id="创建Excel对象"><a href="#创建Excel对象" class="headerlink" title="创建Excel对象"></a>创建Excel对象</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Excel对象</span></span><br><span class="line"><span class="type">XSSFWorkbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br></pre></td></tr></table></figure>

<h6 id="使用workbook-对象创建工作表对象"><a href="#使用workbook-对象创建工作表对象" class="headerlink" title="使用workbook 对象创建工作表对象"></a><strong>使用workbook 对象创建工作表对象</strong></h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建工作表单</span></span><br><span class="line"><span class="type">XSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.createSheet(<span class="string">&quot;对象报表&quot;</span>);  </span><br></pre></td></tr></table></figure>

<h6 id="创建行和操作单元格对象"><a href="#创建行和操作单元格对象" class="headerlink" title="创建行和操作单元格对象"></a>创建行和操作单元格对象</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建XSSFRow对象 （行）</span></span><br><span class="line"><span class="type">XSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>);  </span><br><span class="line"><span class="comment">//创建XSSFCell对象  （单元格）</span></span><br><span class="line">XSSFCell cell=row.createCell(<span class="number">0</span>);  </span><br><span class="line"><span class="comment">//设置单元格的值  </span></span><br><span class="line">cell.setCellValue(<span class="string">&quot;单元格中的中文&quot;</span>);  </span><br></pre></td></tr></table></figure>

<h6 id="保存Excel文件"><a href="#保存Excel文件" class="headerlink" title="保存Excel文件"></a>保存Excel文件</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出Excel文件  </span></span><br><span class="line">FileOutputStream output=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;d:\\workbook.xls&quot;</span>);  </span><br><span class="line">workbook.write(output);  </span><br><span class="line">output.flush();  </span><br></pre></td></tr></table></figure>

<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><h6 id="ExcelUtil工具类"><a href="#ExcelUtil工具类" class="headerlink" title="ExcelUtil工具类"></a>ExcelUtil工具类</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yundao.util;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.poi.XSSF.usermodel.XSSFCell;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.XSSF.usermodel.XSSFCellStyle;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.XSSF.usermodel.XSSFRow;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.XSSF.usermodel.XSSFSheet;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.XSSF.usermodel.XSSFWorkbook;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * excel表格操作工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelUtil</span> &#123;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出Excel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName sheet名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title 标题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exportDataList 内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wb XSSFWorkbook对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> XSSFWorkbook <span class="title function_">getXSSFWorkbook</span><span class="params">(</span></span><br><span class="line"><span class="params">    		String sheetName, String []title, List&lt;Map&lt;String, Object&gt;&gt; exportDataList, XSSFWorkbook wb)</span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 第一步，创建一个XSSFWorkbook，对应一个Excel文件</span></span><br><span class="line">        <span class="keyword">if</span>(wb == <span class="literal">null</span>)&#123;</span><br><span class="line">            wb = <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 第二步，在workbook中添加一个sheet,对应Excel文件中的sheet</span></span><br><span class="line">        <span class="type">XSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> wb.createSheet(sheetName);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 第三步，在sheet中添加表头第0行,注意老版本poi对Excel的行数列数有限制</span></span><br><span class="line">        <span class="type">XSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 第四步，创建单元格，并设置值表头 设置表头居中</span></span><br><span class="line">        <span class="type">XSSFCellStyle</span> <span class="variable">style</span> <span class="operator">=</span> wb.createCellStyle();</span><br><span class="line">        style.setAlignment(HorizontalAlignment.CENTER); <span class="comment">// 创建一个居中格式</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">//声明列对象</span></span><br><span class="line">        <span class="type">XSSFCell</span> <span class="variable">cell</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//创建标题</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;title.length;i++)&#123;</span><br><span class="line">            cell = row.createCell(i);</span><br><span class="line">            cell.setCellValue(title[i]);</span><br><span class="line">            cell.setCellStyle(style);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//创建内容</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;exportDataList.size();i++)&#123;</span><br><span class="line">            row = sheet.createRow(i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;exportDataList.get(i).size();j++)&#123;</span><br><span class="line">                <span class="comment">//将内容按顺序赋给对应的列对象</span></span><br><span class="line">                row.createCell(j).setCellValue(exportDataList.get(i).get(j+<span class="string">&quot;&quot;</span>)+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> wb;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="主代码"><a href="#主代码" class="headerlink" title="主代码"></a>主代码</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.poi.XSSF.usermodel.XSSFWorkbook;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导出数据到excel</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;exportExcel&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">exportExcel</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获取导出到excel 的数据</span></span><br><span class="line">        <span class="comment">//sql查询的时候，要将查询出的每个字段起个别名 别名的格式必须是 从0开始依次递增</span></span><br><span class="line">        <span class="comment">//例如 select id &#x27;0&#x27;, userName &#x27;1&#x27;, userPhone &#x27;2&#x27;, userAddress &#x27;3&#x27;  from user </span></span><br><span class="line"></span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; exportDataList = demoService.getExportData(request,response);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置excel标题   查询几个字段，就写几个标题，标题顺序跟0123对应</span></span><br><span class="line">        String[] title = &#123;<span class="string">&quot;编号&quot;</span>,<span class="string">&quot;用户姓名&quot;</span>,<span class="string">&quot;用户电话&quot;</span>,<span class="string">&quot;用户地址&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//excel文件名 </span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMddHHmmss&quot;</span>);<span class="comment">// 设置日期格式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> df.format(<span class="keyword">new</span> <span class="title class_">Date</span>())+<span class="string">&quot;.xls&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sheet名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sheetName</span> <span class="operator">=</span> <span class="string">&quot;自主设置&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建XSSFWorkbook </span></span><br><span class="line">        <span class="type">XSSFWorkbook</span> <span class="variable">wb</span> <span class="operator">=</span> ExcelUtil.getXSSFWorkbook(sheetName, title, exportDataList, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//响应到客户端</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileName = <span class="keyword">new</span> <span class="title class_">String</span>(fileName.getBytes(),<span class="string">&quot;ISO8859-1&quot;</span>);</span><br><span class="line">            <span class="comment">//xlsx格式</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>);</span><br><span class="line">            <span class="comment">//xls格式</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span>+ fileName);</span><br><span class="line">            response.addHeader(<span class="string">&quot;Pargam&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">            response.addHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">            wb.write(os);</span><br><span class="line">            os.flush();</span><br><span class="line">            os.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        log.debug(<span class="string">&quot;exportExcel接口异常&quot;</span>, e);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="个性化导出——样式设置"><a href="#个性化导出——样式设置" class="headerlink" title="个性化导出——样式设置"></a>个性化导出——样式设置</h5><h6 id="合并单元格，设置宽、高"><a href="#合并单元格，设置宽、高" class="headerlink" title="合并单元格，设置宽、高"></a>合并单元格，设置宽、高</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//合并单元格前3列</span></span><br><span class="line">sheet.addMergedRegion(<span class="keyword">new</span> <span class="title class_">CellRangeAddress</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>)); </span><br><span class="line"><span class="comment">//CellRangeAddress参数:起始行，截至行，起始列， 截至列  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置缺省列高  </span></span><br><span class="line">sheet.setDefaultRowHeightInPoints(<span class="number">20</span>);</span><br><span class="line"><span class="comment">//设置缺省列宽</span></span><br><span class="line">sheet.setDefaultColumnWidth(<span class="number">30</span>);</span><br><span class="line"><span class="comment">//自定义300 * 60</span></span><br><span class="line">sheet.setColumnWidth(cell.getColumnIndex(), <span class="number">300</span> * <span class="number">60</span>);  </span><br></pre></td></tr></table></figure>

<h6 id="设置单元格样式"><a href="#设置单元格样式" class="headerlink" title="设置单元格样式"></a>设置单元格样式</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化样式对象</span></span><br><span class="line"><span class="type">XSSFCellStyle</span> <span class="variable">cellStyle</span> <span class="operator">=</span> workbook.createCellStyle(); </span><br><span class="line"><span class="comment">// 两端对齐</span></span><br><span class="line">cellStyle.setAlignment(XSSFCellStyle.ALIGN_JUSTIFY); </span><br><span class="line"><span class="comment">// 垂直居中</span></span><br><span class="line">cellStyle.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);   </span><br><span class="line"><span class="comment">// 填充图案---填充方式</span></span><br><span class="line">cellStyle.setFillPattern(XSSFCellStyle.DIAMONDS);  </span><br><span class="line"><span class="comment">// 设置前景色  （这个要写在背景色的前面）</span></span><br><span class="line">cellStyle.setFillForegroundColor(XSSFColor.RED.index);  </span><br><span class="line"><span class="comment">// 设置背景颜色  </span></span><br><span class="line">cellStyle.setFillBackgroundColor(XSSFColor.LIGHT_YELLOW.index);  </span><br><span class="line"><span class="comment">// 设置边框</span></span><br><span class="line">cellStyle.setBorderBottom(XSSFCellStyle.BORDER_SLANTED_DASH_DOT);  </span><br><span class="line"><span class="comment">// 边框颜色</span></span><br><span class="line">cellStyle.setBottomBorderColor(XSSFColor.DARK_RED.index);  </span><br><span class="line"><span class="comment">// 日期展示格式 </span></span><br><span class="line">cellStyle.setDataFormat(XSSFDataFormat.getBuiltinFormat(<span class="string">&quot;m/d/yy h:mm&quot;</span>));   </span><br><span class="line"></span><br><span class="line"><span class="comment">//将样式应用于单元格</span></span><br><span class="line">cell.setCellStyle(cellStyle);  </span><br><span class="line"><span class="comment">//将样式应用到行  </span></span><br><span class="line">row.setRowStyle(cellStyle);  </span><br></pre></td></tr></table></figure>

<h6 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化字体对象</span></span><br><span class="line"><span class="type">XSSFFont</span> <span class="variable">fontStyle</span> <span class="operator">=</span> workbook.createFont();  </span><br><span class="line"><span class="comment">// 字体</span></span><br><span class="line">fontStyle.setFontName(<span class="string">&quot;宋体&quot;</span>);    </span><br><span class="line"><span class="comment">// 高度  </span></span><br><span class="line">fontStyle.setFontHeightInPoints((<span class="type">short</span>)<span class="number">12</span>);    </span><br><span class="line"><span class="comment">// 字体  </span></span><br><span class="line">font.setColor(XSSFColor.BLUE.index);  </span><br><span class="line"><span class="comment">// 加粗  </span></span><br><span class="line">fontStyle.setBoldweight(XSSFFont.BOLDWEIGHT_BOLD);  </span><br><span class="line"><span class="comment">// 斜体   </span></span><br><span class="line">font.setItalic(<span class="literal">true</span>);  </span><br><span class="line"><span class="comment">// 下划线  </span></span><br><span class="line">font.setUnderline(XSSFFont.U_SINGLE);  </span><br><span class="line"><span class="comment">// 将字体应用于单元格样式中</span></span><br><span class="line">cellStyle.setFont(font);    </span><br></pre></td></tr></table></figure>

<h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><h6 id="导出Excel工具类"><a href="#导出Excel工具类" class="headerlink" title="导出Excel工具类"></a>导出Excel工具类</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportExcel</span><span class="params">(String title, String[] headers, Collection&lt;T&gt; dataset, OutputStream out, String pattern,XSSFWorkbook workbook)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">// 声明一个工作薄   生成一个表格  </span></span><br><span class="line">        <span class="type">XSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.getSheet(title);</span><br><span class="line">        <span class="comment">// 设置表格默认列宽度为15个字节  </span></span><br><span class="line">        sheet.setDefaultColumnWidth((<span class="type">short</span>) <span class="number">15</span>);  </span><br><span class="line">        <span class="comment">// 生成一个样式  </span></span><br><span class="line">        <span class="type">XSSFCellStyle</span> <span class="variable">style</span> <span class="operator">=</span> workbook.createCellStyle();  </span><br><span class="line">        <span class="comment">// 设置这些样式  </span></span><br><span class="line">        style.setFillForegroundColor(XSSFColor.SKY_BLUE.index);  </span><br><span class="line">        style.setFillPattern(XSSFCellStyle.SOLID_FOREGROUND);  </span><br><span class="line">        style.setBorderBottom(XSSFCellStyle.BORDER_THIN);  </span><br><span class="line">        style.setBorderLeft(XSSFCellStyle.BORDER_THIN);  </span><br><span class="line">        style.setBorderRight(XSSFCellStyle.BORDER_THIN);  </span><br><span class="line">        style.setBorderTop(XSSFCellStyle.BORDER_THIN);  </span><br><span class="line">        style.setAlignment(XSSFCellStyle.ALIGN_CENTER);  </span><br><span class="line">        <span class="comment">// 生成一个字体  </span></span><br><span class="line">        <span class="type">XSSFFont</span> <span class="variable">font</span> <span class="operator">=</span> workbook.createFont();  </span><br><span class="line">        font.setColor(XSSFColor.VIOLET.index);  </span><br><span class="line">        font.setFontHeightInPoints((<span class="type">short</span>) <span class="number">12</span>);  </span><br><span class="line">        font.setBoldweight(XSSFFont.BOLDWEIGHT_BOLD);  </span><br><span class="line">        <span class="comment">// 把字体应用到当前的样式  </span></span><br><span class="line">        style.setFont(font);  </span><br><span class="line">        <span class="comment">// 生成并设置另一个样式  </span></span><br><span class="line">        <span class="type">XSSFCellStyle</span> <span class="variable">style2</span> <span class="operator">=</span> workbook.createCellStyle();  </span><br><span class="line">        style2.setFillForegroundColor(XSSFColor.LIGHT_YELLOW.index);  </span><br><span class="line">        style2.setFillPattern(XSSFCellStyle.SOLID_FOREGROUND);  </span><br><span class="line">        style2.setBorderBottom(XSSFCellStyle.BORDER_THIN);  </span><br><span class="line">        style2.setBorderLeft(XSSFCellStyle.BORDER_THIN);  </span><br><span class="line">        style2.setBorderRight(XSSFCellStyle.BORDER_THIN);  </span><br><span class="line">        style2.setBorderTop(XSSFCellStyle.BORDER_THIN);  </span><br><span class="line">        style2.setAlignment(XSSFCellStyle.ALIGN_CENTER);  </span><br><span class="line">        style2.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);  </span><br><span class="line">        <span class="comment">// 生成另一个字体  </span></span><br><span class="line">        <span class="type">XSSFFont</span> <span class="variable">font2</span> <span class="operator">=</span> workbook.createFont();  </span><br><span class="line">        font2.setBoldweight(XSSFFont.BOLDWEIGHT_NORMAL);  </span><br><span class="line">        <span class="comment">// 把字体应用到当前的样式  </span></span><br><span class="line">        style2.setFont(font2);  </span><br><span class="line">        <span class="comment">// 声明一个画图的顶级管理器  </span></span><br><span class="line">        <span class="type">XSSFPatriarch</span> <span class="variable">patriarch</span> <span class="operator">=</span> sheet.createDrawingPatriarch();  </span><br><span class="line">        <span class="comment">// 定义注释的大小和位置,详见文档  </span></span><br><span class="line">        <span class="type">XSSFComment</span> <span class="variable">comment</span> <span class="operator">=</span> patriarch.createComment(<span class="keyword">new</span> <span class="title class_">XSSFClientAnchor</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, (<span class="type">short</span>) <span class="number">4</span>, <span class="number">2</span>, (<span class="type">short</span>) <span class="number">6</span>, <span class="number">5</span>));  </span><br><span class="line">        <span class="comment">// 设置注释内容  </span></span><br><span class="line">        comment.setString(<span class="keyword">new</span> <span class="title class_">XSSFRichTextString</span>(<span class="string">&quot;可以在POI中添加注释！&quot;</span>));  </span><br><span class="line">        <span class="comment">// 设置注释作者，当鼠标移动到单元格上是可以在状态栏中看到该内容.  </span></span><br><span class="line">        comment.setAuthor(<span class="string">&quot;leno&quot;</span>);  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 产生表格标题行  </span></span><br><span class="line">        <span class="type">XSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>);  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">short</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; headers.length; i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="type">XSSFCell</span> <span class="variable">cell</span> <span class="operator">=</span> row.createCell(i);  </span><br><span class="line">            cell.setCellStyle(style);  </span><br><span class="line">            <span class="type">XSSFRichTextString</span> <span class="variable">text</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFRichTextString</span>(headers[i]);  </span><br><span class="line">            cell.setCellValue(text);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">// 遍历集合数据，产生数据行  </span></span><br><span class="line">        Iterator&lt;T&gt; it = dataset.iterator();  </span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())  </span><br><span class="line">        &#123;  </span><br><span class="line">            index++;  </span><br><span class="line">            row = sheet.createRow(index);  </span><br><span class="line">            <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> (T) it.next();  </span><br><span class="line">            <span class="comment">// 利用反射，根据javabean属性的先后顺序，动态调用getXxx()方法得到属性值  </span></span><br><span class="line">            Field[] fields = t.getClass().getDeclaredFields();  </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">short</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; fields.length; i++)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="type">XSSFCell</span> <span class="variable">cell</span> <span class="operator">=</span> row.createCell(i);  </span><br><span class="line">                cell.setCellStyle(style2);  </span><br><span class="line">                <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> fields[i];  </span><br><span class="line">                <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> field.getName();  </span><br><span class="line">                <span class="type">String</span> <span class="variable">getMethodName</span> <span class="operator">=</span> <span class="string">&quot;get&quot;</span> + fieldName.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + fieldName.substring(<span class="number">1</span>);  </span><br><span class="line">                <span class="keyword">try</span>  </span><br><span class="line">                &#123;  </span><br><span class="line">                    <span class="type">Class</span> <span class="variable">tCls</span> <span class="operator">=</span> t.getClass();  </span><br><span class="line">                    <span class="type">Method</span> <span class="variable">getMethod</span> <span class="operator">=</span> tCls.getMethod(getMethodName, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;&#125;);  </span><br><span class="line">                    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> getMethod.invoke(t, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;&#125;);  </span><br><span class="line">                    <span class="comment">// 判断值的类型后进行强制类型转换  </span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">textValue</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">                    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Boolean)  </span><br><span class="line">                    &#123;  </span><br><span class="line">                        <span class="type">boolean</span> <span class="variable">bValue</span> <span class="operator">=</span> (Boolean) value;  </span><br><span class="line">                        textValue = <span class="string">&quot;男&quot;</span>;  </span><br><span class="line">                        <span class="keyword">if</span> (!bValue)  </span><br><span class="line">                        &#123;  </span><br><span class="line">                            textValue = <span class="string">&quot;女&quot;</span>;  </span><br><span class="line">                        &#125;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Date)  </span><br><span class="line">                    &#123;  </span><br><span class="line">                        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> (Date) value;  </span><br><span class="line">                        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(pattern);  </span><br><span class="line">                        textValue = sdf.format(date);  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="type">byte</span>[])  </span><br><span class="line">                    &#123;  </span><br><span class="line">                        <span class="comment">// 有图片时，设置行高为60px;  </span></span><br><span class="line">                        row.setHeightInPoints(<span class="number">60</span>);  </span><br><span class="line">                        <span class="comment">// 设置图片所在列宽度为80px,注意这里单位的一个换算  </span></span><br><span class="line">                        sheet.setColumnWidth(i, (<span class="type">short</span>) (<span class="number">35.7</span> * <span class="number">80</span>));  </span><br><span class="line">                        <span class="comment">// sheet.autoSizeColumn(i);  </span></span><br><span class="line">                        <span class="type">byte</span>[] bsValue = (<span class="type">byte</span>[]) value;  </span><br><span class="line">                        <span class="type">XSSFClientAnchor</span> <span class="variable">anchor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFClientAnchor</span>(<span class="number">0</span>, <span class="number">0</span>,<span class="number">1023</span>, <span class="number">255</span>, (<span class="type">short</span>) <span class="number">6</span>, index, (<span class="type">short</span>) <span class="number">6</span>, index);  </span><br><span class="line">                        anchor.setAnchorType(<span class="number">2</span>);  </span><br><span class="line">                        patriarch.createPicture(anchor, workbook.addPicture(bsValue, XSSFWorkbook.PICTURE_TYPE_JPEG));  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    <span class="keyword">else</span>  </span><br><span class="line">                    &#123;  </span><br><span class="line">                        <span class="comment">// 其它数据类型都当作字符串简单处理  </span></span><br><span class="line">                        textValue = value == <span class="literal">null</span>? <span class="string">&quot;&quot;</span>: value.toString();  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    <span class="comment">// 如果不是图片数据，就利用正则表达式判断textValue是否全部由数字组成  </span></span><br><span class="line">                    <span class="keyword">if</span> (textValue != <span class="literal">null</span>)  </span><br><span class="line">                    &#123;  </span><br><span class="line">                        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;^//d+(//.//d+)?$&quot;</span>);  </span><br><span class="line">                        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> p.matcher(textValue);  </span><br><span class="line">                        <span class="keyword">if</span> (matcher.matches())  </span><br><span class="line">                        &#123;  </span><br><span class="line">                            <span class="comment">// 是数字当作double处理  </span></span><br><span class="line">                            cell.setCellValue(Double.parseDouble(textValue));  </span><br><span class="line">                        &#125;  </span><br><span class="line">                        <span class="keyword">else</span>  </span><br><span class="line">                        &#123;  </span><br><span class="line">                            <span class="type">XSSFRichTextString</span> <span class="variable">richString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFRichTextString</span>(textValue);  </span><br><span class="line">                            <span class="type">XSSFFont</span> <span class="variable">font3</span> <span class="operator">=</span> workbook.createFont();  </span><br><span class="line">                            font3.setColor(XSSFColor.BLUE.index);  </span><br><span class="line">                            richString.applyFont(font3);  </span><br><span class="line">                            cell.setCellValue(richString);  </span><br><span class="line">                        &#125;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">catch</span> (SecurityException e)  </span><br><span class="line">                &#123;  </span><br><span class="line">                    e.printStackTrace();  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">catch</span> (NoSuchMethodException e)  </span><br><span class="line">                &#123;  </span><br><span class="line">                    e.printStackTrace();  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">catch</span> (IllegalArgumentException e)  </span><br><span class="line">                &#123;  </span><br><span class="line">                    e.printStackTrace();  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">catch</span> (IllegalAccessException e)  </span><br><span class="line">                &#123;  </span><br><span class="line">                    e.printStackTrace();  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">catch</span> (InvocationTargetException e)  </span><br><span class="line">                &#123;  </span><br><span class="line">                    e.printStackTrace();  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">finally</span>  </span><br><span class="line">                &#123;  </span><br><span class="line">                    <span class="comment">// 清理资源  </span></span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>

<h6 id="主代码-1"><a href="#主代码-1" class="headerlink" title="主代码"></a>主代码</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用于导出的数据集合</span></span><br><span class="line">List&lt;PBillBean&gt; dataset = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;PBillBean&gt;();</span><br><span class="line"><span class="comment">//填充dataset</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="type">PBillBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PBillBean</span>();</span><br><span class="line">    dataset.add(bean);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//临时文件</span></span><br><span class="line"><span class="type">File</span> <span class="variable">tempFile</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//Excel导出工具类</span></span><br><span class="line">    ExportExcel&lt;PBillBean&gt; ex = <span class="keyword">new</span> <span class="title class_">ExportExcel</span>&lt;PBillBean&gt;();</span><br><span class="line">    <span class="comment">//导出的标题列</span></span><br><span class="line">    String[] headers = &#123; <span class="string">&quot;标题1&quot;</span>, <span class="string">&quot;标题2&quot;</span>, <span class="string">&quot;标题3&quot;</span>, <span class="string">&quot;标题4&quot;</span>,    <span class="string">&quot;标题5&quot;</span>, <span class="string">&quot;标题6&quot;</span> &#125;;</span><br><span class="line">    <span class="comment">//时间格式化</span></span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMddHHmmss&quot;</span>);</span><br><span class="line">    <span class="comment">//要保存的文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> <span class="string">&quot;bill_&quot;</span> + format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()) + <span class="string">&quot;.xls&quot;</span>;</span><br><span class="line">    <span class="comment">//要保存的根目录</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">rootDir</span> <span class="operator">=</span> request.getSession().getServletContext().getRealPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    <span class="comment">//要保存的目录路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> rootDir + File.separator + <span class="string">&quot;tempfile&quot;</span>;</span><br><span class="line">    <span class="type">File</span> <span class="variable">saveDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">    <span class="keyword">if</span> (!saveDir.exists()) &#123;</span><br><span class="line">        saveDir.mkdirs();<span class="comment">// 如果文件不存在则创建文件夹</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//文件路径</span></span><br><span class="line">    path = path + File.separator + filename;</span><br><span class="line">    tempFile = <span class="keyword">new</span> <span class="title class_">File</span>(path);   <span class="comment">//初始化临时文件</span></span><br><span class="line">    <span class="comment">//输出流</span></span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(tempFile);</span><br><span class="line">    <span class="comment">//实例化Excel表格</span></span><br><span class="line">    <span class="type">XSSFWorkbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br><span class="line">    <span class="comment">//创建工作表单</span></span><br><span class="line">    String[] sheetNames = &#123; <span class="string">&quot;对账报表&quot;</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sheetNames.length; i++) &#123;</span><br><span class="line">        workbook.createSheet(sheetNames[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//导出到Excel</span></span><br><span class="line">    ex.exportExcel(sheetNames[<span class="number">0</span>], headers, dataset, out,</span><br><span class="line">                   <span class="string">&quot;yyyy-MM-dd HH:mm&quot;</span>, workbook);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//保存文件</span></span><br><span class="line">        workbook.write(out);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    out.close();</span><br><span class="line">    <span class="comment">// 以流的形式下载文件。</span></span><br><span class="line">    <span class="type">BufferedInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(path));</span><br><span class="line">    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[fis.available()];</span><br><span class="line">    fis.read(buffer);</span><br><span class="line">    fis.close();</span><br><span class="line">    <span class="comment">// 清空response</span></span><br><span class="line">    response.reset();</span><br><span class="line">    <span class="comment">// 设置response的Header</span></span><br><span class="line">    response.addHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span></span><br><span class="line">                       + <span class="keyword">new</span> <span class="title class_">String</span>(filename.getBytes()));</span><br><span class="line">    response.addHeader(<span class="string">&quot;Content-Length&quot;</span>, <span class="string">&quot;&quot;</span> + tempFile.length());</span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">toClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(</span><br><span class="line">        response.getOutputStream());</span><br><span class="line">    response.setContentType(<span class="string">&quot;application/vnd.ms-excel;charset=utf-8&quot;</span>);</span><br><span class="line">    toClient.write(buffer);</span><br><span class="line">    toClient.flush();</span><br><span class="line">    toClient.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (tempFile != <span class="literal">null</span> &amp;&amp; tempFile.exists()) &#123;</span><br><span class="line">        tempFile.delete();<span class="comment">// 删除临时文件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testXSSF</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//  创建一个工作簿</span></span><br><span class="line">        <span class="type">XSSFWorkbook</span> <span class="variable">wb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br><span class="line">        <span class="comment">//  创建一个工作表</span></span><br><span class="line">        <span class="type">XSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> wb.createSheet();</span><br><span class="line">        <span class="comment">//  创建字体</span></span><br><span class="line">        <span class="type">XSSFFont</span> <span class="variable">font1</span> <span class="operator">=</span> wb.createFont();</span><br><span class="line">        <span class="type">XSSFFont</span> <span class="variable">font2</span> <span class="operator">=</span> wb.createFont();</span><br><span class="line">        font1.setFontHeightInPoints((<span class="type">short</span>) <span class="number">14</span>);</span><br><span class="line">        font1.setColor(XSSFColor.XSSFColorPredefined.RED.getIndex());</span><br><span class="line">        font2.setFontHeightInPoints((<span class="type">short</span>) <span class="number">12</span>);</span><br><span class="line">        font2.setColor(XSSFColor.XSSFColorPredefined.BLUE.getIndex());</span><br><span class="line">        <span class="comment">//  创建单元格样式</span></span><br><span class="line">        <span class="type">XSSFCellStyle</span> <span class="variable">css1</span> <span class="operator">=</span> wb.createCellStyle();</span><br><span class="line">        <span class="type">XSSFCellStyle</span> <span class="variable">css2</span> <span class="operator">=</span> wb.createCellStyle();</span><br><span class="line">        <span class="type">XSSFDataFormat</span> <span class="variable">df</span> <span class="operator">=</span> wb.createDataFormat();</span><br><span class="line">        <span class="comment">//  设置单元格字体及格式</span></span><br><span class="line">        css1.setFont(font1);</span><br><span class="line">        css1.setDataFormat(df.getFormat(<span class="string">&quot;#,##0.0&quot;</span>));</span><br><span class="line">        css2.setFont(font2);</span><br><span class="line">        css2.setDataFormat(XSSFDataFormat.getBuiltinFormat(<span class="string">&quot;text&quot;</span>));</span><br><span class="line">        <span class="comment">//  创建行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="type">XSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j = j + <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="type">XSSFCell</span> <span class="variable">cell</span> <span class="operator">=</span> row.createCell(j);</span><br><span class="line">                cell.setCellValue(<span class="string">&quot;Spring&quot;</span>);</span><br><span class="line">                cell.setCellStyle(css1);</span><br><span class="line"></span><br><span class="line">                <span class="type">XSSFCell</span> <span class="variable">cell2</span> <span class="operator">=</span> row.createCell(j+<span class="number">1</span>);</span><br><span class="line">                cell2.setCellValue(<span class="keyword">new</span> <span class="title class_">XSSFRichTextString</span>(<span class="string">&quot;Hello! &quot;</span> + j));</span><br><span class="line">                cell2.setCellStyle(css2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  写文件</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;F:/wb.xls&quot;</span>);</span><br><span class="line">        wb.write(fos);</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java异常</title>
    <url>/2022/05/03/java%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<p>java中的异常分类及区别<span id="more"></span></p>
<table>
<thead>
<tr>
<th><strong>异常类</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>NullPointerException</td>
<td>空指针异常</td>
</tr>
<tr>
<td>ArrayIndexOutOfBoundsException</td>
<td>数组越界访问异常</td>
</tr>
<tr>
<td>IOException</td>
<td>输入\输出异常</td>
</tr>
<tr>
<td>NumberFormatException</td>
<td>错误的类型转换异常</td>
</tr>
<tr>
<td>ArrayStoreException</td>
<td>当向数组存入错误类型数据时</td>
</tr>
<tr>
<td>ClassNotFoundException</td>
<td>试图访问一个根本不存在的类</td>
</tr>
<tr>
<td>ArithmeticException</td>
<td>除数为0的算术异常</td>
</tr>
</tbody></table>
<h4 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h4><p>Error属于程序无法处理的错误，是JVM需要负担的责任，无法通过try-catch来进行捕获。例如，系统崩溃，内存不足，堆栈溢出等，编译器不会对这类错误进行检测，一旦这类错误发生，通常应用程序会被终止，仅靠应用程序本身无法恢复。</p>
<p>比如StackOverFlowError；VirtualMachineError；OutofMemoryError；ThreadDeath</p>
<h4 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h4><p>程序本身可以处理的异常，可以通过catch来进行捕获，通常遇到这种错误，应对其进行处理，使应用程序可以继续正常运行。</p>
<p>Exception又可以分为运行时异常（RuntimeException，又叫非受检查异常unchecked Exception）和非运行时异常（又叫受检查异常checked Exception）。</p>
<h5 id="checked-Exception"><a href="#checked-Exception" class="headerlink" title="checked Exception"></a>checked Exception</h5><p>就是在写代码的时候，需要写try catch的Exception，这种Exception一般不会影响主体程序，可以由程序员手动诊断修复异常。比如IOException；SQLException；ClassNotFoundException。</p>
<h5 id="unchecked-Exception"><a href="#unchecked-Exception" class="headerlink" title="unchecked Exception"></a>unchecked Exception</h5><p>又称RunTimeException，这一类就是在代码处理了checked Exception之后，运行时候仍然会遇到的Exception。</p>
<p>比如NullPointerException；ClassCastException；ArithmeticException；IllegalArgumentException；IndexOutOfBoundsException（包括ArrayIndexOutofBoundsExcpetion；StringIndexOutofBoundsExcpetion）；NumberFormatException。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java生成docx模板</title>
    <url>/2022/05/03/java%E7%94%9F%E6%88%90docx%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>java生成文档(docx)模板，设置各种属性。<span id="more"></span></p>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>保持jar版本一致</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="poi中各个jar包的作用"><a href="#poi中各个jar包的作用" class="headerlink" title="poi中各个jar包的作用"></a>poi中各个jar包的作用</h4><table>
<thead>
<tr>
<th>Maven artifactId</th>
<th>Prerequisites</th>
<th>JAR</th>
</tr>
</thead>
<tbody><tr>
<td>poi</td>
<td>commons-logging, commons-codec, log4j</td>
<td>poi-version-yyyymmdd.jar</td>
</tr>
<tr>
<td>poi-scratchpad</td>
<td>poi</td>
<td>poi-scratchpad-version-yyyymmdd.jar</td>
</tr>
<tr>
<td>poi-ooxml</td>
<td>poi, poi-ooxml-schemas</td>
<td>poi-ooxml-version-yyyymmdd.jar</td>
</tr>
<tr>
<td>poi-ooxml-schemas</td>
<td>xmlbeans</td>
<td>poi-ooxml-schemas-version-yyyymmdd.jar</td>
</tr>
<tr>
<td>poi-examples</td>
<td>poi, poi-scratchpad, poi-ooxml</td>
<td>poi-examples-version-yyyymmdd.jar</td>
</tr>
<tr>
<td>ooxml-schemas</td>
<td>xmlbeans</td>
<td>ooxml-schemas-1.1.jar</td>
</tr>
</tbody></table>
<h4 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h4><table>
<thead>
<tr>
<th>Component</th>
<th>Application type</th>
<th>Maven artifactId</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://poi.apache.org/poifs/index.html">POIFS</a></td>
<td>OLE2 Filesystem</td>
<td><em>poi</em></td>
</tr>
<tr>
<td><a href="http://poi.apache.org/hpsf/index.html">HPSF</a></td>
<td>OLE2 Property Sets</td>
<td>poi</td>
</tr>
<tr>
<td><a href="http://poi.apache.org/spreadsheet/index.html">HSSF</a></td>
<td>Excel XLS</td>
<td>poi</td>
</tr>
<tr>
<td><a href="http://poi.apache.org/slideshow/index.html">HSLF</a></td>
<td>PowerPoint PPT</td>
<td>poi-scratchpad</td>
</tr>
<tr>
<td><a href="http://poi.apache.org/document/index.html">HWPF</a></td>
<td>Word DOC</td>
<td>poi-scratchpad</td>
</tr>
<tr>
<td><a href="http://poi.apache.org/hdgf/index.html">HDGF</a></td>
<td>Visio VSD</td>
<td>poi-scratchpad</td>
</tr>
<tr>
<td><a href="http://poi.apache.org/hpbf/index.html">HPBF</a></td>
<td>Publisher PUB</td>
<td>poi-scratchpad</td>
</tr>
<tr>
<td><a href="http://poi.apache.org/hsmf/index.html">HSMF</a></td>
<td>Outlook MSG</td>
<td>poi-scratchpad</td>
</tr>
<tr>
<td><a href="http://poi.apache.org/oxml4j/index.html">OpenXML4J</a></td>
<td>OOXML</td>
<td>poi-ooxml plus one of poi-ooxml-schemas, ooxml-schemas</td>
</tr>
<tr>
<td><a href="http://poi.apache.org/spreadsheet/index.html">XSSF</a></td>
<td>Excel XLSX</td>
<td>poi-ooxml</td>
</tr>
<tr>
<td><a href="http://poi.apache.org/slideshow/index.html">XSLF</a></td>
<td>PowerPoint PPTX</td>
<td>poi-ooxml</td>
</tr>
<tr>
<td><a href="http://poi.apache.org/document/index.html">XWPF</a></td>
<td>Word DOCX</td>
<td>poi-ooxml</td>
</tr>
<tr>
<td><a href="http://poi.apache.org/spreadsheet/index.html">Common SS</a></td>
<td>Excel XLS and XLSX</td>
<td>poi-ooxml</td>
</tr>
</tbody></table>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文档对象</span></span><br><span class="line"><span class="type">XWPFDocument</span> <span class="variable">xwpfd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XWPFDocument</span>();</span><br><span class="line"><span class="comment">//创建段落</span></span><br><span class="line"><span class="type">XWPFParagraph</span> <span class="variable">xwpfP</span> <span class="operator">=</span> xwpfd.createParagraph();</span><br><span class="line"><span class="comment">//创建文本对象</span></span><br><span class="line"><span class="type">XWPFRun</span> <span class="variable">xwpfRun</span> <span class="operator">=</span> xwpfP.createRun();</span><br></pre></td></tr></table></figure>

<h4 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认：宋体（wps）/等线（office2016） 5号 两端对齐 单倍间距</span></span><br><span class="line">xwpfRun.setText(<span class="string">&quot;舜发于畎亩之中， 傅说举于版筑之间， 胶鬲举于鱼盐之中， 管夷吾举于士...&quot;</span>);</span><br><span class="line">xwpfRun.setBold(<span class="literal">false</span>);<span class="comment">//加粗</span></span><br><span class="line">xwpfRun.setColor(<span class="string">&quot;BED4F1&quot;</span>);<span class="comment">//设置颜色--十六进制</span></span><br><span class="line">xwpfRun.setDoubleStrikethrough(<span class="literal">false</span>);<span class="comment">//双删除线</span></span><br><span class="line">xwpfRun.setEmbossed(<span class="literal">false</span>);<span class="comment">//浮雕字体----效果和印记（悬浮阴影）类似</span></span><br><span class="line">xwpfRun.setFontFamily(<span class="string">&quot;宋体&quot;</span>);<span class="comment">//字体</span></span><br><span class="line">xwpfRun.setFontFamily(<span class="string">&quot;华文新魏&quot;</span>, FontCharRange.cs);<span class="comment">//字体，范围----效果不详</span></span><br><span class="line">xwpfRun.setFontSize(<span class="number">14</span>);<span class="comment">//字体大小</span></span><br><span class="line">xwpfRun.setImprinted(<span class="literal">false</span>);<span class="comment">//印迹（悬浮阴影）---效果和浮雕类似</span></span><br><span class="line">xwpfRun.setItalic(<span class="literal">false</span>);<span class="comment">//斜体（字体倾斜）</span></span><br><span class="line">xwpfRun.setStrikeThrough(<span class="literal">false</span>);<span class="comment">//单删除线（新的替换Strike）</span></span><br><span class="line">xwpfRun.setSubscript(VerticalAlign.SUBSCRIPT);<span class="comment">//下标(吧当前这个run变成下标)---枚举</span></span><br><span class="line">xwpfRun.setTextPosition(<span class="number">20</span>);<span class="comment">//设置两行之间的行间距</span></span><br><span class="line">xwpfRun.setUnderline(UnderlinePatterns.DASH_LONG);<span class="comment">//各种类型的下划线（枚举）</span></span><br><span class="line">xwpfRun.addBreak();<span class="comment">// 类似换行的操作（html的  br标签）</span></span><br><span class="line">xwpfRun.addTab();<span class="comment">// tab键</span></span><br><span class="line">xwpfRun.addCarriageReturn();</span><br><span class="line"><span class="comment">// 回车键注意：addTab()和addCarriageReturn() 对setText()的使用先后顺序有关：比如先执行addTab,再写Text这是对当前这个Text的Table，反之是对下一个run的Text的Tab效果</span></span><br></pre></td></tr></table></figure>

<h4 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;F:\\WordTest&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;WordWrite.docx&quot;</span>;</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    stream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(file, fileName));</span><br><span class="line">    xwpfd.write(stream);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stream != <span class="literal">null</span>) &#123;</span><br><span class="line">            stream.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xwpf.usermodel.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> kuang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/3 22:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WordTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">generateDoc</span><span class="params">(JSONObject jsonObject)</span> &#123;</span><br><span class="line">        <span class="type">XWPFDocument</span> <span class="variable">xwpfd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XWPFDocument</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建段落</span></span><br><span class="line">        <span class="type">XWPFParagraph</span> <span class="variable">xwpfP</span> <span class="operator">=</span> xwpfd.createParagraph();</span><br><span class="line">        <span class="comment">//居中</span></span><br><span class="line">        xwpfP.setAlignment(ParagraphAlignment.CENTER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文本对象</span></span><br><span class="line">        <span class="type">XWPFRun</span> <span class="variable">xwpfRun</span> <span class="operator">=</span> xwpfP.createRun();</span><br><span class="line"></span><br><span class="line">        xwpfRun.setText(<span class="string">&quot;古诗文默写&quot;</span>);</span><br><span class="line">        xwpfRun.setFontSize(<span class="number">20</span>);</span><br><span class="line">        xwpfRun.setFontFamily(<span class="string">&quot;宋体&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">XWPFParagraph</span> <span class="variable">xwpfParagraph</span> <span class="operator">=</span> xwpfd.createParagraph();</span><br><span class="line">        xwpfParagraph.setAlignment(ParagraphAlignment.LEFT);</span><br><span class="line">        <span class="type">XWPFRun</span> <span class="variable">xwpfRun1</span> <span class="operator">=</span> xwpfParagraph.createRun();</span><br><span class="line">        xwpfRun1.setFontFamily(<span class="string">&quot;宋体&quot;</span>);<span class="comment">//字体</span></span><br><span class="line">        xwpfRun1.setFontSize(<span class="number">14</span>);<span class="comment">//字体大小，四号</span></span><br><span class="line">        <span class="comment">//默认：宋体（wps）/等线（office2016） 5号 两端对齐 单倍间距</span></span><br><span class="line">        xwpfRun1.setText(<span class="string">&quot;杨家有女初长成，&quot;</span>);</span><br><span class="line">        <span class="type">XWPFRun</span> <span class="variable">xwpfRun2</span> <span class="operator">=</span> xwpfParagraph.insertNewRun(xwpfRun1.getTextPosition() + <span class="number">2</span>);</span><br><span class="line">        xwpfRun2.setFontFamily(<span class="string">&quot;宋体&quot;</span>);<span class="comment">//字体</span></span><br><span class="line">        xwpfRun2.setFontSize(<span class="number">14</span>);<span class="comment">//字体大小，四号</span></span><br><span class="line">        xwpfRun2.setColor(<span class="string">&quot;FF0000&quot;</span>);</span><br><span class="line">        xwpfRun2.setText(jsonObject.getString(<span class="string">&quot;yang&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">XWPFRun</span> <span class="variable">xwpfRun3</span> <span class="operator">=</span> xwpfParagraph.insertNewRun( xwpfRun2.getTextPosition() + <span class="number">3</span>);</span><br><span class="line">        xwpfRun3.setText(<span class="string">&quot;天生丽质难自弃，&quot;</span>);</span><br><span class="line">        xwpfRun3.setFontFamily(<span class="string">&quot;宋体&quot;</span>);<span class="comment">//字体</span></span><br><span class="line">        xwpfRun3.setFontSize(<span class="number">14</span>);<span class="comment">//字体大小，四号</span></span><br><span class="line">        <span class="type">XWPFRun</span> <span class="variable">xwpfRun4</span> <span class="operator">=</span> xwpfParagraph.insertNewRun( xwpfRun3.getTextPosition() + <span class="number">4</span>);</span><br><span class="line">        xwpfRun4.setText(jsonObject.getString(<span class="string">&quot;yi&quot;</span>));</span><br><span class="line">        xwpfRun4.setFontFamily(<span class="string">&quot;宋体&quot;</span>);<span class="comment">//字体</span></span><br><span class="line">        xwpfRun4.setFontSize(<span class="number">14</span>);<span class="comment">//字体大小，四号</span></span><br><span class="line">        xwpfRun4.setColor(<span class="string">&quot;FF0000&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;F:\\WordTest&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;WordWrite&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().getTime() + <span class="string">&quot;.docx&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(file, fileName));</span><br><span class="line">            xwpfd.write(stream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (stream != <span class="literal">null</span>) &#123;</span><br><span class="line">                    stream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        json.put(<span class="string">&quot;yang&quot;</span>, <span class="string">&quot;养在深闺人未识。&quot;</span>);</span><br><span class="line">        json.put(<span class="string">&quot;yi&quot;</span>, <span class="string">&quot;一朝选在君王侧。&quot;</span>);</span><br><span class="line">        json.put(<span class="string">&quot;liu&quot;</span>, <span class="string">&quot;六宫粉黛无颜色。&quot;</span>);</span><br><span class="line">        generateDoc(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><img src="/2022/05/03/java%E7%94%9F%E6%88%90docx%E6%A8%A1%E6%9D%BF/192710.png" class>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java生成word表格文档</title>
    <url>/2022/05/03/java%E7%94%9F%E6%88%90word%E8%A1%A8%E6%A0%BC%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<p>Java通过POI创建表格文档写入数据。<span id="more"></span></p>
<h3 id="构建表格"><a href="#构建表格" class="headerlink" title="构建表格"></a>构建表格</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">XWPFTable</span> <span class="variable">xwpfT</span> <span class="operator">=</span> xwpfd.createTable(<span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line">xwpfT.setWidthType(TableWidthType.AUTO);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">    	xwpfT.getRow(i).getCell(j).setText(<span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;行&quot;</span> + <span class="string">&quot;第&quot;</span> + j + <span class="string">&quot;列&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xwpfd.setTable(<span class="number">0</span>, xwpfT);</span><br></pre></td></tr></table></figure>

<p>通过带有参数的函数创建一个表格，如果没有参数，默认创建一行一列的表格。</p>
<p>设置表格列的宽度，<code>setWidthType()</code>是根据内容自动扩展，<code>setWidth()</code>直接数值表示宽度。</p>
<p>获取对应的行和列输入内容。在表格指定位置新增一行<code>insertNewTableRow()</code>，<code>addRow()</code>在最后一行增加一行。</p>
<p>最后将表格加入文档中。</p>
<h3 id="横向页面"><a href="#横向页面" class="headerlink" title="横向页面"></a>横向页面</h3><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ooxml-schemas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="页面横向"><a href="#页面横向" class="headerlink" title="页面横向"></a>页面横向</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">XWPFDocument</span> <span class="variable">xwpfd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XWPFDocument</span>();</span><br><span class="line"><span class="type">CTDocument1</span> <span class="variable">document1</span> <span class="operator">=</span> xwpfd.getDocument();</span><br><span class="line"><span class="type">CTBody</span> <span class="variable">body</span> <span class="operator">=</span> document1.getBody();</span><br><span class="line"><span class="keyword">if</span> (!body.isSetSectPr())&#123;</span><br><span class="line">	body.addNewSectPr();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">CTSectPr</span> <span class="variable">sectPr</span> <span class="operator">=</span> body.getSectPr();</span><br><span class="line"><span class="keyword">if</span> (!sectPr.isSetPgSz())&#123;</span><br><span class="line">	sectPr.addNewPgSz();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置页面大小（默认A4）</span></span><br><span class="line"><span class="type">CTPageSz</span> <span class="variable">pageSz</span> <span class="operator">=</span> sectPr.getPgSz();</span><br><span class="line">pageSz.setW(BigInteger.valueOf(<span class="number">16840</span>));</span><br><span class="line">pageSz.setH(BigInteger.valueOf(<span class="number">11907</span>));</span><br><span class="line">pageSz.setOrient(STPageOrientation.LANDSCAPE);</span><br></pre></td></tr></table></figure>

<p>如果有jar包报错，降低poi的jar包版本即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="设置边框"><a href="#设置边框" class="headerlink" title="设置边框"></a>设置边框</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">CTTblBorders</span> <span class="variable">borders</span> <span class="operator">=</span> table.getCTTbl().getTblPr().addNewTblBorders();</span><br><span class="line"><span class="type">CTBorder</span> <span class="variable">hBorder</span> <span class="operator">=</span> borders.addNewInsideH();</span><br><span class="line">hBorder.setVal(STBorder.Enum.forString(<span class="string">&quot;single&quot;</span>));  <span class="comment">// 线条类型</span></span><br><span class="line">hBorder.setSz(<span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;1&quot;</span>)); <span class="comment">// 线条大小</span></span><br><span class="line">hBorder.setColor(<span class="string">&quot;000000&quot;</span>); <span class="comment">// 设置颜色</span></span><br><span class="line"></span><br><span class="line"><span class="type">CTBorder</span> <span class="variable">vBorder</span> <span class="operator">=</span> borders.addNewInsideV();</span><br><span class="line">vBorder.setVal(STBorder.Enum.forString(<span class="string">&quot;single&quot;</span>));</span><br><span class="line">vBorder.setSz(<span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">vBorder.setColor(<span class="string">&quot;000000&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">CTBorder</span> <span class="variable">lBorder</span> <span class="operator">=</span> borders.addNewLeft();</span><br><span class="line">lBorder.setVal(STBorder.Enum.forString(<span class="string">&quot;single&quot;</span>));</span><br><span class="line">lBorder.setSz(<span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">lBorder.setColor(<span class="string">&quot;000000&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">CTBorder</span> <span class="variable">rBorder</span> <span class="operator">=</span> borders.addNewRight();</span><br><span class="line">rBorder.setVal(STBorder.Enum.forString(<span class="string">&quot;single&quot;</span>));</span><br><span class="line">rBorder.setSz(<span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">rBorder.setColor(<span class="string">&quot;000000&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">CTBorder</span> <span class="variable">tBorder</span> <span class="operator">=</span> borders.addNewTop();</span><br><span class="line">tBorder.setVal(STBorder.Enum.forString(<span class="string">&quot;single&quot;</span>));</span><br><span class="line">tBorder.setSz(<span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">tBorder.setColor(<span class="string">&quot;000000&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">CTBorder</span> <span class="variable">bBorder</span> <span class="operator">=</span> borders.addNewBottom();</span><br><span class="line">bBorder.setVal(STBorder.Enum.forString(<span class="string">&quot;single&quot;</span>));</span><br><span class="line">bBorder.setSz(<span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">bBorder.setColor(<span class="string">&quot;000000&quot;</span>);</span><br><span class="line"></span><br><span class="line">table.createRow(); <span class="comment">// 增加一行</span></span><br></pre></td></tr></table></figure>

<h3 id="单元格内添加段落"><a href="#单元格内添加段落" class="headerlink" title="单元格内添加段落"></a>单元格内添加段落</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">XWPFTable</span> <span class="variable">xwpfT</span> <span class="operator">=</span> xwpfd.createTable(<span class="number">2</span>, <span class="number">9</span>);</span><br><span class="line">xwpfT.setTableAlignment(TableRowAlign.CENTER);</span><br><span class="line">xwpfT.setWidthType(TableWidthType.AUTO);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="type">XWPFTableRow</span> <span class="variable">row</span> <span class="operator">=</span> xwpfT.getRow(i);</span><br><span class="line">    row.setHeight(<span class="number">1300</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">        <span class="type">XWPFTableCell</span> <span class="variable">xwpfTableCell</span> <span class="operator">=</span> xwpfT.getRow(i).getCell(j);</span><br><span class="line">        xwpfTableCell.setWidthType(TableWidthType.AUTO);</span><br><span class="line">        xwpfTableCell.setVerticalAlignment(XWPFTableCell.XWPFVertAlign.CENTER);</span><br><span class="line">        xwpfTableCell.removeParagraph(<span class="number">0</span>);</span><br><span class="line">        <span class="type">XWPFParagraph</span> <span class="variable">xwpfParagraph1</span> <span class="operator">=</span> xwpfTableCell.addParagraph();</span><br><span class="line">        xwpfParagraph1.setAlignment(ParagraphAlignment.CENTER);</span><br><span class="line">        <span class="type">XWPFRun</span> <span class="variable">xwpfRun5</span> <span class="operator">=</span> xwpfParagraph1.createRun();</span><br><span class="line">        xwpfRun5.setFontFamily(<span class="string">&quot;宋体&quot;</span>);<span class="comment">//字体</span></span><br><span class="line">        xwpfRun5.setFontSize(<span class="number">12</span>);<span class="comment">//字体大小</span></span><br><span class="line">        xwpfRun5.setColor(<span class="string">&quot;FF0000&quot;</span>);</span><br><span class="line">        xwpfRun5.setText(<span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;行&quot;</span> + <span class="string">&quot;第&quot;</span> + j + <span class="string">&quot;列&quot;</span>);</span><br><span class="line">        xwpfTableCell.setParagraph(xwpfParagraph1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java知识随笔</title>
    <url>/2022/01/10/java%E7%9F%A5%E8%AF%86%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<p>java做题知识随笔<span id="more"></span></p>
<h4 id="接口与抽象类"><a href="#接口与抽象类" class="headerlink" title="接口与抽象类"></a>接口与抽象类</h4><p>抽象类不能实例化。抽象类除了不能实例化对象之外，类的其它功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样。由于不能实例化对象，所以抽象类必须被继承，才能被使用。父类包含了子类集合的常见的方法，但是由于父类本身是抽象的，所以不能使用这些方法。</p>
<p>接口更多的是在系统架构设计方法发挥作用，主要用于定义模块之间的通信契约。而抽象类在代码实现方面发挥作用，可以实现代码的重用。</p>
<p>接口与抽象类的区别：</p>
<ol>
<li><p>抽象类可以有构造方法，接口中不能有构造方法。 </p>
</li>
<li><p>抽象类中可以有普通成员变量，接口中没有普通成员变量 </p>
</li>
<li><p>抽象类中可以包含非抽象的普通方法，接口中的所有方法必须都是抽象的，不能有非抽象的普通方法。 </p>
</li>
<li><p>抽象类中的抽象方法的访问类型可以是public，protected和（默认类型,虽然 eclipse下不报错，但应该也不行），但接口中的抽象方法只能是public类型的，并且默认即为public abstract类型。 </p>
</li>
<li><p>抽象类中可以包含静态方法，接口中不能包含静态方法 </p>
</li>
<li><p>抽象类和接口中都可以包含静态成员变量，抽象类中的静态成员变量的访问类型可以任意，但接口中定义的变量只能是public static final类型，并且默认即为public static final类型。 </p>
</li>
<li><p>一个类可以实现多个接口，但只能继承一个抽象类。 </p>
</li>
<li><p>抽象方法不能含有方法体，且必须在抽象类中</p>
</li>
</ol>
<h4 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h4><p>当程序执行到try{}语句中的return方法时，它会干这么一件事，将要返回的结果存储到一个临时栈中，然后程序不会立即返回，而是去执行finally{}中的程序。执行完之后，就会通知主程序“finally的程序执行完毕，可以请求返回了”，这时，就会将临时栈中的值取出来返回。</p>
<p>try-catch、try-finally、try-catch-finally，但catch和finally语句不能同时省略！</p>
<p>try-catch-finally块中，finally块在以下几种情况将不会执行。</p>
<p>（1）finally块中发生了异常。</p>
<p>（2）程序所在线程死亡。</p>
<p>（3）在前面的代码中用了System.exit（）；</p>
<p>（4）关闭了Cpu</p>
<h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><p><strong>&amp;&amp; 和 || 为短路与和短路或</strong>。&amp;&amp; 若前面的表达式为false,整个逻辑表达式为false,所以后面的表达式无论true和false都无法影响整个表达式的逻辑结果，所以为了提高代码执行速率，这里后面的表达式就不会执行。同理， || 若前面表达式为true,则后面的表达式无需计算。**&amp; 和 | 为不短路与不短路或**。无论什么情况，前面的和后面的都要执行。</p>
<h4 id="Mybatis中的-和"><a href="#Mybatis中的-和" class="headerlink" title="Mybatis中的#和$"></a>Mybatis中的#和$</h4><p><strong>PreparedStatement</strong>有预编译的过程，已经绑定sql，之后无论执行多少遍，都不会再去进行编译，执行速度要比statement 快，<strong>安全性高，可以防止SQL注入</strong>。而 statement 不同，如果执行多遍，则相应的就要编译多少遍sql。</p>
<img src="/2022/01/10/java%E7%9F%A5%E8%AF%86%E9%9A%8F%E7%AC%94/JVM.png" class>

<h4 id="JVM的垃圾回收机制"><a href="#JVM的垃圾回收机制" class="headerlink" title="JVM的垃圾回收机制"></a>JVM的垃圾回收机制</h4><p>关于JVM的垃圾回收机制：</p>
<ul>
<li><strong>垃圾回收在jvm中优先级相当相当低。</strong></li>
<li><strong>垃圾收集器（GC）程序开发者只能推荐JVM进行回收，但何时回收，回收哪些，程序员不能控制。</strong></li>
<li><strong>垃圾回收机制只是回收不再使用的JVM内存，如果程序有严重BUG，照样内存溢出。</strong></li>
<li><strong>进入DEAD的线程，它还可以恢复，GC不会回收。</strong></li>
</ul>
<h4 id="静态域"><a href="#静态域" class="headerlink" title="静态域"></a>静态域</h4><p>静态域：分为静态变量，静态方法，静态块。这里面涉及到的是静态变量和静态块，当执行到静态域时，按照静态域的顺序加载，并且静态域只在类的第一次加载时执行。</p>
<p>static修饰的成员属于类成员，父类变量或方法只能被子类同名变量或方法遮蔽，不能被继承覆盖</p>
<p>静态成员变量或静态代码块&gt;main方法&gt;非静态成员变量或非静态代码块&gt;构造方法</p>
<p>父类静态成员变量 父类静态代码块 子类静态成员变量 子类静态代码块 父类非静态成员变量，父类非静态代码块，父类构造函数，子类非静态成员变量，子类非静态代码块，子类构造函数</p>
<p>子类的构造方法总是先调用父类的构造方法，如果子类的构造方法没有明显地指明使用父类的哪个构造方法，子类就调用父类不带参数的构造方法。</p>
<p>而父类没有无参的构造函数，所以子类需要在自己的构造函数中显示的调用父类的构造函数。</p>
<h4 id="重载与重写"><a href="#重载与重写" class="headerlink" title="重载与重写"></a>重载与重写</h4><p>方法重载，参数列表不相同，返回值类型可以不同；方法重写，遵循两同-两小-一大规则。两同：方法名和参数列表相同；两小：子类返回值类型小于等于父类的，异常抛出小于等于父类；一大：访问权限修饰符大于等于父类。</p>
<p>字面量”+”拼接是在编译期间进行的，拼接后的字符串存放在字符串池中；而字符串引用的”+”拼接运算是在运行时进行的，新创建的字符串存放在堆中。</p>
<h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>构造方法是一种特殊的方法，具有以下特点：</p>
<p>（1）构造方法的方法名必须与类名相同。</p>
<p>（2）构造方法没有返回类型，也不能定义为void，在方法名前面不声明方法类型。</p>
<p>（3）构造方法的主要作用是完成对象的初始化工作，它能够把定义对象时的参数传给对象的域。</p>
<p>（4）一个类可以定义多个构造方法，如果在定义类时没有定义构造方法，则编译系统会自动插入一个无参数的默认构造器，这个构造器不执行任何代码。</p>
<p>（5）构造方法可以重载，，而且可以使用super()、this()相互调用，以参数的个数，类型，顺序区分。</p>
<p>（6）每个构造器的默认第一行都是super()，但是一旦父类中没有无参构造，必须在子类的第一行显式的声明调用哪一个构造。</p>
<h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><table>
<thead>
<tr>
<th><strong>修饰符</strong></th>
<th><strong>类</strong></th>
<th>成员方法</th>
<th><strong>构造方法</strong></th>
<th><strong>成员变量</strong></th>
<th align="center"><strong>局部变量</strong></th>
</tr>
</thead>
<tbody><tr>
<td>abstract（抽象的）</td>
<td>√</td>
<td>√</td>
<td>－</td>
<td>－</td>
<td align="center">－</td>
</tr>
<tr>
<td>static （静态的）</td>
<td>－</td>
<td>√</td>
<td>－</td>
<td>√</td>
<td align="center">－</td>
</tr>
<tr>
<td>public（公共的）</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td align="center">－</td>
</tr>
<tr>
<td>protected（受保护的）</td>
<td></td>
<td>√</td>
<td>√</td>
<td>√</td>
<td align="center">－</td>
</tr>
<tr>
<td>private（私有的）</td>
<td>－</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td align="center">－</td>
</tr>
<tr>
<td>synchronized（同步的）</td>
<td>－</td>
<td>√</td>
<td>－</td>
<td>－</td>
<td align="center">－</td>
</tr>
<tr>
<td>native（本地的）</td>
<td>－</td>
<td>√</td>
<td>－</td>
<td>－</td>
<td align="center">－</td>
</tr>
<tr>
<td>transient（暂时的）</td>
<td>－</td>
<td>－</td>
<td>－</td>
<td>√</td>
<td align="center">－</td>
</tr>
<tr>
<td>volatie（易失的）</td>
<td>－</td>
<td>－</td>
<td>－</td>
<td>√</td>
<td align="center">－</td>
</tr>
<tr>
<td>final（不要改变的）</td>
<td>√</td>
<td>√</td>
<td>－</td>
<td>√</td>
<td align="center">√</td>
</tr>
</tbody></table>
<img src="/2022/01/10/java%E7%9F%A5%E8%AF%86%E9%9A%8F%E7%AC%94/modifer.png" class>

<h4 id="线程安全的集合对象"><a href="#线程安全的集合对象" class="headerlink" title="线程安全的集合对象"></a>线程安全的集合对象</h4><ul>
<li><p>vector：就比arraylist多了个同步化机制（线程安全），因为效率较低，现在已经不太建议使用。在web应用中，特别是前台页面，往往效率（页面响应速度）是优先考虑的。</p>
</li>
<li><p>Stack：堆栈类，先进后出</p>
</li>
<li><p>hashtable：就比hashmap多了个线程安全</p>
</li>
<li><p>enumeration：枚举，相当于迭代器</p>
</li>
</ul>
<h4 id="非线程安全的集合对象"><a href="#非线程安全的集合对象" class="headerlink" title="非线程安全的集合对象"></a>非线程安全的集合对象</h4><ul>
<li>ArrayList</li>
<li>LinkedList</li>
<li>HashMap</li>
<li>HashSet</li>
<li>TreeMap</li>
<li>TreeSet</li>
<li>StringBulider</li>
</ul>
<h4 id="创建对象方式"><a href="#创建对象方式" class="headerlink" title="创建对象方式"></a>创建对象方式</h4><ol>
<li><p>使用 new 关键字（最常用）： <code>ObjectName obj = new ObjectName();</code></p>
</li>
<li><p>使用反射的Class类的newInstance()方法：</p>
<p> <code>ObjectName obj = ObjectName.class.newInstance();</code></p>
</li>
<li><p>使用反射的Constructor类的newInstance()方法：</p>
<p> <code>ObjectName obj = ObjectName.class.getConstructor.newInstance();</code></p>
</li>
<li><p>使用对象克隆clone()方法： <code>ObjectName obj = obj.clone();</code></p>
</li>
<li><p>使用反序列化（ObjectInputStream）的readObject()方法：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(FILE_NAME))) &#123; </span><br><span class="line"> 	<span class="type">ObjectName</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject(); </span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<h4 id="map分类"><a href="#map分类" class="headerlink" title="map分类"></a>map分类</h4><p>java为数据结构中的映射定义了一个接口java.util.Map。它有四个实现类,分别是HashMap、HashTable、LinkedHashMap 和TreeMap。</p>
<p>HashMap是无序存放的，key或value可以保存为null，非线程安全</p>
<p>Hashtable是无序存放的，key不允许设置为null，线程安全</p>
<p>ConcurrentHashMap是无序存放的，key或value可以保存为null，线程安全</p>
<p>TreeMap是可以排序的Map集合，按集合中的key排序，key不允许有重复，非线程安全</p>
<p>LinkedHashMap是HashMap的子类，保存了记录的插入顺序，遍历的时候比HashMap效率低，非线程安全</p>
<p>Hashmap 根据键的HashCode值存储数据，根据键可以直接获取它的值，具有很快的访问速度，取得数据的顺序是完全随机的。 HashMap最多只允许一条记录的键为Null；允许多条记录的值为 Null；HashMap不支持线程的同步，。</p>
<p>Hashtable与 HashMap类似,它继承自Dictionary类，不同的是:它不允许记录的键或者值为空;它支持线程的同步，即任一时刻只有一个线程能写Hashtable，因此也导致了 Hashtable在写入时会比较慢。</p>
<p>LinkedHashMap 是HashMap的一个子类，保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的。也可以在构造时用带参数，按照应用次数排序。在遍历的时候会比HashMap慢，当HashMap容量很大，实际数据较少时，遍历起来可能会比 LinkedHashMap慢。因为LinkedHashMap的遍历速度只和实际数据有关，和容量无关，而HashMap的遍历速度和他的容量有关。</p>
<p>TreeMap实现SortMap接口，能够把它保存的记录根据键排序,默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator 遍历TreeMap时，得到的记录是排过序的。</p>
<h4 id="面向对象的六原则一法则"><a href="#面向对象的六原则一法则" class="headerlink" title="面向对象的六原则一法则"></a>面向对象的六原则一法则</h4><h5 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h5><p>一个类只做它该做的事情。（单一职责原则想表达的就是”高内聚”，写代码最终极的原则只有六个字”高内聚、低耦合”，所谓的高内聚就是一个代码模块只完成一项功能，在面向对象中，如果只让一个类完成它该做的事，而不涉及与它无关的领域就是践行了高内聚的原则，这个类就只有单一职责。另一个是模块化，好的自行车是组装车，从减震叉、刹车到变速器，所有的部件都是可以拆卸和重新组装的，好的乒乓球拍也不是成品拍，一定是底板和胶皮可以拆分和自行组装的，一个好的软件系统，它里面的每个功能模块也应该是可以轻易的拿到其他系统中使用的，这样才能实现软件复用的目标。）</p>
<h5 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h5><p>软件实体应当对扩展开放，对修改关闭。（在理想的状态下，当我们需要为一个软件系统增加新功能时，只需要从原来的系统派生出一些新类就可以，不需要修改原来的任何一行代码。要做到开闭有两个要点：①抽象是关键，一个系统中如果没有抽象类或接口系统就没有扩展点；②封装可变性，将系统中的各种可变因素封装到一个继承结构中，如果多个可变因素混杂在一起，系统将变得复杂而换乱，如果不清楚如何封装可变性，可以参考《设计模式精解》一书中对桥梁模式的讲解的章节。）</p>
<h5 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h5><p>面向接口编程。（该原则说得直白和具体一些就是声明方法的参数类型、方法的返回类型、变量的引用类型时，尽可能使用抽象类型而不用具体类型，因为抽象类型可以被它的任何一个子类型所替代，请参考下面的里氏替换原则。）</p>
<h5 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h5><p>任何时候都可以用子类型替换掉父类型。（关于里氏替换原则的描述，Barbara Liskov女士的描述比这个要复杂得多，但简单的说就是能用父类型的地方就一定能使用子类型。里氏替换原则可以检查继承关系是否合理，如果一个继承关系违背了里氏替换原则，那么这个继承关系一定是错误的，需要对代码进行重构。例如让猫继承狗，或者狗继承猫，又或者让正方形继承长方形都是错误的继承关系，因为你很容易找到违反里氏替换原则的场景。需要注意的是：子类一定是增加父类的能力而不是减少父类的能力，因为子类比父类的能力更多，把能力多的对象当成能力少的对象来用当然没有任何问题。）</p>
<h5 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h5><p>接口要小而专，绝不能大而全。（臃肿的接口是对接口的污染，既然接口表示能力，那么一个接口只应该描述一种能力，接口也应该是高度内聚的。例如，琴棋书画就应该分别设计为四个接口，而不应设计成一个接口中的四个方法，因为如果设计成一个接口中的四个方法，那么这个接口很难用，毕竟琴棋书画四样都精通的人还是少数，而如果设计成四个接口，会几项就实现几个接口，这样的话每个接口被复用的可能性是很高的。Java中的接口代表能力、代表约定、代表角色，能否正确的使用接口一定是编程水平高低的重要标识。）</p>
<h5 id="合成聚合复用原则"><a href="#合成聚合复用原则" class="headerlink" title="合成聚合复用原则"></a>合成聚合复用原则</h5><p>优先使用聚合或合成关系复用代码。（通过继承来复用代码是面向对象程序设计中被滥用得最多的东西，因为所有的教科书都无一例外的对继承进行了鼓吹从而误导了初学者，类与类之间简单的说有三种关系，Is-A关系、Has-A关系、Use-A关系，分别代表继承、关联和依赖。其中，关联关系根据其关联的强度又可以进一步划分为关联、聚合和合成，但说白了都是Has-A关系，合成聚合复用原则想表达的是优先考虑Has-A关系而不是Is-A关系复用代码，原因嘛可以自己从百度上找到一万个理由，需要说明的是，即使在Java的API中也有不少滥用继承的例子，例如Properties类继承了Hashtable类，Stack类继承了Vector类，这些继承明显就是错误的，更好的做法是在Properties类中放置一个Hashtable类型的成员并且将其键和值都设置为字符串来存储数据，而Stack类的设计也应该是在Stack类中放一个Vector对象来存储数据。记住：任何时候都不要继承工具类，工具是可以拥有并可以使用的，而不是拿来继承的。）</p>
<h5 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h5><p>迪米特法则又叫最少知识原则，一个对象应当对其他对象有尽可能少的了解。再复杂的系统都可以为用户提供一个简单的门面，Java Web开发中作为前端控制器的Servlet或Filter不就是一个门面吗，浏览器对服务器的运作方式一无所知，但是通过前端控制器就能够根据你的请求得到相应的服务。调停者模式也可以举一个简单的例子来说明，例如一台计算机，CPU、内存、硬盘、显卡、声卡各种设备需要相互配合才能很好的工作，但是如果这些东西都直接连接到一起，计算机的布线将异常复杂，在这种情况下，主板作为一个调停者的身份出现，它将各个设备连接在一起而不需要每个设备之间直接交换数据，这样就减小了系统的耦合度和复杂度。</p>
<h4 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h4><p>如下图所示，JVM类加载机制分为五个部分：加载，验证，准备，解析，初始化，下面我们就分别来看一下这五个过程。</p>
<img src="/2022/01/10/java%E7%9F%A5%E8%AF%86%E9%9A%8F%E7%AC%94/loading.png" class>

<h5 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h5><p>加载是类加载过程中的一个阶段，这个阶段会在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的入口。注意这里不一定非得要从一个Class文件获取，这里既可以从ZIP包中读取（比如从jar包和war包中读取），也可以在运行时计算生成（动态代理），也可以由其它文件生成（比如将JSP文件转换成对应的Class类）。</p>
<h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p>这一阶段的主要目的是为了确保Class文件的字节流中包含的信息是否符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p>
<h5 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h5><p>准备阶段是正式为类变量分配内存并设置类变量的初始值阶段，即在方法区中分配这些变量所使用的内存空间。注意这里所说的初始值概念，比如一个类变量定义为： <code>public static int v = 8080;</code>实际上变量v在准备阶段过后的初始值为0而不是8080，将v赋值为8080的putstatic指令是程序被编译后，存放于类构造器方法之中。但是注意如果声明为：<code>public static final int v = 8080;</code>在编译阶段会为v生成ConstantValue属性，在准备阶段虚拟机会根据ConstantValue属性将v赋值为8080。</p>
<h5 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h5><p>解析阶段是指虚拟机将常量池中的符号引用替换为直接引用的过程。符号引用就是class文件中的：<code>CONSTANT_Class_info</code>、<code>CONSTANT_Field_info</code>、<code>CONSTANT_Method_info</code>等类型的常量。</p>
<h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p>初始化阶段是类加载最后一个阶段，前面的类加载阶段之后，除了在加载阶段可以自定义类加载器以外，其它操作都由JVM主导。到了初始阶段，才开始真正执行类中定义的Java程序代码。</p>
<p>初始化阶段是执行类构造器方法的过程。方法是由编译器自动收集类中的类变量的赋值操作和静态语句块中的语句合并而成的。虚拟机会保证方法执行之前，父类的方法已经执行完毕。p.s: 如果一个类中没有对静态变量赋值也没有静态语句块，那么编译器可以不为这个类生成()方法。</p>
<p>注意以下几种情况不会执行类初始化：</p>
<ul>
<li><p>通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。</p>
</li>
<li><p>定义对象数组，不会触发该类的初始化。</p>
</li>
<li><p>常量在编译期间会存入调用类的常量池中，本质上并没有直接引用定义常量的类，不会触发定义常量所在的类。</p>
</li>
<li><p>通过类名获取Class对象，不会触发类的初始化。</p>
</li>
<li><p>通过Class.forName加载指定类时，如果指定参数initialize为false时，也不会触发类初始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。</p>
</li>
<li><p>通过ClassLoader默认的loadClass方法，也不会触发初始化动作。</p>
</li>
</ul>
<h4 id="Cookie和Session的区别"><a href="#Cookie和Session的区别" class="headerlink" title="Cookie和Session的区别"></a>Cookie和Session的区别</h4><p>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。</p>
<p>2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗</p>
<p>考虑到安全应当使用session。</p>
<p>3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用COOKIE。</p>
<p>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p>
<h4 id="类加载机制、双亲委派模型"><a href="#类加载机制、双亲委派模型" class="headerlink" title="类加载机制、双亲委派模型"></a>类加载机制、双亲委派模型</h4><p>某个特定的类加载器在接到加载类的请求时，首先将加载任务委托给父类加载器，依次递归，如果父类加载器可以完成类加载任务，就成功返回；只有父类加载器无法完成此加载任务时，才自己去加载。</p>
<p>双亲委派模型的好处：</p>
<ul>
<li><p>主要是为了安全性，避免用户自己编写的类动态替换 Java的一些核心类，比如 String。</p>
</li>
<li><p>同时也避免了类的重复加载，因为 JVM中区分不同类，不仅仅是根据类名，相同的 class文件被不同的 ClassLoader加载就是不同的两个类</p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java设置Excel单元格格式</title>
    <url>/2022/05/03/java%E8%AE%BE%E7%BD%AEExcel%E5%8D%95%E5%85%83%E6%A0%BC%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<p>java导出Excel时设置单元格的文本显示格式<span id="more"></span></p>
<p>创建单元格</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HSSFWorkbook</span> <span class="variable">demoWorkBook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HSSFWorkbook</span>();   </span><br><span class="line"><span class="type">HSSFSheet</span> <span class="variable">demoSheet</span> <span class="operator">=</span> demoWorkBook.createSheet(<span class="string">&quot;The World&#x27;s 500 Enterprises&quot;</span>);   </span><br><span class="line"><span class="type">HSSFCell</span> <span class="variable">cell</span> <span class="operator">=</span> demoSheet.createRow(<span class="number">0</span>).createCell(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h4 id="文本格式"><a href="#文本格式" class="headerlink" title="文本格式"></a>文本格式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HSSFCellStyle</span> <span class="variable">cellStyle2</span> <span class="operator">=</span> demoWorkBook.createCellStyle();</span><br><span class="line"><span class="type">HSSFDataFormat</span> <span class="variable">format</span> <span class="operator">=</span> demoWorkBook.createDataFormat();</span><br><span class="line">cellStyle2.setDataFormat(format.getFormat(<span class="string">&quot;@&quot;</span>));</span><br><span class="line">cell.setCellStyle(cellStyle2);</span><br></pre></td></tr></table></figure>

<h4 id="日期格式"><a href="#日期格式" class="headerlink" title="日期格式"></a>日期格式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HSSFCellStyle</span> <span class="variable">cellStyle</span> <span class="operator">=</span> demoWorkBook.createCellStyle();</span><br><span class="line">HSSFDataFormat format= demoWorkBook.createDataFormat();</span><br><span class="line">cellStyle.setDataFormat(format.getFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>));</span><br><span class="line">cell.setCellStyle(cellStyle);</span><br></pre></td></tr></table></figure>

<h4 id="保留两位小数"><a href="#保留两位小数" class="headerlink" title="保留两位小数"></a>保留两位小数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HSSFCellStyle</span> <span class="variable">cellStyle</span> <span class="operator">=</span> demoWorkBook.createCellStyle();    </span><br><span class="line">cellStyle.setDataFormat(HSSFDataFormat.getBuiltinFormat(<span class="string">&quot;0.00&quot;</span>));</span><br><span class="line">cell.setCellStyle(cellStyle);</span><br></pre></td></tr></table></figure>

<h4 id="货币格式"><a href="#货币格式" class="headerlink" title="货币格式"></a>货币格式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HSSFCellStyle</span> <span class="variable">cellStyle</span> <span class="operator">=</span> demoWorkBook.createCellStyle();</span><br><span class="line">HSSFDataFormat format= demoWorkBook.createDataFormat();</span><br><span class="line">cellStyle.setDataFormat(format.getFormat(<span class="string">&quot;¥#,##0&quot;</span>));</span><br><span class="line">cell.setCellStyle(cellStyle);</span><br><span class="line"></span><br><span class="line"><span class="type">XSSFCellStyle</span> <span class="variable">css1</span> <span class="operator">=</span> wb.createCellStyle();</span><br><span class="line"><span class="type">XSSFDataFormat</span> <span class="variable">df</span> <span class="operator">=</span> wb.createDataFormat();</span><br><span class="line">css1.setDataFormat(df.getFormat(<span class="string">&quot;#,##0.00&quot;</span>));</span><br></pre></td></tr></table></figure>

<h4 id="百分比格式"><a href="#百分比格式" class="headerlink" title="百分比格式"></a>百分比格式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HSSFCellStyle</span> <span class="variable">cellStyle</span> <span class="operator">=</span> demoWorkBook.createCellStyle();</span><br><span class="line">cellStyle.setDataFormat(HSSFDataFormat.getBuiltinFormat(<span class="string">&quot;0.00%&quot;</span>));</span><br><span class="line">cell.setCellStyle(cellStyle);</span><br></pre></td></tr></table></figure>

<h4 id="中文大写"><a href="#中文大写" class="headerlink" title="中文大写"></a>中文大写</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HSSFCellStyle</span> <span class="variable">cellStyle</span> <span class="operator">=</span> demoWorkBook.createCellStyle();</span><br><span class="line">HSSFDataFormat format= demoWorkBook.createDataFormat();</span><br><span class="line">cellStyle.setDataFormat(format.getFormat(<span class="string">&quot;[DbNum2][$-804]0&quot;</span>));</span><br><span class="line">cell.setCellStyle(cellStyle);</span><br></pre></td></tr></table></figure>

<h4 id="科学计数法"><a href="#科学计数法" class="headerlink" title="科学计数法"></a>科学计数法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HSSFCellStyle</span> <span class="variable">cellStyle</span> <span class="operator">=</span> demoWorkBook.createCellStyle();</span><br><span class="line">cellStyle.setDataFormat( HSSFDataFormat.getBuiltinFormat(<span class="string">&quot;0.00E+00&quot;</span>));</span><br><span class="line">cell.setCellStyle(cellStyle);</span><br></pre></td></tr></table></figure>

<h4 id="格式字符串"><a href="#格式字符串" class="headerlink" title="格式字符串"></a>格式字符串</h4><p>打开Excel在单元格选择设置单元格格式，先选择你需要的格式，然后选择自定义，就会自动定位到你需要的格式，复制格式字符串就可以。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java解析导入Excel数据</title>
    <url>/2022/05/03/java%E8%A7%A3%E6%9E%90%E5%AF%BC%E5%85%A5Excel%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>java解析导入Excel数据，项目实例。<span id="more"></span></p>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="生成临时模板文件解析数据"><a href="#生成临时模板文件解析数据" class="headerlink" title="生成临时模板文件解析数据"></a>生成临时模板文件解析数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取文件名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> multiFile.getOriginalFilename();</span><br><span class="line"><span class="comment">// 获取文件后缀</span></span><br><span class="line"><span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> File.createTempFile(fileName, prefix);</span><br><span class="line">multiFile.transferTo(file);</span><br><span class="line"></span><br><span class="line"><span class="comment">//set excel机柜名称不唯一性 行数</span></span><br><span class="line">Set&lt;Integer&gt; rowSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line"><span class="comment">//set excel机柜名称不唯一性 行数</span></span><br><span class="line">List&lt;Cabinet&gt; cabinetList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Cabinet&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个工作薄</span></span><br><span class="line"><span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> WorkbookFactory.create(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file));</span><br><span class="line"><span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">System.out.println(fileName + <span class="string">&quot; 表格行数 &quot;</span> + sheet.getLastRowNum());</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; sheet.getLastRowNum() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.getRow(i);</span><br><span class="line">    <span class="type">Cabinet</span> <span class="variable">cabinet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cabinet</span>();</span><br><span class="line">    <span class="keyword">if</span> (row != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">    !row.getCell(<span class="number">0</span>).toString().equals(<span class="string">&quot;&quot;</span>) &amp;&amp;</span><br><span class="line">    !row.getCell(<span class="number">1</span>).toString().equals(<span class="string">&quot;&quot;</span>) &amp;&amp;</span><br><span class="line">    !row.getCell(<span class="number">2</span>).toString().equals(<span class="string">&quot;&quot;</span>) &amp;&amp;</span><br><span class="line">    !row.getCell(<span class="number">3</span>).toString().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">cabinetName</span> <span class="operator">=</span> row.getCell(<span class="number">1</span>).toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">cabinetType</span> <span class="operator">=</span> row.getCell(<span class="number">2</span>).toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">siteName</span> <span class="operator">=</span> row.getCell(<span class="number">3</span>).toString();</span><br><span class="line">        cabinet.setCabinetName(cabinetName);</span><br><span class="line">        cabinet.setCabinetType(cabinetType);</span><br><span class="line">        cabinet.setSiteName(siteName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断机柜名称是否唯一</span></span><br><span class="line">        <span class="keyword">if</span> (!cabinetService.checkOnlyCabinetName(cabinetName)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cabinetType.equals(<span class="string">&quot;ODF架&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!row.getCell(<span class="number">4</span>).toString().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                    <span class="type">Double</span> <span class="variable">s</span> <span class="operator">=</span> Double.parseDouble(row.getCell(<span class="number">4</span>).toString());</span><br><span class="line">                    cabinet.setSiteLine(s.intValue());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!row.getCell(<span class="number">5</span>).toString().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                    <span class="type">Double</span> <span class="variable">s</span> <span class="operator">=</span> Double.parseDouble(row.getCell(<span class="number">5</span>).toString());</span><br><span class="line">                    cabinet.setSiteList(s.intValue());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">oxcVolume</span> <span class="operator">=</span> row.getCell(<span class="number">6</span>).toString();</span><br><span class="line">                cabinet.setSiteLine(<span class="number">1</span>);</span><br><span class="line">                cabinet.setSiteList(<span class="number">1</span>);</span><br><span class="line">                cabinet.setOxcVolume(oxcVolume);</span><br><span class="line">            &#125;</span><br><span class="line">            cabinet.setAOrB(row.getCell(<span class="number">8</span>).toString());</span><br><span class="line">            <span class="keyword">if</span> (!row.getCell(<span class="number">7</span>).toString().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                cabinet.setTerminal(row.getCell(<span class="number">7</span>).toString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!row.getCell(<span class="number">9</span>).toString().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                cabinet.setDemo(row.getCell(<span class="number">9</span>).toString());</span><br><span class="line">            &#125;</span><br><span class="line">            cabinetList.add(cabinet);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//不唯一</span></span><br><span class="line">            rowSet.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="直接解析文件流数据"><a href="#直接解析文件流数据" class="headerlink" title="直接解析文件流数据"></a>直接解析文件流数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> JSONObject <span class="title function_">importFibercore</span><span class="params">(<span class="meta">@RequestParam(&quot;uploadFile&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class="line">        JSONObject result;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">            <span class="type">XSSFWorkbook</span> <span class="variable">wb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>(in);</span><br><span class="line">            <span class="comment">//获取文件中的表格</span></span><br><span class="line">            <span class="type">XSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> wb.getSheetAt(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">//获取文件中的长度从0开始</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">rowNum</span> <span class="operator">=</span> sheet.getLastRowNum() + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cellNum</span> <span class="operator">=</span> sheet.getRow(<span class="number">1</span>).getPhysicalNumberOfCells();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= rowNum; i++) &#123;</span><br><span class="line">                <span class="type">XSSFRow</span> <span class="variable">firstRow</span> <span class="operator">=</span> sheet.getRow(<span class="number">0</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">firstString</span> <span class="operator">=</span> firstRow.getCell(<span class="number">0</span>).getStringCellValue();</span><br><span class="line">                String siteName;</span><br><span class="line">                String cabinetType;</span><br><span class="line">                <span class="keyword">if</span> (firstString.contains(<span class="string">&quot;机房&quot;</span>)) &#123;</span><br><span class="line">                    String[] name1 = firstString.split(<span class="string">&quot;机房&quot;</span>);</span><br><span class="line">                    siteName = name1[<span class="number">0</span>] + <span class="string">&quot;机房&quot;</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">name2</span> <span class="operator">=</span> name1[<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (name2.contains(<span class="string">&quot;光交&quot;</span>)) &#123;</span><br><span class="line">                        cabinetType = <span class="string">&quot;光交&quot;</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        cabinetType = <span class="string">&quot;ODF&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    String[] name1 = firstString.split(<span class="string">&quot;光交&quot;</span>);</span><br><span class="line">                    siteName = name1[<span class="number">0</span>] + <span class="string">&quot;光交&quot;</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">name2</span> <span class="operator">=</span> name1[<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (name2.contains(<span class="string">&quot;光交&quot;</span>)) &#123;</span><br><span class="line">                        cabinetType = <span class="string">&quot;光交&quot;</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        cabinetType = <span class="string">&quot;ODF&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">String</span> <span class="variable">cabinetName</span> <span class="operator">=</span> firstString.split(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">                <span class="type">String</span> <span class="variable">aOrB</span> <span class="operator">=</span> firstString.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">4</span>; j &lt;= cellNum; j++) &#123;</span><br><span class="line">                    <span class="type">XSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet.getRow(i);</span><br><span class="line">                    <span class="type">XSSFCell</span> <span class="variable">cell</span> <span class="operator">=</span> row.getCell(j);</span><br><span class="line">                    <span class="type">DataFormatter</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataFormatter</span>();</span><br><span class="line">                    <span class="keyword">if</span> (df.formatCellValue(cell) != <span class="literal">null</span> &amp;&amp; !df.formatCellValue(cell).equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">fibercoreName</span> <span class="operator">=</span> row.getCell(j).getStringCellValue();</span><br><span class="line">                        <span class="type">Fibercore</span> <span class="variable">fibercore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fibercore</span>();</span><br><span class="line">                        fibercore.setFibercoreId(setFibercoreId());</span><br><span class="line">                        fibercore.setFibercoreName(fibercoreName);</span><br><span class="line">                        fibercore.setFibercoreLine(String.valueOf(i - <span class="number">1</span>));</span><br><span class="line">                        fibercore.setFibercoreList(String.valueOf(j - <span class="number">3</span>));</span><br><span class="line">                        fibercore.setSiteName(siteName);</span><br><span class="line">                        fibercore.setAOrB(aOrB);</span><br><span class="line">                        fibercore.setCabinetType(cabinetType);</span><br><span class="line">                        fibercore.setCabinetName(cabinetName);</span><br><span class="line">                        <span class="keyword">if</span> (row.getCell(<span class="number">1</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="type">String</span> <span class="variable">opticalCable</span> <span class="operator">=</span> getMergedRegionValue(sheet, i, <span class="number">1</span>);</span><br><span class="line">                            fibercore.setOpticalCable(opticalCable);</span><br><span class="line">                            <span class="type">String</span> <span class="variable">opticalPort</span> <span class="operator">=</span> df.formatCellValue(row.getCell(<span class="number">3</span>));</span><br><span class="line">                            fibercore.setOpticalPort(opticalPort);</span><br><span class="line">                            fibercore.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">                            fibercore.setUpdateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">                            fibercore.setCreateMan(ShiroUtils.getProfile().getUserName());</span><br><span class="line">                            log.info(<span class="string">&quot;导入纤芯信息：&#123;&#125;&quot;</span>, fibercore);</span><br><span class="line">                            fibercoreService.addFibercore(fibercore);</span><br><span class="line">                            count++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            result = Result.succ(<span class="number">200</span>, <span class="string">&quot;T&quot;</span>, count);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;导入异常&quot;</span>, e);</span><br><span class="line">            result = Result.fail(<span class="string">&quot;F&quot;</span>, <span class="string">&quot;导入纤芯异常，导入&quot;</span> + count + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;[fibercore/importFibercore]:结果&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="判断空列或者空行"><a href="#判断空列或者空行" class="headerlink" title="判断空列或者空行"></a>判断空列或者空行</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (df.formatCellValue(sheet.getRow(i).getCell(j)).isBlank()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;行&quot;</span> + <span class="string">&quot;第&quot;</span> + j + <span class="string">&quot;列为空&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java调用存储过程</title>
    <url>/2022/05/03/java%E8%B0%83%E7%94%A8%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>mybatis调用oracle方法或者存储过程时，如果无输入和输出参数，直接把函数当做查询字段即可输出。本次主要说明有输入参数和输出参数。<span id="more"></span></p>
<p>存储过程代码忽略，只需知道输入参数类型和输出参数类型即可。</p>
<p>xml映射文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select id=&quot;getFhYeild&quot; statementType=&quot;CALLABLE&quot; parameterType=&quot;java.util.Map&quot; resultType=&quot;Double&quot;&gt;</span><br><span class="line">	&#123;#&#123;result,mode=OUT,jdbcType=VARCHAR&#125;=call get_fh_yeild(#&#123;fndCd,mode=IN,jdbcType=VARCHAR&#125;)&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>mapper层代码和一般的查询接口一样，没有特殊的改变。</p>
<p>Controller层在进行调用的时候，只需使用map调用即可取值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,Object&gt;();</span><br><span class="line">getFhYeild(map);</span><br><span class="line">map.get(<span class="string">&quot;result&quot;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>json有序化</title>
    <url>/2022/05/03/json%E6%9C%89%E5%BA%8F%E5%8C%96/</url>
    <content><![CDATA[<p>将实体类转化为有序的Map。<span id="more"></span></p>
<p>使用LinkedHashMap可以将Map变成有序的key-value类型。</p>
<p>实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Apple</span> <span class="variable">apple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Apple</span>();</span><br><span class="line">apple.setName(<span class="string">&quot;红富士&quot;</span>);</span><br><span class="line">apple.setColor(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">apple.setCount(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<p>转化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">Field[] fields = apple.getClass().getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> field.getName();</span><br><span class="line">    map.put(name, field.get(apple));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">实体类转Map：&#123;name=红富士, color=红色, count=<span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>json与map的相互转换</title>
    <url>/2022/05/03/json%E4%B8%8Emap%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>map、json和string的相互转换。<span id="more"></span></p>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="map转json"><a href="#map转json" class="headerlink" title="map转json"></a>map转json</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">map.put(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>(map);</span><br></pre></td></tr></table></figure>

<h3 id="map转string"><a href="#map转string" class="headerlink" title="map转string"></a>map转string</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JSONObject.toJSONString(map);</span><br></pre></td></tr></table></figure>

<h3 id="json转string"><a href="#json转string" class="headerlink" title="json转string"></a>json转string</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">JSONObject</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">json.put(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;v&quot;</span>);</span><br><span class="line">json.put(<span class="string">&quot;z&quot;</span>, <span class="string">&quot;123n);</span></span><br><span class="line"><span class="string">json.toJSONString();</span></span><br></pre></td></tr></table></figure>

<h3 id="json转map"><a href="#json转map" class="headerlink" title="json转map"></a>json转map</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">JSONObject</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">json.put(<span class="string">&quot;ccc&quot;</span>, <span class="string">&quot;321&quot;</span>);</span><br><span class="line">json.put(<span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">Map&lt;String, Object&gt; map = (Map&lt;String, Object&gt;)json;</span><br></pre></td></tr></table></figure>

<h3 id="string转json"><a href="#string转json" class="headerlink" title="string转json"></a>string转json</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;username\&quot;:\&quot;dsad\&quot;,\&quot;qwewqe\&quot;:\&quot;123\&quot;&#125;&quot;</span>;</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">json</span> <span class="operator">=</span> JSONObject.parseObject(str);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis属性配置</title>
    <url>/2022/04/27/mybatis%E5%B1%9E%E6%80%A7%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>mybatis用到的属性整理<span id="more"></span></p>
<h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><p>在大型项目中，可能存在大量的SQL语句，这时候为每个SQL语句起一个唯一的标识（ID）就变得并不容易了。为了解决这个问题，在MyBatis中，可以为每个映射文件起一个唯一的命名空间，这样定义在这个映射文件中的每个SQL语句就成了定义在这个命名空间中的一个ID。只要我们能够保证每个命名空间中这个ID是唯一的，即使在不同映射文件中的语句ID相同，也不会再产生冲突了。</p>
<h4 id="防SQL注入"><a href="#防SQL注入" class="headerlink" title="防SQL注入"></a>防SQL注入</h4><p> #{}是预编译处理、是占位符， ${}是字符串替换、是拼接符。Mybatis 在处理#{}时，会将 sql 中的#{}替换为?号，调用 PreparedStatement 来赋值；Mybatis 在处理${}时， 就是把${}替换成变量的值，调用 Statement 来赋值；#{} 的变量替换是在DBMS 中、变量替换后，#{} 对应的变量自动加上单引号 ${} 的变量替换是在 DBMS 外、变量替换后，${} 对应的变量不会加上单引号 使用#{}可以有效的防止 SQL 注入， 提高系统安全性。</p>
<h4 id="一级缓存和二级缓存"><a href="#一级缓存和二级缓存" class="headerlink" title="一级缓存和二级缓存"></a>一级缓存和二级缓存</h4><p>一级指Session缓存。二级指mapper映射文件。</p>
<p>一级缓存的作用域是SQlSession, Mybatis默认开启一级缓存。 在同一个SqlSession中，执行相同的SQL查询时；第一次会去查询数据库，并写在缓存中，第二次会直接从缓存中取。 当执行SQL时候两次查询中间发生了增删改的操作，则SQLSession的缓存会被清空。 每次查询会先去缓存中找，如果找不到，再去数据库查询，然后把结果写到缓存中。 Mybatis的内部缓存使用一个HashMap，key为hashcode+statementId+sql语句。Value为查询出来的结果集映射成的java对象。 SqlSession执行insert、update、delete等操作commit后会清空该SQLSession缓存。</p>
<p>Mybatis默认是没有开启二级缓存的。 第一次调用mapper下的SQL去查询用户的信息，查询到的信息会存放在该mapper对应的二级缓存区域。 第二次调用namespace下的mapper映射文件中，相同的sql去查询用户信息，会去对应的二级缓存内取结果。</p>
<p>Mapper文件中包含的元素有：</p>
<p>cache – 配置给定命名空间的缓存。</p>
<p>cache-ref – 从其他命名空间引用缓存配置。</p>
<p>resultMap – 映射复杂的结果对象。</p>
<p>sql – 可以重用的 SQL 块，也可以被其他语句引用</p>
<h4 id="传入多个参数"><a href="#传入多个参数" class="headerlink" title="传入多个参数"></a>传入多个参数</h4><p>1、使用Map或者实体类传递参数</p>
<p>2、使用@Param注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">test</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span>String name, <span class="meta">@Param(&quot;note&quot;)</span>String note)</span>;</span><br></pre></td></tr></table></figure>

<p>映射器中的XML修改为无需定义参数类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select id=&quot;test&quot; resultType=&quot;String&quot;&gt;</span><br><span class="line">    select id, name, note from t</span><br><span class="line">    where name like &#x27;%&#x27; || #&#123;name&#125; || &#x27;%&#x27; and note like &#x27;%&#x27; || #&#123;note&#125; || &#x27;%&#x27;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<h4 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Statementtype=callable</span><br><span class="line">&#123;call produce()&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis映射参数</title>
    <url>/2022/05/03/mybatis%E6%98%A0%E5%B0%84%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<p>mybatis的jdbcType映射参数<span id="more"></span></p>
<p>jdbcType在Oracle和MySQL数据库之间的映射关系</p>
<table>
<thead>
<tr>
<th></th>
<th>JdbcType</th>
<th>Oracle</th>
<th>MySql</th>
</tr>
</thead>
<tbody><tr>
<td>JdbcType</td>
<td>ARRAY</td>
<td></td>
<td></td>
</tr>
<tr>
<td>JdbcType</td>
<td>BIGINT</td>
<td></td>
<td>BIGINT</td>
</tr>
<tr>
<td>JdbcType</td>
<td>BINARY</td>
<td></td>
<td></td>
</tr>
<tr>
<td>JdbcType</td>
<td>BIT</td>
<td></td>
<td>BIT</td>
</tr>
<tr>
<td>JdbcType</td>
<td>BLOB</td>
<td>BLOB</td>
<td>BLOB</td>
</tr>
<tr>
<td>JdbcType</td>
<td>BOOLEAN</td>
<td></td>
<td></td>
</tr>
<tr>
<td>JdbcType</td>
<td>CHAR</td>
<td>CHAR</td>
<td>CHAR</td>
</tr>
<tr>
<td>JdbcType</td>
<td>CLOB</td>
<td>CLOB</td>
<td>TEXT</td>
</tr>
<tr>
<td>JdbcType</td>
<td>CURSOR</td>
<td></td>
<td></td>
</tr>
<tr>
<td>JdbcType</td>
<td>DATE</td>
<td>DATE</td>
<td>DATE</td>
</tr>
<tr>
<td>JdbcType</td>
<td>DECIMAL</td>
<td>DECIMAL</td>
<td>DECIMAL</td>
</tr>
<tr>
<td>JdbcType</td>
<td>DOUBLE</td>
<td>NUMBER</td>
<td>DOUBLE</td>
</tr>
<tr>
<td>JdbcType</td>
<td>FLOAT</td>
<td>FLOAT</td>
<td>FLOAT</td>
</tr>
<tr>
<td>JdbcType</td>
<td>INTEGER</td>
<td>INTEGER</td>
<td>INTEGER</td>
</tr>
<tr>
<td>JdbcType</td>
<td>LONGVARBINARY</td>
<td></td>
<td></td>
</tr>
<tr>
<td>JdbcType</td>
<td>LONGVARCHAR</td>
<td>LONG VARCHAR</td>
<td></td>
</tr>
<tr>
<td>JdbcType</td>
<td>NCHAR</td>
<td>NCHAR</td>
<td></td>
</tr>
<tr>
<td>JdbcType</td>
<td>NCLOB</td>
<td>NCLOB</td>
<td></td>
</tr>
<tr>
<td>JdbcType</td>
<td>NULL</td>
<td></td>
<td></td>
</tr>
<tr>
<td>JdbcType</td>
<td>NUMERIC</td>
<td>NUMERIC&#x2F;NUMBER</td>
<td>NUMERIC</td>
</tr>
<tr>
<td>JdbcType</td>
<td>NVARCHAR</td>
<td></td>
<td></td>
</tr>
<tr>
<td>JdbcType</td>
<td>OTHER</td>
<td></td>
<td></td>
</tr>
<tr>
<td>JdbcType</td>
<td>REAL</td>
<td>REAL</td>
<td>REAL</td>
</tr>
<tr>
<td>JdbcType</td>
<td>SMALLINT</td>
<td>SMALLINT</td>
<td>SMALLINT</td>
</tr>
<tr>
<td>JdbcType</td>
<td>STRUCT</td>
<td></td>
<td></td>
</tr>
<tr>
<td>JdbcType</td>
<td>TIME</td>
<td></td>
<td>TIME</td>
</tr>
<tr>
<td>JdbcType</td>
<td>TIMESTAMP</td>
<td>TIMESTAMP</td>
<td>TIMESTAMP&#x2F;DATETIME</td>
</tr>
<tr>
<td>JdbcType</td>
<td>TINYINT</td>
<td></td>
<td>TINYINT</td>
</tr>
<tr>
<td>JdbcType</td>
<td>UNDEFINED</td>
<td></td>
<td></td>
</tr>
<tr>
<td>JdbcType</td>
<td>VARBINARY</td>
<td></td>
<td></td>
</tr>
<tr>
<td>JdbcType</td>
<td>VARCHAR</td>
<td>VARCHAR</td>
<td>VARCHAR</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis的sql日志</title>
    <url>/2022/05/03/mybatis%E7%9A%84sql%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p>Mybatis中的sql日志打印，快速分析出sql的错误。<span id="more"></span></p>
<p>项目使用的是mybatis的springboot框架，日志的输出基于log4j，所以先要引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 忽略自带的日志框架. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>     </span><br><span class="line"><span class="comment">&lt;!-- log4j. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在配置文件<code>application.yml</code>中配置日志输出</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">1 logging:</span></span><br><span class="line"><span class="attr">2   level:</span></span><br><span class="line"><span class="attr">3     com.example.mapper:</span> <span class="string">trace</span></span><br></pre></td></tr></table></figure>

<p>或者在<code>application.properties</code>中配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging.level.main.blog.mapper</span>=<span class="string">debug</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis的statementType说明</title>
    <url>/2022/05/03/mybatis%E7%9A%84statementType%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<p>statementType：标记操作SQL的对象。<span id="more"></span></p>
<p>mapper文件中可以使用statementType标记使用什么的对象操作SQL语句。</p>
<p>取值参数：</p>
<ul>
<li>STATEMENT：直接操作SQL，不进行预编译，获取数据：$—Statement</li>
<li>PREPARED：预处理，参数进行预编译，获取数据：#—PreparedStatement：默认</li>
<li>CALLABLE：执行存储过程—CallableStatement</li>
</ul>
<p>其中如果在文件中，取值不同，那么获取参数的方式也不相同</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;update id=&quot;update4&quot; statementType=&quot;STATEMENT&quot;&gt;</span><br><span class="line">    update tb_car set price=$&#123;price&#125; where id=$&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br><span class="line">&lt;update id=&quot;update5&quot; statementType=&quot;PREPARED&quot;&gt;</span><br><span class="line">    update tb_car set xh=#&#123;xh&#125; where id=#&#123;id&#125;my</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure>

<p>注意：如果只为STATEMENT，那么sql就是直接进行的字符串拼接，这样如果为字符串需要加上引号，如果为PREPARED，是使用的参数替换，也就是索引占位符，我们的#会转换为?再设置对应的参数的值。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql函数</title>
    <url>/2021/12/18/mysql%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>mysql通用函数<span id="more"></span></p>
<h5 id="拆分字符串函数"><a href="#拆分字符串函数" class="headerlink" title="拆分字符串函数"></a>拆分字符串函数</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">substring_index(字符串,分割符,取分割后的字符串位数)</span><br></pre></td></tr></table></figure>

<h6 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">180cm,75kg,27,male</span><br></pre></td></tr></table></figure>

<p>-1表示从最后取1个，1表示从开始1个，2表示从开始取2个。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> substring_index(<span class="string">&#x27;180cm,75kg,27,male&#x27;</span>,<span class="string">&#x27;,&#x27;</span>,<span class="number">-1</span>) <span class="keyword">from</span> dual</span><br><span class="line"></span><br><span class="line">male</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> substring_index(<span class="string">&#x27;180cm,75kg,27,male&#x27;</span>,<span class="string">&#x27;,&#x27;</span>,<span class="number">1</span>) <span class="keyword">from</span> dual</span><br><span class="line"></span><br><span class="line"><span class="number">180</span>cm</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> substring_index(<span class="string">&#x27;180cm,75kg,27,male&#x27;</span>,<span class="string">&#x27;,&#x27;</span>,<span class="number">2</span>) <span class="keyword">from</span> dual</span><br><span class="line"></span><br><span class="line"><span class="number">180</span>cm,<span class="number">75</span>kg</span><br></pre></td></tr></table></figure>

<h5 id="多列排序"><a href="#多列排序" class="headerlink" title="多列排序"></a>多列排序</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table if exists user_profile;</span><br><span class="line">CREATE TABLE `user_profile` (</span><br><span class="line">`id` int NOT NULL,</span><br><span class="line">`device_id` int NOT NULL,</span><br><span class="line">`gender` varchar(14) NOT NULL,</span><br><span class="line">`age` int ,</span><br><span class="line">`university` varchar(32) NOT NULL,</span><br><span class="line">`gpa` float);</span><br><span class="line">INSERT INTO user_profile VALUES(1,2138,&#x27;male&#x27;,21,&#x27;北京大学&#x27;,3.4);</span><br><span class="line">INSERT INTO user_profile VALUES(2,3214,&#x27;male&#x27;,23,&#x27;复旦大学&#x27;,4.0);</span><br><span class="line">INSERT INTO user_profile VALUES(3,6543,&#x27;female&#x27;,20,&#x27;北京大学&#x27;,3.2);</span><br><span class="line">INSERT INTO user_profile VALUES(4,2315,&#x27;female&#x27;,23,&#x27;浙江大学&#x27;,3.6);</span><br><span class="line">INSERT INTO user_profile VALUES(5,5432,&#x27;male&#x27;,25,&#x27;山东大学&#x27;,3.8);</span><br><span class="line">INSERT INTO user_profile VALUES(6,2131,&#x27;male&#x27;,28,&#x27;北京师范大学&#x27;,3.3);</span><br></pre></td></tr></table></figure>

<p>现在运营想要取出用户信息表中所有的明细数据，并先按照gpa、年龄降序排序输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select device_id,gpa,age from user_profile order by gpa desc, age desc</span><br></pre></td></tr></table></figure>

<p>DESC 关键字只应用到直接位于其前面的列名，在上例中，t同时对gpa和 age 列指定 DESC 。因此，gpa列以降序排序，age 列也以降序排序e 列（在每个价格内）仍然按标准的升序排序。在多个列上降序排序 如果想在多个列上进行降序排序，必须对每个列指定 DESC 关键字。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql日期格式化</title>
    <url>/2022/05/03/mysql%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    <content><![CDATA[<p>mysql中常用的时间格式化方法统计。<span id="more"></span></p>
<p>如果要查询订单时间在5月1号到5月12号之间的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">From</span> <span class="keyword">order</span> <span class="keyword">Where</span> DATE_FORMAT(createTime,<span class="string">&#x27;%m-%d&#x27;</span>) <span class="operator">&gt;=</span> <span class="string">&#x27;05-01&#x27;</span> </span><br><span class="line"><span class="keyword">and</span> DATE_FORMAT(createTime,<span class="string">&#x27;%m-%d&#x27;</span>) <span class="operator">&lt;=</span> <span class="string">&#x27;05-12&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>**DATE_FORMAT(date,format)**函数用于以不同的格式显示日期&#x2F;时间数据。 date是日期列,format是格式</p>
<p><strong>STR_TO_DATE(str,format)</strong> 将字符串转成日期</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> STR_TO_DATE(<span class="string">&#x27;2018-06-01&#x27;</span>,<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line"><span class="operator">&gt;&gt;</span> <span class="number">2018</span><span class="number">-06</span><span class="number">-01</span></span><br></pre></td></tr></table></figure>

<h4 id="format的各种格式"><a href="#format的各种格式" class="headerlink" title="format的各种格式"></a>format的各种格式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%W 星期名字(Sunday……Saturday) </span><br><span class="line">%D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。） </span><br><span class="line">%Y 年, 数字, 4 位 </span><br><span class="line">%y 年, 数字, 2 位 </span><br><span class="line">%a 缩写的星期名字(Sun……Sat) </span><br><span class="line">%d 月份中的天数, 数字(00……31) </span><br><span class="line">%e 月份中的天数, 数字(0……31) </span><br><span class="line">%m 月, 数字(01……12) </span><br><span class="line">%c 月, 数字(1……12) </span><br><span class="line">%b 缩写的月份名字(Jan……Dec) </span><br><span class="line">%j 一年中的天数(001……366) </span><br><span class="line">%H 小时(00……23) </span><br><span class="line">%k 小时(0……23) </span><br><span class="line">%h 小时(01……12) </span><br><span class="line">%I 小时(01……12) </span><br><span class="line">%l 小时(1……12) </span><br><span class="line">%i 分钟, 数字(00……59) </span><br><span class="line">%r 时间,12 小时(hh:mm:ss [AP]M) </span><br><span class="line">%T 时间,24 小时(hh:mm:ss) </span><br><span class="line">%S 秒(00……59) </span><br><span class="line">%s 秒(00……59) </span><br><span class="line">%p AM或PM </span><br><span class="line">%w 一个星期中的天数(0=Sunday ……6=Saturday ） </span><br><span class="line">%U 星期(0……52), 这里星期天是星期的第一天 </span><br><span class="line">%u 星期(0……52), 这里星期一是星期的第一天 </span><br><span class="line">%% 一个文字“%”。</span><br></pre></td></tr></table></figure>

<h4 id="获取当前的时间"><a href="#获取当前的时间" class="headerlink" title="获取当前的时间"></a>获取当前的时间</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NOW(),							当前时间戳</span><br><span class="line">CURDATE(),						当前日期</span><br><span class="line">CURTIME(3),						当前时间,可选参数,为时间精度</span><br><span class="line">CURRENT_DATE(),					当前日期</span><br><span class="line">CURRENT_TIME(3),				当前时间,可选参数,为时间精度</span><br><span class="line">CURRENT_TIMESTAMP(2),			当前时间戳</span><br><span class="line">CURRENT_DATE,					当前日期</span><br><span class="line">CURRENT_TIME,					当前时间</span><br><span class="line">CURRENT_TIMESTAMP				当前时间戳</span><br></pre></td></tr></table></figure>

<h4 id="获取某个部分的时间信息"><a href="#获取某个部分的时间信息" class="headerlink" title="获取某个部分的时间信息"></a>获取某个部分的时间信息</h4><p>DATE(date) 只获取日期信息如:2018-06-01</p>
<p>EXTRACT(unit FROM date)函数用于返回日期&#x2F;时间的单独部分，比如年、月、日、小时、分钟等等。</p>
<p>Unit 值:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MICROSECOND</span><br><span class="line">SECOND</span><br><span class="line">MINUTE</span><br><span class="line">HOUR</span><br><span class="line">DAY</span><br><span class="line">WEEK</span><br><span class="line">MONTH</span><br><span class="line">QUARTER</span><br><span class="line">YEAR</span><br><span class="line">SECOND_MICROSECOND</span><br><span class="line">MINUTE_MICROSECOND</span><br><span class="line">MINUTE_SECOND</span><br><span class="line">HOUR_MICROSECOND</span><br><span class="line">HOUR_SECOND</span><br><span class="line">HOUR_MINUTE</span><br><span class="line">DAY_MICROSECOND</span><br><span class="line">DAY_SECOND</span><br><span class="line">DAY_MINUTE</span><br><span class="line">DAY_HOUR</span><br><span class="line">YEAR_MONTH</span><br></pre></td></tr></table></figure>

<p>比如想知道6月1号是哪个季度</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(QUARTER <span class="keyword">FROM</span>  STR_TO_DATE(<span class="string">&#x27;2018-06-01&#x27;</span>,<span class="string">&#x27;%Y-%m-%d&#x27;</span>) )</span><br><span class="line"><span class="operator">&gt;&gt;</span><span class="operator">&gt;</span><span class="number">2</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>office所有后缀对应的content-type</title>
    <url>/2022/05/03/office%E6%89%80%E6%9C%89%E5%90%8E%E7%BC%80%E5%AF%B9%E5%BA%94%E7%9A%84content-type/</url>
    <content><![CDATA[<p>office对应文档后缀类型<span id="more"></span></p>
<table>
<thead>
<tr>
<th>后缀</th>
<th>MIME Type</th>
</tr>
</thead>
<tbody><tr>
<td>.doc</td>
<td>application&#x2F;msword</td>
</tr>
<tr>
<td>.dot</td>
<td>application&#x2F;msword</td>
</tr>
<tr>
<td>.docx</td>
<td>application&#x2F;vnd.openxmlformats-officedocument.wordprocessingml.document</td>
</tr>
<tr>
<td>.dotx</td>
<td>application&#x2F;vnd.openxmlformats-officedocument.wordprocessingml.template</td>
</tr>
<tr>
<td>.docm</td>
<td>application&#x2F;vnd.ms-word.document.macroEnabled.12</td>
</tr>
<tr>
<td>.dotm</td>
<td>application&#x2F;vnd.ms-word.template.macroEnabled.12</td>
</tr>
<tr>
<td>.xls</td>
<td>application&#x2F;vnd.ms-excel</td>
</tr>
<tr>
<td>.xlt</td>
<td>application&#x2F;vnd.ms-excel</td>
</tr>
<tr>
<td>.xla</td>
<td>application&#x2F;vnd.ms-excel</td>
</tr>
<tr>
<td>.xlsx</td>
<td>application&#x2F;vnd.openxmlformats-officedocument.spreadsheetml.sheet</td>
</tr>
<tr>
<td>.xltx</td>
<td>application&#x2F;vnd.openxmlformats-officedocument.spreadsheetml.template</td>
</tr>
<tr>
<td>.xlsm</td>
<td>application&#x2F;vnd.ms-excel.sheet.macroEnabled.12</td>
</tr>
<tr>
<td>.xltm</td>
<td>application&#x2F;vnd.ms-excel.template.macroEnabled.12</td>
</tr>
<tr>
<td>.xlam</td>
<td>application&#x2F;vnd.ms-excel.addin.macroEnabled.12</td>
</tr>
<tr>
<td>.xlsb</td>
<td>application&#x2F;vnd.ms-excel.sheet.binary.macroEnabled.12</td>
</tr>
<tr>
<td>.ppt</td>
<td>application&#x2F;vnd.ms-powerpoint</td>
</tr>
<tr>
<td>.pot</td>
<td>application&#x2F;vnd.ms-powerpoint</td>
</tr>
<tr>
<td>.pps</td>
<td>application&#x2F;vnd.ms-powerpoint</td>
</tr>
<tr>
<td>.ppa</td>
<td>application&#x2F;vnd.ms-powerpoint</td>
</tr>
<tr>
<td>.pptx</td>
<td>application&#x2F;vnd.openxmlformats-officedocument.presentationml.presentation</td>
</tr>
<tr>
<td>.potx</td>
<td>application&#x2F;vnd.openxmlformats-officedocument.presentationml.template</td>
</tr>
<tr>
<td>.ppsx</td>
<td>application&#x2F;vnd.openxmlformats-officedocument.presentationml.slideshow</td>
</tr>
<tr>
<td>.ppam</td>
<td>application&#x2F;vnd.ms-powerpoint.addin.macroEnabled.12</td>
</tr>
<tr>
<td>.pptm</td>
<td>application&#x2F;vnd.ms-powerpoint.presentation.macroEnabled.12</td>
</tr>
<tr>
<td>.potm</td>
<td>application&#x2F;vnd.ms-powerpoint.presentation.macroEnabled.12</td>
</tr>
<tr>
<td>.ppsm</td>
<td>application&#x2F;vnd.ms-powerpoint.slideshow.macroEnabled.12</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle中的数学公式</title>
    <url>/2022/05/03/oracle%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<p>oracle中的数学公式函数<span id="more"></span></p>
<h5 id="协方差"><a href="#协方差" class="headerlink" title="协方差"></a>协方差</h5><p>COVAR_POP 函数 [集合]：返回一组数字对的总体协方差。</p>
<h6 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COVAR_POP (&lt;dependent-expression&gt;, &lt;independent-expression&gt;)</span><br></pre></td></tr></table></figure>

<h6 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h6><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>dependent-expression</td>
<td>受独立变量影响的变量</td>
</tr>
<tr>
<td>independent-expression</td>
<td>影响结果的变量</td>
</tr>
</tbody></table>
<h6 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h6><p>此函数将其参数转换为 DOUBLE，执行双精度浮点计算，并返回一个 DOUBLE 作为结果。如果将 <em>COVAR_POP</em> 应用于空集，它将返回 NULL。</p>
<p>dependent-expression 和 independent-expression 都是数值。在消除 dependent-expression 或 independent-expression 为 NULL 的值对之后，系统会将此函数应用于 dependent-expression 和 independent-expression 的集合。然后执行以下计算：<br>$$<br>(sum(x*y)-sum(x)*sum(y)&#x2F;n)&#x2F;n<br>$$<br>其中 x 表示 dependent-expression，y 表示 independent-expression。</p>
<h6 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> owner, <span class="built_in">COVAR_POP</span>(avg_row_len, avg_space)</span><br><span class="line"> <span class="keyword">from</span> all_tables</span><br><span class="line"> <span class="keyword">group</span> <span class="keyword">by</span> owner;</span><br></pre></td></tr></table></figure>

<p>[^注意]: GROUP BY 子句不支持 ROLLUP 和 CUBE。DISTINCT 不受支持。</p>
<h5 id="方差"><a href="#方差" class="headerlink" title="方差"></a>方差</h5><p>VAR_POP 函数 [集合]：计算由 numeric-expression 组成的总体的统计方差，类型为 DOUBLE。返回值DOUBLE。</p>
<h6 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VAR_POP ( [ ALL ] &lt;expression&gt; )</span><br></pre></td></tr></table></figure>

<h6 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h6><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>expression</td>
<td>要对一组行计算基于总体的方差的表达式（通常是列名）</td>
</tr>
</tbody></table>
<h6 id="注释-1"><a href="#注释-1" class="headerlink" title="注释"></a>注释</h6><p>计算所提供的针对每个组行或分区行（如果指定了 DISTINCT，则为在消除重复项后剩余的各行）求值的 的总体方差，其定义为： 与 均值之差的平方和，然后再除以组中或分区中剩余的行数。</p>
<p>基于总体的方差是根据以下公式计算的：<br>$$<br>∑(xi-x̅)²&#x2F;n<br>$$</p>
<h6 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h6><p>以下语句列出不同时间段每个订单的产品数目的平均值和方差：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">year</span>( ShipDate ) <span class="keyword">AS</span> <span class="keyword">Year</span>, quarter( ShipDate )</span><br><span class="line">  <span class="keyword">AS</span> Quarter, <span class="built_in">AVG</span>( Quantity ) <span class="keyword">AS</span> Average, </span><br><span class="line">  <span class="built_in">VAR_POP</span>( Quantity ) <span class="keyword">AS</span> Variance </span><br><span class="line"><span class="keyword">FROM</span> SalesOrderItems <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">Year</span>, Quarter </span><br><span class="line">  <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">Year</span>, Quarter</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>年</th>
<th>季度</th>
<th>平均值</th>
<th>方差</th>
</tr>
</thead>
<tbody><tr>
<td>2000</td>
<td>1</td>
<td>25.775148</td>
<td>203.9021</td>
</tr>
<tr>
<td>2000</td>
<td>2</td>
<td>27.050847</td>
<td>225.8109</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>package与import</title>
    <url>/2022/05/04/package%E4%B8%8Eimport/</url>
    <content><![CDATA[<p>package和import的说明<span id="more"></span></p>
<h4 id="package"><a href="#package" class="headerlink" title="package"></a>package</h4><p>为了更好地组织类，Java提供了包机制。包是类的容器，用于分隔类名空间。如果没有指定包名，所有的示例都属于一个默认的无名包。Java中的包一般均包含相关的类，java是跨平台的，所以java中的包和操作系统没有任何关系，java的包是用来组织文件的一种虚拟文件系统。</p>
<h4 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h4><p>语句并没有将对应的java源文件拷贝到此处仅仅是引入，告诉编译器有使用外部文件，编译的时候要去读取这个外部文件。</p>
<p>定义在同一个包（package）内的类可以不经过import而直接相互使用。</p>
<p>类只能被public、abstract、final、default修饰，那么定义在同一个包（package）内的类必然可以不经过import而直接相互使用。</p>
<p>private修饰类的话只能修饰内部类，内部类是外部类的一个成员，所以可以访问外部类的私有属性</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>python3的正则表达式</title>
    <url>/2022/01/09/python3%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>主要介绍 Python 中常用的正则表达式处理函数。<span id="more"></span></p>
<h6 id="正则表达式模式"><a href="#正则表达式模式" class="headerlink" title="正则表达式模式"></a>正则表达式模式</h6><p>  字母和数字代表它们自身，标点符号只有被转义时才匹配自身，反斜杠本身需要使用反斜杠转义。</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>^</td>
<td>匹配字符串的开头。</td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串的末尾。</td>
</tr>
<tr>
<td>.</td>
<td>匹配任意字符，除了换行符。</td>
</tr>
<tr>
<td>[…]</td>
<td>用来表示一组字符,单独列出：[amk] 匹配 ‘a’，’m’或’k’</td>
</tr>
<tr>
<td>[^…]</td>
<td>不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。</td>
</tr>
<tr>
<td>re*</td>
<td>匹配0个或多个的表达式。</td>
</tr>
<tr>
<td>re+</td>
<td>匹配1个或多个的表达式。</td>
</tr>
<tr>
<td>re?</td>
<td>匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式</td>
</tr>
<tr>
<td>re{ n}</td>
<td>匹配n个前面表达式。例如，”o{2}”不能匹配”Bob”中的”o”，但是能匹配”food”中的两个o。</td>
</tr>
<tr>
<td>re{ n,}</td>
<td>精确匹配n个前面表达式。例如，”o{2,}”不能匹配”Bob”中的”o”，但能匹配”foooood”中的所有o。”o{1,}”等价于”o+”。”o{0,}”则等价于”o*”。</td>
</tr>
<tr>
<td>re{ n, m}</td>
<td>匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式。</td>
</tr>
<tr>
<td>a | b</td>
<td>匹配a或b。</td>
</tr>
<tr>
<td>(re)</td>
<td>匹配括号内的表达式，也表示一个组。</td>
</tr>
<tr>
<td>(?imx)</td>
<td>正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。</td>
</tr>
<tr>
<td>(?-imx)</td>
<td>正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。</td>
</tr>
<tr>
<td>(?: re)</td>
<td>类似 (…), 但是不表示一个组。</td>
</tr>
<tr>
<td>(?imx: re)</td>
<td>在括号中使用i, m, 或 x 可选标志。</td>
</tr>
<tr>
<td>(?-imx: re)</td>
<td>在括号中不使用i, m, 或 x 可选标志。</td>
</tr>
<tr>
<td>(?#…)</td>
<td>注释。</td>
</tr>
<tr>
<td>(?&#x3D; re)</td>
<td>前向肯定界定符。如果所含正则表达式，以 … 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。</td>
</tr>
<tr>
<td>(?! re)</td>
<td>前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功。</td>
</tr>
<tr>
<td>(?&gt; re)</td>
<td>匹配的独立模式，省去回溯。</td>
</tr>
<tr>
<td>\w</td>
<td>匹配数字字母下划线。</td>
</tr>
<tr>
<td>\W</td>
<td>匹配非数字字母下划线。等价于 [ ^A-Za-z0-9_ ]。</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任意空白字符，等价于 [\t\n\r\f]。</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任意非空字符。等价于 [ ^ \f\n\r\t\v ]。</td>
</tr>
<tr>
<td>\d</td>
<td>匹配任意数字，等价于 [0-9]。</td>
</tr>
<tr>
<td>\D</td>
<td>匹配任意非数字。等价于 [ ^0-9 ]。</td>
</tr>
<tr>
<td>\A</td>
<td>匹配字符串开始。</td>
</tr>
<tr>
<td>\Z</td>
<td>匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。</td>
</tr>
<tr>
<td>\z</td>
<td>匹配字符串结束。</td>
</tr>
<tr>
<td>\G</td>
<td>匹配最后匹配完成的位置。</td>
</tr>
<tr>
<td>\b</td>
<td>匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td>
</tr>
<tr>
<td>\B</td>
<td>匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td>
</tr>
<tr>
<td>\n, \t, 等。</td>
<td>匹配一个换行符。匹配一个制表符, 等。</td>
</tr>
<tr>
<td>\1…\9</td>
<td>匹配第n个分组的内容。</td>
</tr>
<tr>
<td>\10</td>
<td>匹配第n个分组的内容，如果它经匹配。否则指的是八进制字符码的表达式。</td>
</tr>
</tbody></table>
<h6 id="正则表达式修饰符-可选标志"><a href="#正则表达式修饰符-可选标志" class="headerlink" title="正则表达式修饰符-可选标志"></a>正则表达式修饰符-可选标志</h6><p>多个标志可以用|来指定。</p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>re.I</td>
<td>使匹配对大小写不敏感</td>
</tr>
<tr>
<td>re.L</td>
<td>做本地化识别（locale-aware）匹配</td>
</tr>
<tr>
<td>re.M</td>
<td>多行匹配，影响 ^ 和 $</td>
</tr>
<tr>
<td>re.S</td>
<td>使 . 匹配包括换行在内的所有字符</td>
</tr>
<tr>
<td>re.U</td>
<td>根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.</td>
</tr>
<tr>
<td>re.X</td>
<td>该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。</td>
</tr>
</tbody></table>
<h6 id="正则表达式对象"><a href="#正则表达式对象" class="headerlink" title="正则表达式对象"></a>正则表达式对象</h6><ol>
<li><p>re.RegexObject</p>
<p> re.compile()返回RegexObject对象。</p>
</li>
<li><p>re.MatchObject</p>
<p> group()返回被RE匹配的字符串</p>
<ul>
<li>start()返回匹配开始的位置</li>
<li>end()返回匹配结束的位置</li>
<li>span()返回一个元组包含匹配(开始，结束)的位置</li>
</ul>
</li>
</ol>
<h6 id="re-match函数"><a href="#re-match函数" class="headerlink" title="re.match函数"></a>re.match函数</h6><p>  re.match尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.match(pattern, string, flag=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>pattern</td>
<td>匹配的正则表达式</td>
</tr>
<tr>
<td>string</td>
<td>要匹配的字符串。</td>
</tr>
<tr>
<td>flags</td>
<td>标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="built_in">print</span>(re.match(<span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>).span())  <span class="comment"># 在起始位置匹配</span></span><br><span class="line"><span class="built_in">print</span>(re.match(<span class="string">&#x27;com&#x27;</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>))         <span class="comment"># 不在起始位置匹配</span></span><br><span class="line">(<span class="number">0</span>,<span class="number">3</span>)</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p>  使用group(num) 或 groups()可以匹配对象函数来获取匹配表达式</p>
<table>
<thead>
<tr>
<th>匹配对象方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>group(num&#x3D;0)</td>
<td>匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</td>
</tr>
<tr>
<td>groups()</td>
<td>返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">line = <span class="string">&quot;Cats are smarter than dogs&quot;</span></span><br><span class="line"><span class="comment"># .* 表示任意匹配除换行符（\n、\r）之外的任何单个或多个字符</span></span><br><span class="line">matchObj = re.match( <span class="string">r&#x27;(.*) are (.*?) .*&#x27;</span>, line, re.M|re.I)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> matchObj:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;matchObj.group() : &quot;</span>, matchObj.group())</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;matchObj.group(1) : &quot;</span>, matchObj.group(<span class="number">1</span>))</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;matchObj.group(2) : &quot;</span>, matchObj.group(<span class="number">2</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;No match!!&quot;</span>)</span><br><span class="line">matchObj.group() :  Cats are smarter than dogs</span><br><span class="line">matchObj.group(<span class="number">1</span>) :  Cats</span><br><span class="line">matchObj.group(<span class="number">2</span>) :  smarter</span><br></pre></td></tr></table></figure>

<h6 id="re-search方法"><a href="#re-search方法" class="headerlink" title="re.search方法"></a>re.search方法</h6><p>  re.search扫描整个字符串并返回第一个成功的匹配，否则返回None。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(pattern, string, flags=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>).span())  <span class="comment"># 在起始位置匹配</span></span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&#x27;com&#x27;</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>).span())         <span class="comment"># 不在起始位置匹配</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">(<span class="number">11</span>, <span class="number">14</span>)</span><br></pre></td></tr></table></figure>

<h6 id="re-match与re-search的区别"><a href="#re-match与re-search的区别" class="headerlink" title="re.match与re.search的区别"></a>re.match与re.search的区别</h6><p>  re.match 只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回 None，而 re.search 匹配整个字符串，直到找到一个匹配。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">line = <span class="string">&quot;Cats are smarter than dogs&quot;</span></span><br><span class="line"> </span><br><span class="line">matchObj = re.match( <span class="string">r&#x27;dogs&#x27;</span>, line, re.M|re.I)</span><br><span class="line"><span class="keyword">if</span> matchObj:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;match --&gt; matchObj.group() : &quot;</span>, matchObj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;No match!!&quot;</span>)</span><br><span class="line"> </span><br><span class="line">matchObj = re.search( <span class="string">r&#x27;dogs&#x27;</span>, line, re.M|re.I)</span><br><span class="line"><span class="keyword">if</span> matchObj:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;search --&gt; matchObj.group() : &quot;</span>, matchObj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;No match!!&quot;</span>)</span><br><span class="line">No match!!</span><br><span class="line">search --&gt; matchObj.group() :  dogs</span><br></pre></td></tr></table></figure>

<h6 id="re-sub函数"><a href="#re-sub函数" class="headerlink" title="re.sub函数"></a>re.sub函数</h6><p>  re.sub用于替换字符串中匹配项。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.sub(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>pattern : 正则中的模式字符串。</li>
<li>repl : 替换的字符串，也可为一个函数。</li>
<li>string : 要被查找替换的原始字符串。</li>
<li>count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。</li>
<li>flags : 编译时用的匹配模式，数字形式。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">phone = <span class="string">&quot;2004-959-559 # 这是一个电话号码&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除注释</span></span><br><span class="line">num = re.sub(<span class="string">r&#x27;#.*$&#x27;</span>, <span class="string">&quot;&quot;</span>, phone)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;电话号码 : &quot;</span>, num)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 移除非数字的内容</span></span><br><span class="line">num = re.sub(<span class="string">r&#x27;\D&#x27;</span>, <span class="string">&quot;&quot;</span>, phone)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;电话号码 : &quot;</span>, num)</span><br><span class="line">电话号码 :  <span class="number">2004</span>-<span class="number">959</span>-<span class="number">559</span> </span><br><span class="line">电话号码 :  <span class="number">2004959559</span></span><br></pre></td></tr></table></figure>

<p>repl参数也可以是一个函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将匹配的数字乘于 2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">double</span>(<span class="params">matched</span>):</span><br><span class="line">    value = <span class="built_in">int</span>(matched.group(<span class="string">&#x27;value&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(value * <span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line">s = <span class="string">&#x27;A23G4HFD567&#x27;</span></span><br><span class="line"><span class="comment"># ?P&lt;value&gt;的意思是命名一个名字为value的组，匹配规则符合后面的/d+</span></span><br><span class="line"><span class="built_in">print</span>(re.sub(<span class="string">&#x27;(?P&lt;value&gt;\d+)&#x27;</span>, double, s))</span><br><span class="line">A46G8HFD1134</span><br></pre></td></tr></table></figure>

<h6 id="complie函数"><a href="#complie函数" class="headerlink" title="complie函数"></a>complie函数</h6><p>  compile 函数用于编译正则表达式，生成一个正则表达式 (Pattern) 对象，供 match() 和 search() 这两个函数使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.<span class="built_in">compile</span>(pattern, flags)</span><br></pre></td></tr></table></figure>

<ul>
<li>pattern : 一个字符串形式的正则表达式</li>
<li>flags 可选，表示匹配模式，比如忽略大小写，多行模式等，具体参数为：</li>
<li><ul>
<li>re.I 忽略大小写<ul>
<li>re.L 表示特殊字符集 \w, \W, \b, \B, \s, \S 依赖于当前环境</li>
<li>re.M 多行模式</li>
<li>re.S 即为’ . ‘并且包括换行符在内的任意字符（’ . ‘不包括换行符）</li>
<li>re.U 表示特殊字符集 \w, \W, \b, \B, \d, \D, \s, \S 依赖于 Unicode 字符属性数据库</li>
<li>re.X 为了增加可读性，忽略空格和’ # ‘后面的注释</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\d+&#x27;</span>)                    <span class="comment"># 用于匹配至少一个数字</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">&#x27;one12twothree34four&#x27;</span>)        <span class="comment"># 查找头部，没有匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>( m )</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">&#x27;one12twothree34four&#x27;</span>, <span class="number">2</span>, <span class="number">10</span>) <span class="comment"># 从&#x27;e&#x27;的位置开始匹配，没有匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>( m )</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">&#x27;one12twothree34four&#x27;</span>, <span class="number">3</span>, <span class="number">10</span>) <span class="comment"># 从&#x27;1&#x27;的位置开始匹配，正好匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>( m )                                        <span class="comment"># 返回一个 Match 对象</span></span><br><span class="line">&lt;_sre.SRE_Match <span class="built_in">object</span> at <span class="number">0x10a42aac0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>)   <span class="comment"># 可省略 0</span></span><br><span class="line"><span class="string">&#x27;12&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.start(<span class="number">0</span>)   <span class="comment"># 可省略 0</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.end(<span class="number">0</span>)     <span class="comment"># 可省略 0</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.span(<span class="number">0</span>)    <span class="comment"># 可省略 0</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<h6 id="re-findall"><a href="#re-findall" class="headerlink" title="re.findall"></a>re.findall</h6><p>  在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(string, pos, endpos)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>string</strong> 待匹配的字符串。</li>
<li><strong>pos</strong> 可选参数，指定字符串的起始位置，默认为 0。</li>
<li><strong>endpos</strong> 可选参数，指定字符串的结束位置，默认为字符串的长度。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\d+&#x27;</span>)   <span class="comment"># 查找数字</span></span><br><span class="line">result1 = pattern.findall(<span class="string">&#x27;runoob 123 google 456&#x27;</span>)</span><br><span class="line">result2 = pattern.findall(<span class="string">&#x27;run88oob123google456&#x27;</span>, <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(result1)</span><br><span class="line"><span class="built_in">print</span>(result2)</span><br><span class="line">[<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;456&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;88&#x27;</span>, <span class="string">&#x27;12&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h6 id="re-finditer"><a href="#re-finditer" class="headerlink" title="re.finditer"></a>re.finditer</h6><p>  和 findall 类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.finditer(pattern, string, flags=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">it = re.finditer(<span class="string">r&quot;\d+&quot;</span>,<span class="string">&quot;12a32bc43jf3&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> match <span class="keyword">in</span> it: </span><br><span class="line">    <span class="built_in">print</span> (match.group() )</span><br><span class="line"><span class="number">12</span> </span><br><span class="line"><span class="number">32</span> </span><br><span class="line"><span class="number">43</span> </span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h6 id="re-split"><a href="#re-split" class="headerlink" title="re.split"></a>re.split</h6><p>  split 方法按照能够匹配的子串将字符串分割后返回列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.split(pattern, string, maxsplit=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">&#x27;\W+&#x27;</span>, <span class="string">&#x27;runoob, runoob, runoob.&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">&#x27;(\W+)&#x27;</span>, <span class="string">&#x27; runoob, runoob, runoob.&#x27;</span>) </span><br><span class="line">[<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;, &#x27;</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;, &#x27;</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">&#x27;\W+&#x27;</span>, <span class="string">&#x27; runoob, runoob, runoob.&#x27;</span>, <span class="number">1</span>) </span><br><span class="line">[<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;runoob, runoob, runoob.&#x27;</span>]</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">&#x27;a*&#x27;</span>, <span class="string">&#x27;hello world&#x27;</span>)   <span class="comment"># 对于一个找不到匹配的字符串而言，split 不会对其作出分割</span></span><br><span class="line">[<span class="string">&#x27;hello world&#x27;</span>]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle日期格式</title>
    <url>/2022/05/03/oracle%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<p>不同格式日期之间转换<span id="more"></span></p>
<h5 id="TO-DATE"><a href="#TO-DATE" class="headerlink" title="TO_DATE"></a>TO_DATE</h5><p>TO_DATE的日期格式参数中，如果24小时显示，需要使用<code>HH24</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> to_date(<span class="string">&#x27;2020-07-12 10:00:00&#x27;</span>, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>

<p><strong>由于oracle中不区分大小写问题，所以分钟使用mi表示；如果使用mm，则会和月份冲突，引起错误。</strong></p>
<p>参数省略HH、MM、SS时，oracle默认取值为0，即只显示到日。</p>
<p>同样，省略DD参数，oracle默认取值为1，取整到当前月；但是省略MM并不会取整到年。</p>
<h5 id="TO-CHAR"><a href="#TO-CHAR" class="headerlink" title="TO_CHAR"></a>TO_CHAR</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> to_char(sysdate,<span class="string">&#x27;W&#x27;</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Q</td>
<td>当年季度</td>
</tr>
<tr>
<td>W</td>
<td>当月第几周</td>
</tr>
<tr>
<td>WW</td>
<td>当年第几周</td>
</tr>
<tr>
<td>D</td>
<td>一周的第几天(周日为第一天)</td>
</tr>
<tr>
<td>DD</td>
<td>当月第几天</td>
</tr>
<tr>
<td>DDD</td>
<td>当年第几天</td>
</tr>
<tr>
<td>DY</td>
<td>星期几简写</td>
</tr>
<tr>
<td>DAY</td>
<td>星期几全称</td>
</tr>
</tbody></table>
<p>可以在参数后设置日期语言</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> to_char(to_date(<span class="string">&#x27;2002-08-26&#x27;</span>,<span class="string">&#x27;yyyy-mm-dd&#x27;</span>),<span class="string">&#x27;day&#x27;</span>,<span class="string">&#x27;NLS_DATE_LANGUAGE = American&#x27;</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>

<p>得到当天凌晨0点0分0秒的日期</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> trunc(sysdate) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>

<p>得到这天的最后一秒</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> trunc(sysdate) <span class="operator">+</span> <span class="number">0.99999</span> <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>

<p>得到小时的具体数值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> trunc(sysdate) <span class="operator">+</span> <span class="number">1</span><span class="operator">/</span><span class="number">24</span> <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>

<p>得到明天凌晨0点0分0秒的日期</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> trunc(sysdate<span class="operator">+</span><span class="number">1</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>

<p>本月一日的日期</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> trunc(sysdate,<span class="string">&#x27;mm&#x27;</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>

<p>得到下月一日的日期</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> trunc(add_months(sysdate,<span class="number">1</span>),<span class="string">&#x27;mm&#x27;</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>

<p>返回当前月的最后一天</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> last_day(sysdate) <span class="keyword">from</span> dual; </span><br><span class="line"><span class="keyword">select</span> last_day(trunc(sysdate)) <span class="keyword">from</span> dual; </span><br><span class="line"><span class="keyword">select</span> trunc(last_day(sysdate)) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> trunc(add_months(sysdate,<span class="number">1</span>),<span class="string">&#x27;mm&#x27;</span>) <span class="operator">-</span> <span class="number">1</span> <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>

<p>得到一年的每一天</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> trunc(sysdate,<span class="string">&#x27;yyyy&#x27;</span>)<span class="operator">+</span> rn <span class="number">-1</span> date0 </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> rownum rn <span class="keyword">from</span> all_objects <span class="keyword">where</span> rownum<span class="operator">&lt;</span><span class="number">366</span>);</span><br></pre></td></tr></table></figure>

<p>判断某一日子所在年分是否为润年</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> decode(to_char(last_day(trunc(sysdate,<span class="string">&#x27;y&#x27;</span>)<span class="operator">+</span><span class="number">31</span>),<span class="string">&#x27;dd&#x27;</span>),<span class="string">&#x27;29&#x27;</span>,<span class="string">&#x27;闰年&#x27;</span>,<span class="string">&#x27;平年&#x27;</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬取网页</title>
    <url>/2022/01/09/python%E7%88%AC%E5%8F%96%E7%BD%91%E9%A1%B5/</url>
    <content><![CDATA[<p>爬取最新电影，内容包括标题、年代、产地、类别、评分、片场、导演、主演、下载链接。<span id="more"></span></p>
<h6 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">base_domain = <span class="string">&quot;https://www.dytt8.net&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 &quot;</span></span><br><span class="line">                  <span class="string">&quot;(KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36 Edg/80.0.361.111&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_detail_url</span>(<span class="params">url</span>):</span><br><span class="line">    resp = requests.get(url, headers=headers)</span><br><span class="line">    <span class="comment"># 解码出现&quot;illegal multibyte sequence&quot;，其他编码无法解决，使用ignore</span></span><br><span class="line">    <span class="comment"># text = resp.content.decode(&quot;gbk&quot;, errors=&quot;ignore&quot;)</span></span><br><span class="line">    text = resp.text</span><br><span class="line">    html = etree.HTML(text)</span><br><span class="line">    detail_urls = html.xpath(<span class="string">&quot;//table[@class=&#x27;tbspan&#x27;]//a/@href&quot;</span>)</span><br><span class="line">    detail_urls = <span class="built_in">map</span>(<span class="keyword">lambda</span> url: base_domain + url, detail_urls)</span><br><span class="line">    <span class="keyword">return</span> detail_urls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_html</span>(<span class="params">url</span>):</span><br><span class="line">    resp = requests.get(url, headers=headers)</span><br><span class="line">    text = resp.content.decode(<span class="string">&quot;gbk&quot;</span>, errors=<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line">    html = etree.HTML(text)</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_info</span>(<span class="params">info, rule</span>):</span><br><span class="line">    <span class="keyword">return</span> info.replace(rule, <span class="string">&quot;&quot;</span>).strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_detail_page</span>(<span class="params">url</span>):</span><br><span class="line">    movie = &#123;&#125;</span><br><span class="line">    html = get_html(url)</span><br><span class="line">    title = html.xpath(<span class="string">&quot;//div[@class=&#x27;title_all&#x27;]//font[@color=&#x27;#07519a&#x27;]/text()&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    movie[<span class="string">&quot;title&quot;</span>] = title</span><br><span class="line">    zooms = html.xpath(<span class="string">&quot;//div[@id=&#x27;Zoom&#x27;]&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    poster = zooms.xpath(<span class="string">&quot;.//img/@src&quot;</span>)</span><br><span class="line">    movie[<span class="string">&quot;poster&quot;</span>] = poster</span><br><span class="line"></span><br><span class="line">    infos = zooms.xpath(<span class="string">&quot;.//text()&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> index, info <span class="keyword">in</span> <span class="built_in">enumerate</span>(infos):</span><br><span class="line">        <span class="keyword">if</span> info.startswith(<span class="string">&quot;◎年　　代&quot;</span>):</span><br><span class="line">            info = parse_info(info, <span class="string">&quot;◎年　　代&quot;</span>)</span><br><span class="line">            movie[<span class="string">&quot;year&quot;</span>] = info</span><br><span class="line">        <span class="keyword">elif</span> info.startswith(<span class="string">&quot;◎产　　地&quot;</span>):</span><br><span class="line">            info = parse_info(info, <span class="string">&quot;◎产　　地&quot;</span>)</span><br><span class="line">            movie[<span class="string">&quot;country&quot;</span>] = info</span><br><span class="line">        <span class="keyword">elif</span> info.startswith(<span class="string">&quot;◎类　　别&quot;</span>):</span><br><span class="line">            info = parse_info(info, <span class="string">&quot;◎类　　别&quot;</span>)</span><br><span class="line">            movie[<span class="string">&quot;category&quot;</span>] = info</span><br><span class="line">        <span class="keyword">elif</span> info.startswith(<span class="string">&quot;◎豆瓣评分&quot;</span>):</span><br><span class="line">            info = parse_info(info, <span class="string">&quot;◎豆瓣评分&quot;</span>)</span><br><span class="line">            movie[<span class="string">&quot;score&quot;</span>] = info</span><br><span class="line">        <span class="keyword">elif</span> info.startswith(<span class="string">&quot;◎片　　长&quot;</span>):</span><br><span class="line">            info = parse_info(info, <span class="string">&quot;◎片　　长&quot;</span>)</span><br><span class="line">            movie[<span class="string">&quot;timelength&quot;</span>] = info</span><br><span class="line">        <span class="keyword">elif</span> info.startswith(<span class="string">&quot;◎导　　演&quot;</span>):</span><br><span class="line">            info = parse_info(info, <span class="string">&quot;◎导　　演&quot;</span>)</span><br><span class="line">            movie[<span class="string">&quot;director&quot;</span>] = info</span><br><span class="line">        <span class="keyword">elif</span> info.startswith(<span class="string">&quot;◎主　　演&quot;</span>):</span><br><span class="line">            info = parse_info(info, <span class="string">&quot;◎主　　演&quot;</span>)</span><br><span class="line">            actors = [info]</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(index + <span class="number">1</span>, <span class="built_in">len</span>(infos)):</span><br><span class="line">                actor = infos[x].strip()</span><br><span class="line">                <span class="keyword">if</span> actor.startswith(<span class="string">&quot;◎&quot;</span>):</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                actors.append(actor)</span><br><span class="line">            movie[<span class="string">&quot;actors&quot;</span>] = actors</span><br><span class="line">        <span class="keyword">elif</span> info.startswith(<span class="string">&quot;◎简　　介&quot;</span>):</span><br><span class="line">            info = parse_info(info, <span class="string">&quot;◎简　　介&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(index + <span class="number">1</span>, <span class="built_in">len</span>(infos)):</span><br><span class="line">                profile = infos[x].strip()</span><br><span class="line">                <span class="keyword">if</span> profile.startswith(<span class="string">&quot;【&quot;</span>):</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            movie[<span class="string">&quot;profile&quot;</span>] = profile</span><br><span class="line"></span><br><span class="line">    down_url = zooms.xpath(<span class="string">&quot;.//table//a/@href&quot;</span>)</span><br><span class="line">    movie[<span class="string">&quot;down_url&quot;</span>] = down_url</span><br><span class="line">    <span class="keyword">return</span> movie</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">spider</span>():</span><br><span class="line">    index_url = <span class="string">&quot;https://www.dytt8.net/html/gndy/dyzz/index.html&quot;</span></span><br><span class="line">    base_url = <span class="string">&quot;https://www.dytt8.net/html/gndy/dyzz/list_23_&#123;&#125;.html&quot;</span></span><br><span class="line">    html = get_html(index_url)</span><br><span class="line">    pages = html.xpath(<span class="string">&quot;//select[@name=&#x27;sldd&#x27;]/option&quot;</span>)</span><br><span class="line">    movies = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(pages) + <span class="number">1</span>):</span><br><span class="line">        url = base_url.<span class="built_in">format</span>(x)</span><br><span class="line">        detail_urls = get_detail_url(url)</span><br><span class="line">        <span class="keyword">for</span> detail_url <span class="keyword">in</span> detail_urls:</span><br><span class="line">            <span class="comment"># 遍历每一页中的所有电影</span></span><br><span class="line">            movie = parse_detail_page(detail_url)</span><br><span class="line">            movies.append(movie)</span><br><span class="line">            <span class="built_in">print</span>(movie)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    spider()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>springAOP</title>
    <url>/2022/01/12/springAOP/</url>
    <content><![CDATA[<p>spring AOP的术语<span id="more"></span></p>
<p> Aspect：切面，由一系列切点、增强和引入组成的模块对象，可定义优先级，从而影响增强和引入的执行顺序。事务管理（Transaction management）在java企业应用中就是一个很好的切面样例。所以他不是一个被代理的对象。</p>
<p>Join point：接入点，程序执行期的一个点，例如方法执行、类初始化、异常处理。 在Spring AOP中，接入点仅支持方法的连接点。</p>
<p>Advice：增强，切面在特定接入点的执行动作，包括 “around,” “before” and “after”等多种类型。包含Spring在内的许多AOP框架，通常会使用拦截器来实现增强，围绕着接入点维护着一个拦截器链。</p>
<p>Pointcut：切点，用来匹配特定接入点的谓词（表达式），增强将会与切点表达式产生关联，并运行在任何切点匹配到的接入点上。通过切点表达式匹配接入点是AOP的核心，Spring默认使用AspectJ的切点表达式。</p>
<p>Introduction：引入，为类添加一些属性和方法。Spring AOP允许你引入任何接口以及它的默认实现到被增强对象上。</p>
<p>Target object：目标对象，被一个或多个切面增强的对象。也叫作被增强对象。既然Spring AOP使用运行时代理（runtime proxies），那么目标对象就总是代理对象。</p>
<p>AOP proxy：AOP代理，为了实现切面功能一个对象会被AOP框架创建出来。在Spring框架中AOP代理的默认方式是：有接口，就使用基于接口的JDK动态代理，否则使用基于类的CGLIB动态代理。但是我们可以通过设置proxy-target-class&#x3D;”true”，完全使用CGLIB动态代理。</p>
<p>Weaving：织入，将一个或多个切面与类或对象链接在一起创建一个被增强对象。织入能发生在编译时 （compile time ）(使用AspectJ编译器)，加载时（load time），或运行时（runtime） 。Spring AOP默认就是运行时织入，可以通过枚举AdviceMode来设置。</p>
<h6 id="AOP的原理"><a href="#AOP的原理" class="headerlink" title="AOP的原理"></a>AOP的原理</h6><p>AOP（Aspect Orient Programming），指面向方面（切面）编程，作为面向对象的一种补充，用于处理系统中分布于各个模块的横切关注点，比如事务管理、日志、缓存等等。AOP实现的关键在于AOP框架自动创建的AOP代理，AOP代理主要分为静态代理和动态代理，静态代理的代表为AspectJ；而动态代理则以Spring AOP为代表。通常使用AspectJ的编译时增强实现AOP，AspectJ是静态代理的增强，所谓的静态代理就是AOP框架会在编译阶段生成AOP代理类，因此也称为编译时增强。</p>
<p>Spring AOP中的动态代理主要有两种方式，JDK动态代理和CGLIB动态代理。JDK动态代理通过反射来接收被代理的类，并且要求被代理的类必须实现一个接口。JDK动态代理的核心是InvocationHandler接口和Proxy类。</p>
<p>如果目标类没有实现接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态的生成某个类的子类，注意，CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。</p>
<h6 id="AOP的应用场景"><a href="#AOP的应用场景" class="headerlink" title="AOP的应用场景"></a>AOP的应用场景</h6><p>Authentication 权限 ，Caching 缓存 ，Context passing 内容传递 ，Error handling 错误处理 ，Lazy loading 懒加载 ，Debugging 调试 ，logging, tracing, profiling and monitoring 记录跟踪　优化　校准，Performance optimization 性能优化 ，Persistence 持久化 ，Resource pooling 资源池 ，Synchronization 同步，Transactions 事务。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot与springcloud版本关系</title>
    <url>/2022/05/03/springboot%E4%B8%8Espringcloud%E7%89%88%E6%9C%AC%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<p>Spring启动报错org.springframework.boot.builder.SpringApplicationBuilder<span id="more"></span></p>
<p>具体提示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.NoSuchMethodError: org.springframework.boot.builder.SpringApplicationBuilder.&lt;in</span><br></pre></td></tr></table></figure>

<p>启动报错的这个原因是SpringBoot的版本和SpringCloud的版本存在不同导致的报错，<br>调整对应版本，目前大版本对应如下：</p>
<table>
<thead>
<tr>
<th>Spring Boot</th>
<th>Spring Cloud</th>
</tr>
</thead>
<tbody><tr>
<td>1.2.x</td>
<td>Angel版本</td>
</tr>
<tr>
<td>1.3.x</td>
<td>Brixton版本</td>
</tr>
<tr>
<td>1.4.x stripes</td>
<td>Camden版本</td>
</tr>
<tr>
<td>1.5.x</td>
<td>Dalston版本、Edgware版本</td>
</tr>
<tr>
<td>2.0.x</td>
<td>Finchley版本</td>
</tr>
<tr>
<td>2.1.x</td>
<td>Greenwich.SR2</td>
</tr>
</tbody></table>
<blockquote>
<p>官网地址：<a href="https://start.spring.io/actuator/info">https://start.spring.io/actuator/info</a></p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;git&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span><span class="string">&quot;219a0df1dd0b1cf561e71affd4d41ed7515fe01a&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;commit&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;219a0df&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span><span class="string">&quot;2020-11-15T07:21:11Z&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span><span class="string">&quot;0.0.1-SNAPSHOT&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;artifact&quot;</span><span class="punctuation">:</span><span class="string">&quot;start-site&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;versions&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;spring-boot&quot;</span><span class="punctuation">:</span><span class="string">&quot;2.4.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;initializr&quot;</span><span class="punctuation">:</span><span class="string">&quot;0.10.0-SNAPSHOT&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;start.spring.io website&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span><span class="string">&quot;2020-11-15T07:22:38.805Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span><span class="string">&quot;io.spring.start&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bom-ranges&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;azure&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;2.0.10&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.0.0.RELEASE and &lt;2.1.0.RELEASE&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;2.1.10&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.1.0.RELEASE and &lt;2.2.0.M1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;2.2.4&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.2.0.M1 and &lt;2.3.0.M1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;2.3.5&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.3.0.M1&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;codecentric-spring-boot-admin&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;2.0.6&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.0.0.M1 and &lt;2.1.0.M1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;2.1.6&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.1.0.M1 and &lt;2.2.0.M1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;2.2.4&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.2.0.M1 and &lt;2.3.0.M1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;2.3.1&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.3.0.M1 and &lt;2.5.0-M1&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;solace-spring-boot&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;1.0.0&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.2.0.RELEASE and &lt;2.3.0.M1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;1.1.0&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.3.0.M1&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;solace-spring-cloud&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;1.0.0&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.2.0.RELEASE and &lt;2.3.0.M1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;1.1.1&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.3.0.M1&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;spring-cloud&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Finchley.M2&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.0.0.M3 and &lt;2.0.0.M5&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Finchley.M3&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.0.0.M5 and &lt;=2.0.0.M5&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Finchley.M4&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.0.0.M6 and &lt;=2.0.0.M6&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Finchley.M5&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.0.0.M7 and &lt;=2.0.0.M7&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Finchley.M6&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.0.0.RC1 and &lt;=2.0.0.RC1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Finchley.M7&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.0.0.RC2 and &lt;=2.0.0.RC2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Finchley.M9&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.0.0.RELEASE and &lt;=2.0.0.RELEASE&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Finchley.RC1&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.0.1.RELEASE and &lt;2.0.2.RELEASE&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Finchley.RC2&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.0.2.RELEASE and &lt;2.0.3.RELEASE&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Finchley.SR4&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.0.3.RELEASE and &lt;2.0.999.BUILD-SNAPSHOT&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Finchley.BUILD-SNAPSHOT&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.0.999.BUILD-SNAPSHOT and &lt;2.1.0.M3&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Greenwich.M1&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.1.0.M3 and &lt;2.1.0.RELEASE&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Greenwich.SR6&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.1.0.RELEASE and &lt;2.1.999.BUILD-SNAPSHOT&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Greenwich.BUILD-SNAPSHOT&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.1.999.BUILD-SNAPSHOT and &lt;2.2.0.M4&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Hoxton.SR9&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.2.0.M4 and &lt;2.3.7.BUILD-SNAPSHOT&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Hoxton.BUILD-SNAPSHOT&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.3.7.BUILD-SNAPSHOT and &lt;2.4.0.M1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;2020.0.0-M3&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.4.0.M1 and &lt;=2.4.0.M1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;2020.0.0-M4&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.4.0.M2 and &lt;=2.4.0-M3&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;2020.0.0-SNAPSHOT&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.4.0-M4&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;spring-cloud-alibaba&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;2.2.1.RELEASE&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.2.0.RELEASE and &lt;2.3.0.M1&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;spring-cloud-services&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;2.0.3.RELEASE&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.0.0.RELEASE and &lt;2.1.0.RELEASE&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;2.1.8.RELEASE&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.1.0.RELEASE and &lt;2.2.0.RELEASE&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;2.2.6.RELEASE&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.2.0.RELEASE and &lt;2.3.0.RELEASE&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;2.3.0.RELEASE&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.3.0.RELEASE and &lt;2.4.0-M1&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;spring-geode&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;1.2.11.RELEASE&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.2.0.M5 and &lt;2.3.0.M1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;1.3.5.RELEASE&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.3.0.M1 and &lt;2.4.0-M1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;1.4.0-RC1&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.4.0-M1&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;spring-statemachine&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;2.0.0.M4&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.0.0.RC1 and &lt;=2.0.0.RC1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;2.0.0.M5&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.0.0.RC2 and &lt;=2.0.0.RC2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;2.0.1.RELEASE&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.0.0.RELEASE&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;vaadin&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;10.0.17&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.0.0.M1 and &lt;2.1.0.M1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;14.4.2&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.1.0.M1 and &lt;2.4.0-M1&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;wavefront&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;2.0.2&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.1.0.RELEASE and &lt;2.4.0-M1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;2.1.0-SNAPSHOT&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.4.0-M1&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dependency-ranges&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;okta&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;1.2.1&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.1.2.RELEASE and &lt;2.2.0.M1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;1.4.0&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.2.0.M1 and &lt;2.4.0-M1&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;mybatis&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;2.0.1&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.0.0.RELEASE and &lt;2.1.0.RELEASE&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;2.1.4&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.1.0.RELEASE and &lt;2.5.0-M1&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;camel&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;2.22.4&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.0.0.M1 and &lt;2.1.0.M1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;2.25.2&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.1.0.M1 and &lt;2.2.0.M1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;3.3.0&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.2.0.M1 and &lt;2.3.0.M1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;3.5.0&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.3.0.M1 and &lt;2.4.0-M1&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;open-service-broker&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;2.1.3.RELEASE&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.0.0.RELEASE and &lt;2.1.0.M1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;3.0.4.RELEASE&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.1.0.M1 and &lt;2.2.0.M1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;3.1.1.RELEASE&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Boot &gt;=2.2.0.M1 and &lt;2.4.0-M1&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot客户端与服务端实现https单向认证和双向认证</title>
    <url>/2022/08/26/springboot%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%AE%9E%E7%8E%B0https%E5%8D%95%E5%90%91%E8%AE%A4%E8%AF%81%E5%92%8C%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<p>基于Spring Boot实现HTTPS方式请求下客户端与服务端进行单向认证与双向认证的实例<span id="more"></span></p>
<h4 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h4><p>首先准备服务端和客户端的证书。</p>
<h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><p>如果是云服务器，服务端可直接由提供商生成，否则执行下面的代码生成</p>
<p>1、生成服务端sslServer.p12文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -genkey -v -alias sslServer -keyalg RSA -storetype PKCS12 -keystore E:\learning-demo\sslServer.p12</span><br></pre></td></tr></table></figure>

<p>2、导出服务端公钥sslServer.cer 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -keystore E:\learning-demo\sslServer.p12 -export -alias sslServer -file E:\learning-demo\sslServer.cer</span><br></pre></td></tr></table></figure>

<p>在生成过程中，需要注意的一点是，第一步中“您的名字与姓氏是什么”应该填服务器的ip或对应系统的域名，这样在后面代码中校验证书就能直接通过，若填写的不一致，则需要在代码中默认允许校验自己通过。</p>
<h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><p>1、生成客户端sslClient.p12文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -genkey -v -alias sslClient -keyalg RSA -storetype PKCS12 -keystore E:\learning-demo\sslClient.p12</span><br></pre></td></tr></table></figure>

<p>2、导出客户端公钥sslClient.cer 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -keystore E:\learning-demo\sslClient.p12 -export -alias sslClient -file E:\learning-demo\sslClient.cer</span><br></pre></td></tr></table></figure>

<h5 id="导入双方系统的jre运行环境的cacerts证书库"><a href="#导入双方系统的jre运行环境的cacerts证书库" class="headerlink" title="导入双方系统的jre运行环境的cacerts证书库"></a>导入双方系统的jre运行环境的cacerts证书库</h5><p>将Client端和Server端的公钥文件（.cer文件）导入双方系统的jre运行环境的cacerts证书库（双向认证需要操作此步骤）<br>将客户端公钥导入的服务端jdk信任库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -import -alias sslClient -file E:\learning-demo\sslClient.cer -keystore D:\jdk\jre\lib\security\cacerts –v</span><br></pre></td></tr></table></figure>

<p>将服务端公钥导入到客户端的jdk信任库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -import -alias sslServer -file E:\learning-demo\sslServer.cer -keystore D:\jdk\jre\lib\security\cacerts –v</span><br></pre></td></tr></table></figure>

<p>将客户端公钥导入到服务端Server.p12证书库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -import -alias sslClient -v -file E:\learning-demo\sslClient.cer -keystore D:\jdk\sslServer.p12</span><br></pre></td></tr></table></figure>

<h4 id="单向认证"><a href="#单向认证" class="headerlink" title="单向认证"></a>单向认证</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.ssl.key-store</span>=<span class="string">classpath:sslServer.p12</span></span><br><span class="line"><span class="attr">server.ssl.key-store-password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">server.ssl.key-alias</span>=<span class="string">sslServer</span></span><br><span class="line"><span class="attr">server.ssl.keyStoreType</span>=<span class="string">JKS</span></span><br></pre></td></tr></table></figure>

<p>随便访问项目中的一个接口，如果页面出现下面的提示信息，则表示单向认证开启成功。</p>
<img src="/2022/08/26/springboot%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%AE%9E%E7%8E%B0https%E5%8D%95%E5%90%91%E8%AE%A4%E8%AF%81%E5%92%8C%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81/70ac8bc6b773e64f0099e150710c91a3_watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMwMzQyMjM=,size_16,color_FFFFFF,t_70.png" class>



<h4 id="双向认证"><a href="#双向认证" class="headerlink" title="双向认证"></a>双向认证</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.ssl.trust-store-password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">server.ssl.client-auth</span>=<span class="string">need</span></span><br><span class="line"><span class="attr">server.ssl.trust-store-type</span>=<span class="string">JKS</span></span><br><span class="line"><span class="attr">server.ssl.trust-store-provider</span>=<span class="string">SUN</span></span><br></pre></td></tr></table></figure>

<p>客户端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">TEST_URL</span> <span class="operator">=</span> <span class="string">&quot;https://127.0.0.1:7090/server/ssl&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getHKVesselTrip</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="comment">// 客户端证书类型</span></span><br><span class="line">  <span class="type">KeyStore</span> <span class="variable">clientStore</span> <span class="operator">=</span> KeyStore.getInstance(<span class="string">&quot;PKCS12&quot;</span>);</span><br><span class="line">  <span class="comment">// 加载客户端证书，即自己的私钥</span></span><br><span class="line">  clientStore</span><br><span class="line">      .load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\learning-demo\\sslClient.p12&quot;</span>),</span><br><span class="line">          <span class="string">&quot;123456&quot;</span>.toCharArray());</span><br><span class="line">  <span class="comment">// 创建密钥管理工厂实例</span></span><br><span class="line">  <span class="type">KeyManagerFactory</span> <span class="variable">kmf</span> <span class="operator">=</span> KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());</span><br><span class="line">  <span class="comment">// 初始化客户端密钥库</span></span><br><span class="line">  kmf.init(clientStore, <span class="string">&quot;123456&quot;</span>.toCharArray());</span><br><span class="line">  KeyManager[] kms = kmf.getKeyManagers();</span><br><span class="line">  <span class="comment">// 创建信任库管理工厂实例</span></span><br><span class="line">  <span class="type">TrustManagerFactory</span> <span class="variable">tmf</span> <span class="operator">=</span> TrustManagerFactory</span><br><span class="line">      .getInstance(TrustManagerFactory.getDefaultAlgorithm());</span><br><span class="line">  <span class="comment">// 信任库类型</span></span><br><span class="line">  <span class="type">KeyStore</span> <span class="variable">trustStore</span> <span class="operator">=</span> KeyStore.getInstance(<span class="string">&quot;JKS&quot;</span>);</span><br><span class="line">  <span class="comment">// 加载信任库，即服务端公钥</span></span><br><span class="line">  trustStore.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\jdk\\jre\\lib\\security\\cacerts&quot;</span>),</span><br><span class="line">      <span class="string">&quot;changeit&quot;</span>.toCharArray());</span><br><span class="line">  <span class="comment">// 初始化信任库</span></span><br><span class="line">  tmf.init(trustStore);</span><br><span class="line">  TrustManager[] tms = tmf.getTrustManagers();</span><br><span class="line">  <span class="comment">// 建立TLS连接</span></span><br><span class="line">  <span class="type">SSLContext</span> <span class="variable">sslContext</span> <span class="operator">=</span> SSLContext.getInstance(<span class="string">&quot;TLS&quot;</span>);</span><br><span class="line">  <span class="comment">// 初始化SSLContext</span></span><br><span class="line">  sslContext.init(kms, tms, <span class="keyword">new</span> <span class="title class_">SecureRandom</span>());</span><br><span class="line">  <span class="type">SSLConnectionSocketFactory</span> <span class="variable">sslsf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SSLConnectionSocketFactory</span>(sslContext,</span><br><span class="line">      SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);</span><br><span class="line">  <span class="type">CloseableHttpClient</span> <span class="variable">httpclient</span> <span class="operator">=</span> HttpClients.custom().setSSLSocketFactory(sslsf).build();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">HttpGet</span> <span class="variable">httpget</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(TEST_URL);</span><br><span class="line">    System.out.println(<span class="string">&quot;executing request&quot;</span> + httpget.getRequestLine());</span><br><span class="line">    <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpclient.execute(httpget);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">      <span class="keyword">if</span> (entity != <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(EntityUtils.toString(entity));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      response.close();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    httpclient.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>sql关键字</title>
    <url>/2022/05/03/sql%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<p>常用的sql关键字<span id="more"></span></p>
<h4 id="except-sql-server"><a href="#except-sql-server" class="headerlink" title="except(sql server)"></a>except(sql server)</h4><p>通过包括所有在 TABLE1 中但不在 TABLE2 中的行并消除所有重复行而派生出一个结果表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	reg_num </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	dq_list <span class="keyword">except</span></span><br><span class="line"><span class="keyword">EXCEPT</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	reg_num </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	dq_result</span><br></pre></td></tr></table></figure>

<h4 id="minus-oracle"><a href="#minus-oracle" class="headerlink" title="minus(oracle)"></a>minus(oracle)</h4><p>先找出第一个 SQL 语句所产生的结果，然后看这些结果有没有在第二个SQL语句的结果中。如果有的话，那这一笔资料就被去除，而不会在最后的结果中出现。如果第二个 SQL 语句所产生的结果并没有存在于第一个 SQL 语句所产生的结果内，那这笔资料就被抛弃。</p>
<p>Store_Information 表格</p>
<table>
<thead>
<tr>
<th>Store_Name</th>
<th>Sales</th>
<th>Txn_Date</th>
</tr>
</thead>
<tbody><tr>
<td>Los Angeles</td>
<td>1500</td>
<td>05-Jan-1999</td>
</tr>
<tr>
<td>San Diego</td>
<td>250</td>
<td>07-Jan-1999</td>
</tr>
<tr>
<td>Los Angeles</td>
<td>300</td>
<td>08-Jan-1999</td>
</tr>
<tr>
<td>Boston</td>
<td>700</td>
<td>08-Jan-1999</td>
</tr>
</tbody></table>
<p>Internet Sales 表格</p>
<table>
<thead>
<tr>
<th>Txn_Date</th>
<th>Sales</th>
</tr>
</thead>
<tbody><tr>
<td>07-Jan-1999</td>
<td>250</td>
</tr>
<tr>
<td>10-Jan-1999</td>
<td>535</td>
</tr>
<tr>
<td>11-Jan-1999</td>
<td>320</td>
</tr>
<tr>
<td>12-Jan-1999</td>
<td>750</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Txn_Date <span class="keyword">FROM</span> Store_Information</span><br><span class="line">MINUS</span><br><span class="line"><span class="keyword">SELECT</span> Txn_Date <span class="keyword">FROM</span> Internet_Sales;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>Txn_Date</th>
</tr>
</thead>
<tbody><tr>
<td>Jan-05-1999</td>
</tr>
<tr>
<td>Jan-08-1999</td>
</tr>
</tbody></table>
<h4 id="intersect"><a href="#intersect" class="headerlink" title="intersect"></a>intersect</h4><p>通过只包括 TABLE1 和 TABLE2 中都有的行并消除所有重复行而派生出一个结果表。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>sql函数</title>
    <url>/2022/01/17/sql%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>sql常用函数<span id="more"></span></p>
<p>top关键字属性SQL Server，平常并没有使用SQL Server。</p>
<h6 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h6><ul>
<li>upper(str)&#x2F;ucase(str)：返回字符串str，将所有字符改为大写</li>
<li>lower(str)&#x2F;lcase(str)：返回字符串str，将所有字符改为小写</li>
<li>first(column_name)：返回指定的字段中第一个记录的值，可使用 ORDER BY 语句对记录进行排序</li>
<li>last(column_name)：返回指定的字段中最后一个记录的值，可使用 ORDER BY 语句对记录进行排序</li>
<li>mid(str,start,length)：用于从文本字段中提取字符，str要提取的字段(必须)，start开始位置(必须)，length提取长度，若为空，则返回剩余字符串</li>
<li>now()：返回当前日期</li>
<li>format(column_name,format)：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ProductName, UnitPrice, FORMAT(Now(),<span class="string">&#x27;YYYY-MM-DD&#x27;</span>) <span class="keyword">as</span> PerDate</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br></pre></td></tr></table></figure>

<ul>
<li><p>replace(X,old,new) n：在X中查找old，并替换成new</p>
</li>
<li><p>instr(X,STR[,START][,N)：从X中查找str，可以指定从start开始，也可以指定从n开始</p>
</li>
<li><p>ltrim(X[,TRIM_STR])：把X的左边截去trim_str字符串，缺省截去空格</p>
</li>
<li><p>rtrim(X[,TRIM_STR])：把X的右边截去trim_str字符串，缺省截去空格</p>
</li>
<li><p>trim([TRIM_STR FROM]X)：把X的两边截去trim_str字符串，缺省截去空格</p>
</li>
<li><p>trunc(x[,y])：直接截取，不四舍五入。</p>
<p>  在缺省 y 时，默认 y&#x3D;0；比如：TRUNC (3.56)&#x3D;3。</p>
<p>  Y是正整数，就是四舍五入到小数点后 y 位。TRUNC (5.654,2)&#x3D;5.65。</p>
<p>  y 是负整数，四舍五入到小数点左边|y|位。TRUNC (351.654,-2)&#x3D;300。</p>
</li>
<li><p>add_months(d,n)，在某一个日期 d 上，加上指定的月数 n，返回计算后的新日期。d 表示日期，n 表示要加的月数</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SYSDATE,add_months(SYSDATE,<span class="number">5</span>) <span class="keyword">FROM</span> dual;</span><br></pre></td></tr></table></figure>

<ul>
<li>last_day(d)，返回指定日期当月的最后一天</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SYSDATE,last_day(SYSDATE) <span class="keyword">FROM</span> dual;</span><br></pre></td></tr></table></figure>

<ul>
<li>nvl(X,VALUE)：如果X为空，返回value，否则返回X</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ENAME,JOB,SAL,NVL(COMM,<span class="number">100</span>) <span class="keyword">FROM</span> EMP <span class="keyword">WHERE</span> SAL<span class="operator">&lt;</span><span class="number">2000</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>to_number()：将字符型数据转换成数字型</p>
</li>
<li><p>to_date()：将字符型数据转换成日期型</p>
</li>
<li><p>to_char()：将日期转换成字符串</p>
</li>
<li><p>ceil()：向上取整，结果为124。<code>select ceil(123.123) from dual;</code></p>
</li>
<li><p>floor()：向下取整，结果为123。<code>select floor(123.123) from dual;</code></p>
</li>
<li><p>trunc(n1,n2)取整函数,n1代表字符串，n2代表小数位数，结果为123.12。<br>  <code>select trunc(123.125,2) from dual;</code></p>
</li>
<li><p>round(n1,n2)四舍五入，n1代表字符串,n2代表小数位数，结果为123.57。</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> round(<span class="number">123.567</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>
</li>
<li><p>zeroifnull(expr)：如果表达式expr的值为0，则返回null，否则返回表达式expr的值。</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> zeroifnull(<span class="built_in">count</span>(<span class="keyword">DISTINCT</span> userid)) <span class="keyword">from</span> table_name;</span><br></pre></td></tr></table></figure>

<ul>
<li>nullifzero(expr)：如果表达式expr的值为null，则返回0，否则返回表达式expr的值。</li>
<li>ln(y)：以e为底的y的对数，y &gt; 0。</li>
<li>log(x,y)：以x为底的y的对数。</li>
<li>exp(y)：e的y次幂。</li>
<li>greatest(express1, express2…)：取得值最大值，数字按大小排列，字符按首字符比较，结果相等比较下一位。</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>swagger2自动生成API文档</title>
    <url>/2022/01/09/swagger2%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90API%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<p>Swagger2 是一个规范和完整的框架，用于生成、描述、调用和可视化Restful风格的web服务，现在我们使用spring boot 整合它。<span id="more"></span></p>
<h5 id="引入pom依赖"><a href="#引入pom依赖" class="headerlink" title="引入pom依赖"></a>引入pom依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--界面支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="编写Swagger2配置文件"><a href="#编写Swagger2配置文件" class="headerlink" title="编写Swagger2配置文件"></a>编写Swagger2配置文件</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.git;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swagger2Configuration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//api接口扫描包路径</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SWAGGER2_SCAN_BASE_PACKAGE</span> <span class="operator">=</span> <span class="string">&quot;com.kuang.git&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">VERSION</span> <span class="operator">=</span> <span class="string">&quot;1.0.0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(swagger2ApiTest())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(SWAGGER2_SCAN_BASE_PACKAGE))</span><br><span class="line">                <span class="comment">//根据url路径设置哪些请求加入文档、忽略哪些请求</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">swagger2ApiTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;SWAGGER2&quot;</span>)<span class="comment">//设置文档标题</span></span><br><span class="line">                .description(<span class="string">&quot;SWAGGER2 API文档测试&quot;</span>)<span class="comment">//文档描述</span></span><br><span class="line">                .version(VERSION)<span class="comment">//文档版本</span></span><br><span class="line">                .termsOfServiceUrl(<span class="string">&quot;http://www.baidu.com&quot;</span>)<span class="comment">//设置文档的License信息</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="使用注释"><a href="#使用注释" class="headerlink" title="使用注释"></a>使用注释</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.git;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Api(description = &quot;Swagger2 时间测试&quot;)</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/swagger2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swagger2Web</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/time&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;获取系统时间&quot;,notes = &quot;获取系统时间&quot;,produces = &quot;aplication/json&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JSONObject <span class="title function_">SwaggerTest</span><span class="params">()</span> <span class="keyword">throws</span> ParseException, JSONException &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        <span class="comment">//标准时间</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> (<span class="keyword">new</span> <span class="title class_">Date</span>()).toString();</span><br><span class="line">        json.put(<span class="string">&quot;Date&quot;</span>,res);</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="常用注释说明"><a href="#常用注释说明" class="headerlink" title="常用注释说明"></a>常用注释说明</h5><p>@Api 注解可以用来标记 Controller 的功能</p>
<p>@ApiOperation 注解用来标记一个方法的作用</p>
<p>@ApilmplicitParam 注解用来描述一个参数，可以配置参数的中文含义，也可以给参数设置默认值，这样在接口测试的时候可以避免手动输入</p>
<p>@ApilmplicitParams 如果有多个参数，则需要使用多个 @ApilmplicitParam 注解来描述， 多个 @ApilmplicitParam 注解需要放在一个 @ApilmplicitParams 注解中</p>
<p>@ApiModel 如果参数是一个对象，则需要在对象所在的类上加上此注解</p>
<p>@ApiModelProperty 如果参数是一个对象，则需要在对应的属性上加上此注解，还需要在对象所在的类上加上 @ApiModel</p>
<p>@ApiIgnore 注解标识此参数可以忽略</p>
<p>上面的配置完成之后就已经集成完成。启动项目之后，浏览器输入<a href="http://127.0.0.1:8083/swagger-ui.html%E8%AE%BF%E9%97%AE%E3%80%82">http://127.0.0.1:8083/swagger-ui.html访问。</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>分析函数over</title>
    <url>/2022/05/02/%E5%88%86%E6%9E%90%E5%87%BD%E6%95%B0over/</url>
    <content><![CDATA[<p>over分析函数的使用<span id="more"></span></p>
<h4 id="over-分析函数"><a href="#over-分析函数" class="headerlink" title="over()分析函数"></a>over()分析函数</h4><p>聚合函数（如sum()、max()等）可以计算基于组的某种聚合值，但是聚合函数对于某个组只能返回一行记录。若想对于某组返回多行记录，则需要使用分析函数。</p>
<h5 id="rank-x2F-dense-rank-over-partition-by-…-order-by-…"><a href="#rank-x2F-dense-rank-over-partition-by-…-order-by-…" class="headerlink" title="rank()&#x2F;dense_rank over(partition by … order by …)"></a>rank()&#x2F;dense_rank over(partition by … order by …)</h5><p>说明：over()在什么条件之上;</p>
<p>　　partition by 按哪个字段划分组；</p>
<p>　　order by 按哪个字段排序；</p>
<p>注意：</p>
<p>　　（1）使用rank()&#x2F;dense_rank() 时，必须要带order by否则非法</p>
<p>　　（2）rank()&#x2F;dense_rank()分级的区别：</p>
<p>rank(): 跳跃排序，如果有两个第一级时，接下来就是第三级。</p>
<p>dense_rank(): 连续排序，如果有两个第一级时，接下来仍然是第二级。</p>
<p>示例：查询每个部门工资最高的员工信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> E.ENAME, E.JOB, E.SAL, E.DEPTNO</span><br><span class="line">  <span class="keyword">FROM</span> SCOTT.EMP E,</span><br><span class="line">       (<span class="keyword">SELECT</span> E.DEPTNO, <span class="built_in">MAX</span>(E.SAL) SAL <span class="keyword">FROM</span> SCOTT.EMP E <span class="keyword">GROUP</span> <span class="keyword">BY</span> E.DEPTNO) ME</span><br><span class="line"> <span class="keyword">WHERE</span> E.DEPTNO <span class="operator">=</span> ME.DEPTNO</span><br><span class="line">   <span class="keyword">AND</span> E.SAL <span class="operator">=</span> ME.SAL;</span><br></pre></td></tr></table></figure>

<p>使用Over()函数：</p>
<p>方法一：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> E.ENAME, E.JOB, E.SAL, E.DEPTNO</span><br><span class="line">  <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> E.ENAME,</span><br><span class="line">               E.JOB,</span><br><span class="line">               E.SAL,</span><br><span class="line">               E.DEPTNO,</span><br><span class="line">               <span class="built_in">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO <span class="keyword">ORDER</span> <span class="keyword">BY</span> E.SAL <span class="keyword">DESC</span>) RANK  <span class="comment">--在按部门划分的基础上，工资从高到低分级，级别RANK从1开始依次递增</span></span><br><span class="line">          <span class="keyword">FROM</span> EMP E) E</span><br><span class="line"> <span class="keyword">WHERE</span> E.RANK <span class="operator">=</span> <span class="number">1</span> ;</span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> E.ENAME, E.JOB, E.SAL, E.DEPTNO</span><br><span class="line"> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> E.ENAME,</span><br><span class="line">              E.JOB,</span><br><span class="line">              E.SAL,</span><br><span class="line">              E.DEPTNO,</span><br><span class="line">              <span class="built_in">DENSE_RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO <span class="keyword">ORDER</span> <span class="keyword">BY</span> E.SAL <span class="keyword">DESC</span>) RANK</span><br><span class="line">         <span class="keyword">FROM</span> EMP E) E</span><br><span class="line"><span class="keyword">WHERE</span> E.RANK <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>对比查询结果：左边的是用一般的方法查询结果，右边的是分析函数查询结果（两种方法结果相同）</p>
<img src="/2022/05/02/%E5%88%86%E6%9E%90%E5%87%BD%E6%95%B0over/sql.jpg" class>

<h5 id="min-x2F-max-over-partition-by-…"><a href="#min-x2F-max-over-partition-by-…" class="headerlink" title="min()&#x2F;max() over(partition by …)"></a>min()&#x2F;max() over(partition by …)</h5><p>查询员工信息的同时，查询员工工资与所在部门最低、最高工资的差额</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> E.ENAME,</span><br><span class="line">       E.JOB,</span><br><span class="line">       E.SAL,</span><br><span class="line">       E.DEPTNO,</span><br><span class="line">       E.SAL <span class="operator">-</span> ME.MIN_SAL DIFF_MIN_SAL,</span><br><span class="line">       ME.MAX_SAL <span class="operator">-</span> E.SAL DIFF_MAX_SAL</span><br><span class="line">  <span class="keyword">FROM</span> SCOTT.EMP E,</span><br><span class="line">       (<span class="keyword">SELECT</span> E.DEPTNO, <span class="built_in">MIN</span>(E.SAL) MIN_SAL, <span class="built_in">MAX</span>(E.SAL) MAX_SAL</span><br><span class="line">          <span class="keyword">FROM</span> SCOTT.EMP E</span><br><span class="line">         <span class="keyword">GROUP</span> <span class="keyword">BY</span> E.DEPTNO) ME</span><br><span class="line"> <span class="keyword">WHERE</span> E.DEPTNO <span class="operator">=</span> ME.DEPTNO</span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> E.DEPTNO, E.SAL;</span><br></pre></td></tr></table></figure>

<p>使用分析函数：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> E.ENAME,</span><br><span class="line">       E.JOB,</span><br><span class="line">       E.SAL,</span><br><span class="line">       E.DEPTNO,</span><br><span class="line">       <span class="built_in">MIN</span>(E.SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO) MIN_SAL,</span><br><span class="line">       <span class="built_in">MAX</span>(E.SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO) MAX_SAL,</span><br><span class="line">       NVL(E.SAL <span class="operator">-</span> <span class="built_in">MIN</span>(E.SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO), <span class="number">0</span>) DIFF_MIN_SAL,</span><br><span class="line">       NVL(<span class="built_in">MAX</span>(E.SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO) <span class="operator">-</span> E.SAL, <span class="number">0</span>) DIFF_MAX_SAL</span><br><span class="line">  <span class="keyword">FROM</span> EMP E;</span><br></pre></td></tr></table></figure>

<p>注：这里没有排序条件，若加上order by 排序条件，</p>
<p>MAX() OVER(PARTITION BY .. ORDER BY .. DESC) 排序规则只能为desc，否则不起作用，将查询到目前为止排序值最高字段的对应值<br>MIN() OVER(PARTITION BY .. ORDER BY .. ASC ) 排序规则只能为asc，否则不起作用，将查询到目前为止排序值最低的字段的对应值，</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> E.ENAME,</span><br><span class="line">       E.JOB,</span><br><span class="line">       E.SAL,</span><br><span class="line">       E.DEPTNO,</span><br><span class="line">       <span class="built_in">MIN</span>(E.SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO) MIN_SAL01,</span><br><span class="line">       <span class="built_in">MAX</span>(E.SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO) MAX_SAL01,</span><br><span class="line">       <span class="built_in">MIN</span>(E.SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO <span class="keyword">ORDER</span> <span class="keyword">BY</span> E.SAL) MIN_SAL02,</span><br><span class="line">       <span class="built_in">MAX</span>(E.SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO <span class="keyword">ORDER</span> <span class="keyword">BY</span> E.SAL) MAX_SAL02, <span class="comment">--不起作用</span></span><br><span class="line">       <span class="built_in">MIN</span>(E.SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO <span class="keyword">ORDER</span> <span class="keyword">BY</span> E.SAL <span class="keyword">DESC</span>) MIN_SAL03, <span class="comment">--不起作用</span></span><br><span class="line">       <span class="built_in">MAX</span>(E.SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO <span class="keyword">ORDER</span> <span class="keyword">BY</span> E.SAL <span class="keyword">DESC</span>) MAX_SAL03,</span><br><span class="line">       <span class="built_in">MIN</span>(E.SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO <span class="keyword">ORDER</span> <span class="keyword">BY</span> E.SAL <span class="keyword">ASC</span>) MIN_SAL04,</span><br><span class="line">       <span class="built_in">MAX</span>(E.SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO <span class="keyword">ORDER</span> <span class="keyword">BY</span> E.SAL <span class="keyword">ASC</span>) MAX_SAL04, <span class="comment">--不起作用</span></span><br><span class="line">       NVL(E.SAL <span class="operator">-</span> <span class="built_in">MIN</span>(E.SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO), <span class="number">0</span>) DIFF_MIN_SAL,</span><br><span class="line">       NVL(<span class="built_in">MAX</span>(E.SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO) <span class="operator">-</span> E.SAL, <span class="number">0</span>) DIFF_MAX_SAL</span><br><span class="line">  <span class="keyword">FROM</span> EMP E;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<img src="/2022/05/02/%E5%88%86%E6%9E%90%E5%87%BD%E6%95%B0over/oracle.jpg" class title="img">

<h5 id="lead-x2F-lag-over-partition-by-…-order-by-…-取前面-x2F-后面第n行记录"><a href="#lead-x2F-lag-over-partition-by-…-order-by-…-取前面-x2F-后面第n行记录" class="headerlink" title="lead()&#x2F;lag() over(partition by … order by …) 取前面&#x2F;后面第n行记录"></a>lead()&#x2F;lag() over(partition by … order by …) 取前面&#x2F;后面第n行记录</h5><p>说明：</p>
<p>lead(列名,n,m): 当前记录后面第n行记录的&lt;列名&gt;的值，没有则默认值为m；如果不带参数n,m，则查找当前记录后面第一行的记录&lt;列名&gt;的值，没有则默认值为null。<br>lag(列名,n,m): 当前记录前面第n行记录的&lt;列名&gt;的值，没有则默认值为m；如果不带参数n,m，则查找当前记录前面第一行的记录&lt;列名&gt;的值，没有则默认值为null。</p>
<p>示例：查询个人工资与比自己高一位、第一位的工资的差额</p>
<p>使用分析函数：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> E.ENAME,</span><br><span class="line">        E.JOB,</span><br><span class="line">        E.SAL,</span><br><span class="line">        E.DEPTNO,</span><br><span class="line">        <span class="built_in">LEAD</span>(E.SAL, <span class="number">1</span>, <span class="number">0</span>) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO <span class="keyword">ORDER</span> <span class="keyword">BY</span> E.SAL) LEAD_SAL, <span class="comment">--记录后面第n行记录</span></span><br><span class="line">        <span class="built_in">LAG</span>(E.SAL, <span class="number">1</span>, <span class="number">0</span>) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO <span class="keyword">ORDER</span> <span class="keyword">BY</span> E.SAL) LAG_SAL, <span class="comment">--记录前面第N行记录</span></span><br><span class="line">        NVL(<span class="built_in">LEAD</span>(E.SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO <span class="keyword">ORDER</span> <span class="keyword">BY</span> E.SAL) <span class="operator">-</span> E.SAL,  </span><br><span class="line">            <span class="number">0</span>) DIFF_LEAD_SAL,</span><br><span class="line">        NVL(E.SAL <span class="operator">-</span> <span class="built_in">LEAD</span>(E.SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO <span class="keyword">ORDER</span> <span class="keyword">BY</span> E.SAL),</span><br><span class="line">            <span class="number">0</span>) DIFF_LAG_SAL</span><br><span class="line">   <span class="keyword">FROM</span> EMP E;</span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<img src="/2022/05/02/%E5%88%86%E6%9E%90%E5%87%BD%E6%95%B0over/lead.jpg" class title="img">

<h5 id="FIRST-VALUE-x2F-LAST-VALUE-OVER-PARTITION-BY-…-取首尾记录"><a href="#FIRST-VALUE-x2F-LAST-VALUE-OVER-PARTITION-BY-…-取首尾记录" class="headerlink" title="FIRST_VALUE&#x2F;LAST_VALUE() OVER(PARTITION BY …) 取首尾记录"></a>FIRST_VALUE&#x2F;LAST_VALUE() OVER(PARTITION BY …) 取首尾记录</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> E.EMPNO,</span><br><span class="line">        E.ENAME,</span><br><span class="line">        E.JOB,</span><br><span class="line">        E.MGR,</span><br><span class="line">        E.SAL,</span><br><span class="line">        E.DEPTNO,</span><br><span class="line">        <span class="built_in">FIRST_VALUE</span>(E.SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO) FIRST_SAL,</span><br><span class="line">        <span class="built_in">LAST_VALUE</span>(E.SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO) LAST_SAL</span><br><span class="line">   <span class="keyword">FROM</span> EMP E;</span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<img src="/2022/05/02/%E5%88%86%E6%9E%90%E5%87%BD%E6%95%B0over/first.jpg" class title="first">

<h5 id="ROW-NUMBER-OVER-PARTITION-BY-ORDER-BY-排序（应用：分页）"><a href="#ROW-NUMBER-OVER-PARTITION-BY-ORDER-BY-排序（应用：分页）" class="headerlink" title="ROW_NUMBER() OVER(PARTITION BY.. ORDER BY ..) 排序（应用：分页）"></a>ROW_NUMBER() OVER(PARTITION BY.. ORDER BY ..) 排序（应用：分页）</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> E.ENAME, E.JOB, E.SAL, E.DEPTNO,E.ROW_NUM</span><br><span class="line">   <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> E.ENAME,</span><br><span class="line">                E.JOB,</span><br><span class="line">                E.SAL,</span><br><span class="line">                E.DEPTNO,</span><br><span class="line">                <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO <span class="keyword">ORDER</span> <span class="keyword">BY</span> E.SAL) ROW_NUM</span><br><span class="line">           <span class="keyword">FROM</span> EMP E) E</span><br><span class="line">  <span class="keyword">WHERE</span> E.ROW_NUM <span class="operator">&gt;</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<img src="/2022/05/02/%E5%88%86%E6%9E%90%E5%87%BD%E6%95%B0over/rows.jpg" class title="img">

<p>补充：</p>
<p>类似分页的操作还可以用rownum、fetch(Oracle12C后的新特性)实现</p>
<h5 id="sum-x2F-avg-x2F-count-over-partition-by"><a href="#sum-x2F-avg-x2F-count-over-partition-by" class="headerlink" title="sum&#x2F;avg&#x2F;count() over(partition by ..)"></a>sum&#x2F;avg&#x2F;count() over(partition by ..)</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> E.ENAME,</span><br><span class="line">       E.JOB,</span><br><span class="line">       E.SAL,</span><br><span class="line">       E.DEPTNO,</span><br><span class="line">       <span class="built_in">SUM</span>(E.SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO) SUM_SAL,     <span class="comment">--统计某组中的总计值</span></span><br><span class="line">       <span class="built_in">AVG</span>(E.SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO) AVG_SAL,     <span class="comment">--统计某组中的平均值</span></span><br><span class="line">       <span class="built_in">COUNT</span>(E.SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO) COUNT_SAL  <span class="comment">--按某列分组，并统计该组中记录数量</span></span><br><span class="line">  <span class="keyword">FROM</span> EMP E;</span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<img src="/2022/05/02/%E5%88%86%E6%9E%90%E5%87%BD%E6%95%B0over/sum.jpg" class title="img">

<p>示例2（全统计）：为数据集统计部门销售总和，全公司销售总和，部门销售均值，全公司销售均值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.DEPT_ID,</span><br><span class="line">       A.SALE_DATE,</span><br><span class="line">       A.GOODS_TYPE,</span><br><span class="line">       A.SALE_CNT,</span><br><span class="line">       <span class="built_in">SUM</span>(A.SALE_CNT) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> A.DEPT_ID) DEPT_TOTAL, <span class="comment">--部门销售总和</span></span><br><span class="line">       <span class="built_in">SUM</span>(A.SALE_CNT) <span class="keyword">OVER</span>() CMP_TOTAL,  <span class="comment">--公司销售总额</span></span><br><span class="line">       <span class="built_in">AVG</span>(A.SALE_CNT) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> A.DEPT_ID) DEPT_AVG, <span class="comment">--部门销售均值</span></span><br><span class="line">       <span class="built_in">AVG</span>(A.SALE_CNT) <span class="keyword">OVER</span>() CMP_AVG  <span class="comment">--公司销售均值</span></span><br><span class="line">  <span class="keyword">FROM</span> LEARN_FUN_KEEP A;</span><br></pre></td></tr></table></figure>

<h5 id="rows-x2F-range-between-…-preceding-and-…-following-上下范围内求值"><a href="#rows-x2F-range-between-…-preceding-and-…-following-上下范围内求值" class="headerlink" title="rows&#x2F;range between … preceding and … following 上下范围内求值"></a>rows&#x2F;range between … preceding and … following 上下范围内求值</h5><p>说明：unbounded：不受控制的，无限的<br>　　　preceding：在…之前<br>　　　following：在…之后</p>
<p><strong>rows between … preceding and … following</strong></p>
<p>示例1：显示各部门员工的工资，并附带显示该部门的最高工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> E.DEPTNO,</span><br><span class="line">       E.EMPNO,</span><br><span class="line">       E.ENAME,</span><br><span class="line">       E.SAL,</span><br><span class="line">       <span class="built_in">LAST_VALUE</span>(E.SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO <span class="keyword">ORDER</span> <span class="keyword">BY</span> E.SAL <span class="keyword">ROWS</span>       <span class="comment">/*MAX(E.SAL) OVER(PARTITION BY E.DEPTNO ORDER BY E.SAL ROWS*/</span></span><br><span class="line">       <span class="comment">--unbounded preceding and unbouned following针对当前所有记录的前一条、后一条记录，也就是表中的所有记录</span></span><br><span class="line">       <span class="comment">--unbounded：不受控制的，无限的</span></span><br><span class="line">       <span class="comment">--preceding：在...之前</span></span><br><span class="line">       <span class="comment">--following：在...之后</span></span><br><span class="line">        <span class="keyword">BETWEEN</span> UNBOUNDED PRECEDING <span class="keyword">AND</span> UNBOUNDED FOLLOWING) MAX_SAL</span><br><span class="line">  <span class="keyword">FROM</span> EMP E;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<img src="/2022/05/02/%E5%88%86%E6%9E%90%E5%87%BD%E6%95%B0over/rows.jpg" class title="img">

<p>写法二:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> E.DEPTNO,</span><br><span class="line">       E.EMPNO,</span><br><span class="line">       E.ENAME,</span><br><span class="line">       E.SAL,</span><br><span class="line">       <span class="built_in">MAX</span>(E.SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> E.DEPTNO</span><br><span class="line">       <span class="comment">/*ORDER BY E.SAL*/</span>) MAX_SAL</span><br><span class="line">  <span class="keyword">FROM</span> EMP E;</span><br></pre></td></tr></table></figure>

<p>示例2：对各部门进行分组，并附带显示第一行至当前行的汇总</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> EMPNO,</span><br><span class="line">       ENAME,</span><br><span class="line">       DEPTNO,</span><br><span class="line">       SAL,</span><br><span class="line">       <span class="comment">--注意ROWS BETWEEN unbounded preceding AND current row  是指第一行至当前行的汇总</span></span><br><span class="line">       <span class="built_in">SUM</span>(SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> DEPTNO </span><br><span class="line">                     <span class="keyword">ORDER</span> <span class="keyword">BY</span> ENAME </span><br><span class="line">                     <span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> UNBOUNDED PRECEDING <span class="keyword">AND</span> <span class="keyword">CURRENT</span> <span class="type">ROW</span>) max_sal</span><br><span class="line">  <span class="keyword">FROM</span> SCOTT.EMP;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<img src="/2022/05/02/%E5%88%86%E6%9E%90%E5%87%BD%E6%95%B0over/rows2.jpg" class title="img">

<p>示例3：当前行至最后一行的汇总</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> EMPNO,</span><br><span class="line">       ENAME,</span><br><span class="line">       DEPTNO,</span><br><span class="line">       SAL,</span><br><span class="line">       <span class="comment">--注意ROWS BETWEEN current row AND unbounded following 指当前行到最后一行的汇总</span></span><br><span class="line">       <span class="built_in">SUM</span>(SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> DEPTNO </span><br><span class="line">                     <span class="keyword">ORDER</span> <span class="keyword">BY</span> ENAME </span><br><span class="line">                     <span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> <span class="keyword">CURRENT</span> <span class="type">ROW</span> <span class="keyword">AND</span> UNBOUNDED FOLLOWING) max_sal</span><br><span class="line">  <span class="keyword">FROM</span> SCOTT.EMP;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<img src="/2022/05/02/%E5%88%86%E6%9E%90%E5%87%BD%E6%95%B0over/1201638924.png" class title="img">

<p>示例4：当前行的上一行(rownum-1)到当前行的汇总</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> EMPNO,</span><br><span class="line">       ENAME,</span><br><span class="line">       DEPTNO,</span><br><span class="line">       SAL,</span><br><span class="line">       <span class="comment">--注意ROWS BETWEEN 1 preceding AND current row 是指当前行的上一行(rownum-1)到当前行的汇总 </span></span><br><span class="line">       <span class="built_in">SUM</span>(SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> DEPTNO </span><br><span class="line">                     <span class="keyword">ORDER</span> <span class="keyword">BY</span> ENAME <span class="keyword">ROWS</span> </span><br><span class="line">                     <span class="keyword">BETWEEN</span> <span class="number">1</span> PRECEDING <span class="keyword">AND</span> <span class="keyword">CURRENT</span> <span class="type">ROW</span>) max_sal</span><br><span class="line">  <span class="keyword">FROM</span> SCOTT.EMP;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<img src="/2022/05/02/%E5%88%86%E6%9E%90%E5%87%BD%E6%95%B0over/540755-20170621140746882-1940488481.png" class title="img">

<p>示例5：当前行的上一行(rownum-1)到当前行的下两行(rownum+2)的汇总</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> EMPNO,</span><br><span class="line">       ENAME,</span><br><span class="line">       DEPTNO,</span><br><span class="line">       SAL,</span><br><span class="line">       <span class="comment">--注意ROWS BETWEEN 1 preceding AND 1 following 是指当前行的上一行(rownum-1)到当前行的下辆行(rownum+2)的汇总</span></span><br><span class="line">       <span class="built_in">SUM</span>(SAL) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> DEPTNO </span><br><span class="line">                     <span class="keyword">ORDER</span> <span class="keyword">BY</span> ENAME </span><br><span class="line">                     <span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> <span class="number">1</span> PRECEDING <span class="keyword">AND</span> <span class="number">2</span> FOLLOWING) max_sal</span><br><span class="line">  <span class="keyword">FROM</span> SCOTT.EMP;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<img src="/2022/05/02/%E5%88%86%E6%9E%90%E5%87%BD%E6%95%B0over/540755-20170621140921382-538208257.png" class title="img">
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>分组排序获取每组最新记录</title>
    <url>/2022/05/03/%E5%88%86%E7%BB%84%E6%8E%92%E5%BA%8F%E8%8E%B7%E5%8F%96%E6%AF%8F%E7%BB%84%E6%9C%80%E6%96%B0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>mysql5.7版本上实现的，目前mysql8.0已经可以使用分析函数了，不需要那么麻烦了。<span id="more"></span></p>
<h6 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h6><p>一张表内有ID、时间、描述信息等，依据ID找出最新时间的一条描述信息。</p>
<h6 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h6><p>先按照ID进行分组，然后对时间进行倒序排序，选出最新的一条记录。</p>
<h6 id="测试表结构"><a href="#测试表结构" class="headerlink" title="测试表结构"></a>测试表结构</h6><p>与实现有关的字段有task_id、dl_time、dl_dscr。</p>
<h6 id="Mysql实现方法"><a href="#Mysql实现方法" class="headerlink" title="Mysql实现方法"></a>Mysql实现方法</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	dq_ld_log AS b </span><br><span class="line">WHERE</span><br><span class="line">	NOT EXISTS (</span><br><span class="line">	SELECT</span><br><span class="line">		1 </span><br><span class="line">	FROM</span><br><span class="line">		dq_dl_log </span><br><span class="line">	WHERE</span><br><span class="line">	task_id = b.task_id </span><br><span class="line">	AND b.dl_time &lt; dl_time)</span><br><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	( SELECT dl_time, task_id, dl_dscr FROM dq_dl_log GROUP BY task_id DESC ) t </span><br><span class="line">ORDER BY</span><br><span class="line">	t.dl_time</span><br></pre></td></tr></table></figure>

<h6 id="Oracle实现方法"><a href="#Oracle实现方法" class="headerlink" title="Oracle实现方法"></a>Oracle实现方法</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	row_number() over ( PARTITION BY task_id ORDER BY dl_time ) rank </span><br><span class="line">FROM</span><br><span class="line">	dq_dl_log </span><br><span class="line">WHERE</span><br><span class="line">	rank = 1</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>命令行过长，idea中的项目无法启动问题</title>
    <url>/2022/08/11/%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%87%E9%95%BF%EF%BC%8Cidea%E4%B8%AD%E7%9A%84%E9%A1%B9%E7%9B%AE%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>运行启动类失败，命令行过长。通过 JAR 清单或通过类路径文件缩短命令行，然后重新运行。IDEA版本：IntelliJ IDEA 2021.2 (Ultimate Edition)内部版本号 #IU-212.4746.92。<span id="more"></span></p>
<h5 id="在idea项目中找到-idea目录"><a href="#在idea项目中找到-idea目录" class="headerlink" title="在idea项目中找到.idea目录"></a>在idea项目中找到.idea目录</h5><p>找到workspace.xml文件</p>
<h5 id="搜索标签"><a href="#搜索标签" class="headerlink" title="搜索标签"></a>搜索标签</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">&quot;PropertiesComponent&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="增加标签"><a href="#增加标签" class="headerlink" title="增加标签"></a>增加标签</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dynamic.classpath&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串按照收个字符排序</title>
    <url>/2022/05/03/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8C%89%E7%85%A7%E6%94%B6%E4%B8%AA%E5%AD%97%E7%AC%A6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>String数组和List集合排序<span id="more"></span></p>
<h4 id="字符串数组"><a href="#字符串数组" class="headerlink" title="字符串数组"></a>字符串数组</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] tokenizer = &#123;<span class="string">&quot;abcd&quot;</span>,<span class="string">&quot;bacd&quot;</span>,<span class="string">&quot;bbcd&quot;</span>,<span class="string">&quot;cadb&quot;</span>,<span class="string">&quot;cbda&quot;</span>,<span class="string">&quot;caaa&quot;</span>,<span class="string">&quot;1234&quot;</span>,<span class="string">&quot;2134&quot;</span>,<span class="string">&quot;2231&quot;</span>,<span class="string">&quot;2131&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="首个字符排序"><a href="#首个字符排序" class="headerlink" title="首个字符排序"></a>首个字符排序</h4><h5 id="正序"><a href="#正序" class="headerlink" title="正序"></a>正序</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; collect = Arrays.stream(tokenizer).sorted(Comparator.comparing(item -&gt; item.toUpperCase().toCharArray()[<span class="number">0</span>])).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<h5 id="倒序"><a href="#倒序" class="headerlink" title="倒序"></a>倒序</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; collect = Arrays.stream(tokenizer).sorted(Comparator.comparing(item -&gt; item.toLowerCase().toCharArray()[<span class="number">0</span>])).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<h4 id="全字符排序"><a href="#全字符排序" class="headerlink" title="全字符排序"></a>全字符排序</h4><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; collect = Arrays.stream(tokenizer).sorted(Comparator.naturalOrder()).collect(Collectors.toList());</span><br><span class="line">Arrays.sort(tokenizer);</span><br></pre></td></tr></table></figure>

<h5 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.sort(collect);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>常用浏览器的用户代理</title>
    <url>/2021/11/14/%E5%B8%B8%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%94%A8%E6%88%B7%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p>常用浏览器代理汇总<span id="more"></span></p>
<p>所谓用户代理（User Agent ），最初是指浏览器告知网站管理员，本浏览器支持的类型和框架，让网站管理员以支持的模式结构向浏览器发送页面，呈现给用户浏览。演变到今天，网站管理员为了给用户带呈现最佳的页面效果，为了使不同浏览器展现同样的网站页面，通过浏览器获取用户的系统信息，包括硬件平台、系统软件、应用软件和用户个人偏好，然后通过服务器解析后以适合用户的页面类型发送到浏览器。</p>
<p>目前 UA 分析监测可补全的系统：Windows 7、Windows 10、Mac OS X Lion、Ubuntu 14.04；浏览器：所有品牌和系列。</p>
<h5 id="Windows10-64位"><a href="#Windows10-64位" class="headerlink" title="Windows10 64位"></a>Windows10 64位</h5><p>微软Chrome内核 Edge 浏览器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 Edg/80.0.361.69</span><br></pre></td></tr></table></figure>

<p>360极速浏览器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36 QIHU 360EE</span><br></pre></td></tr></table></figure>

<h5 id="Windows-7-64位"><a href="#Windows-7-64位" class="headerlink" title="Windows 7 64位"></a>Windows 7 64位</h5><p>Internet Explorer 10 浏览器和 Internet Explorer 11 浏览器以及微软 Edge 浏览器为 Windows 10 64 位。</p>
<p>Chrome｜谷歌浏览器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.87 Safari/537.36</span><br></pre></td></tr></table></figure>

<p>Firefox｜火狐浏览器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</span><br></pre></td></tr></table></figure>

<p>Opera｜欧朋浏览器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.87 Safari/537.36 OPR/37.0.2178.32</span><br></pre></td></tr></table></figure>

<p>Safari｜苹果浏览器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2</span><br></pre></td></tr></table></figure>

<p>360极速浏览器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36</span><br></pre></td></tr></table></figure>

<p>360安全浏览器<br>Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;45.0.2454.101 Safari&#x2F;537.36</p>
<p>微软 Edge 浏览器<br>Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;46.0.2486.0 Safari&#x2F;537.36 Edge&#x2F;13.10586</p>
<p>Internet Explorer 11 浏览器<br>Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64; Trident&#x2F;7.0; rv:11.0) like Gecko</p>
<p>Internet Explorer 10 浏览器<br>Mozilla&#x2F;5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident&#x2F;6.0)</p>
<p>Internet Explorer 9 浏览器<br>Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident&#x2F;5.0)</p>
<p>Internet Explorer 8 浏览器<br>Mozilla&#x2F;4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident&#x2F;4.0)</p>
<p>百度浏览器<br>Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;47.0.2526.106 BIDUBrowser&#x2F;8.3 Safari&#x2F;537.36</p>
<p>遨游浏览器<br>Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Maxthon&#x2F;4.9.2.1000 Chrome&#x2F;39.0.2146.0 Safari&#x2F;537.36</p>
<p>QQ浏览器<br>Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;47.0.2526.80 Safari&#x2F;537.36 Core&#x2F;1.47.277.400 QQBrowser&#x2F;9.4.7658.400</p>
<p>UC浏览器电脑版<br>Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;48.0.2564.116 UBrowser&#x2F;5.6.12150.8 Safari&#x2F;537.36</p>
<p>搜狗浏览器<br>Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;38.0.2125.122 Safari&#x2F;537.36 SE 2.X MetaSr 1.0</p>
<p>猎豹浏览器<br>Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;42.0.2311.154 Safari&#x2F;537.36 LBBROWSER</p>
<p>世界之窗浏览器<br>Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;48.0.2564.116 Safari&#x2F;537.36 TheWorld 7</p>
<p>安卓版QQ浏览器<br>Mozilla&#x2F;5.0 (Linux; Android 5.0; SM-N9100 Build&#x2F;LRX21V) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Version&#x2F;4.0 Chrome&#x2F;37.0.0.0 Mobile Safari&#x2F;537.36 V1_AND_SQ_5.3.1_196_YYB_D QQ&#x2F;5.3.1.2335 NetType&#x2F;WIFI</p>
<p>安卓版微信浏览器<br>Mozilla&#x2F;5.0 (Linux; Android 5.0; SM-N9100 Build&#x2F;LRX21V) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Version&#x2F;4.0 Chrome&#x2F;37.0.0.0 Mobile Safari&#x2F;537.36 MicroMessenger&#x2F;6.0.2.56_r958800.520 NetType&#x2F;WIFI</p>
<p>IOS版QQ浏览器<br>Mozilla&#x2F;5.0 (iPhone; CPU iPhone OS 7_1_2 like Mac OS X) AppleWebKit&#x2F;537.51.2 (KHTML, like Gecko) Mobile&#x2F;11D257 QQ&#x2F;5.2.1.302 NetType&#x2F;WIFI Mem&#x2F;28</p>
<p>IOS版微信浏览器<br>Mozilla&#x2F;5.0 (iPhone; CPU iPhone OS 7_1_2 like Mac OS X) AppleWebKit&#x2F;537.51.2 (KHTML, like Gecko) Mobile&#x2F;11D257 MicroMessenger&#x2F;6.0.1 NetType&#x2F;WIFI</p>
]]></content>
      <categories>
        <category>浏览器</category>
      </categories>
      <tags>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>排序分类及复杂度</title>
    <url>/2021/12/30/%E6%8E%92%E5%BA%8F%E5%88%86%E7%B1%BB%E5%8F%8A%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    <content><![CDATA[<span id="more"></span>

<img src="/2021/12/30/%E6%8E%92%E5%BA%8F%E5%88%86%E7%B1%BB%E5%8F%8A%E5%A4%8D%E6%9D%82%E5%BA%A6/220889961_1562662824473_E4079B937C5F8E67C8EB8058A3D030F2.png" class>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>接口返回数据脱敏</title>
    <url>/2022/07/25/%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE%E8%84%B1%E6%95%8F/</url>
    <content><![CDATA[<p>接口返回的隐私数据脱敏<span id="more"></span></p>
<h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><p>通过自定义注解，在脱敏的字段加上，并指定脱敏操作。</p>
<h3 id="自定义代码"><a href="#自定义代码" class="headerlink" title="自定义代码"></a>自定义代码</h3><h4 id="自定义数据注解"><a href="#自定义数据注解" class="headerlink" title="自定义数据注解"></a>自定义数据注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DataMasking &#123;</span><br><span class="line">    DataMaskingFunc <span class="title function_">maskFunc</span><span class="params">()</span> <span class="keyword">default</span> DataMaskingFunc.NO_MASK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自定义Serializer"><a href="#自定义Serializer" class="headerlink" title="自定义Serializer"></a>自定义Serializer</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DataMaskingOperation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">MASK_CHAR</span> <span class="operator">=</span> <span class="string">&quot;*&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    String <span class="title function_">mask</span><span class="params">(String content, String maskChar)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">DataMaskingFunc</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  脱敏转换器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     NO_MASK((str, maskChar) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">     &#125;),</span><br><span class="line">     ALL_MASK((str, maskChar) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasLength(str)) &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">                sb.append(StringUtils.hasLength(maskChar) ? maskChar : DataMaskingOperation.MASK_CHAR);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DataMaskingOperation operation;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">DataMaskingFunc</span><span class="params">(DataMaskingOperation operation)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.operation = operation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DataMaskingOperation <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.operation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">DataMaskingSerializer</span> <span class="keyword">extends</span> <span class="title class_">StdScalarSerializer</span>&lt;Object&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DataMaskingOperation operation;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DataMaskingSerializer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(String.class, <span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">this</span>.operation = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DataMaskingSerializer</span><span class="params">(DataMaskingOperation operation)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(String.class, <span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">this</span>.operation = operation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(SerializerProvider prov, Object value)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String)value;</span><br><span class="line">        <span class="keyword">return</span> str.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object value, JsonGenerator gen, SerializerProvider provider)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(operation)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> DataMaskingFunc.ALL_MASK.operation().mask((String) value, <span class="literal">null</span>);</span><br><span class="line">            gen.writeString(content);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> operation.mask((String) value, <span class="literal">null</span>);</span><br><span class="line">            gen.writeString(content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">serializeWithType</span><span class="params">(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.serialize(value, gen, provider);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> JsonNode <span class="title function_">getSchema</span><span class="params">(SerializerProvider provider, Type typeHint)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.createSchemaNode(<span class="string">&quot;string&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">acceptJsonFormatVisitor</span><span class="params">(JsonFormatVisitorWrapper visitor, JavaType typeHint)</span> <span class="keyword">throws</span> JsonMappingException &#123;</span><br><span class="line">        <span class="built_in">this</span>.visitStringFormat(visitor, typeHint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自定义AnnotationIntrospector，适配我们自定义注解返回相应的Serializer"><a href="#自定义AnnotationIntrospector，适配我们自定义注解返回相应的Serializer" class="headerlink" title="自定义AnnotationIntrospector，适配我们自定义注解返回相应的Serializer"></a>自定义AnnotationIntrospector，适配我们自定义注解返回相应的Serializer</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataMaskingAnnotationIntrospector</span> <span class="keyword">extends</span> <span class="title class_">NopAnnotationIntrospector</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">findSerializer</span><span class="params">(Annotated am)</span> &#123;</span><br><span class="line">        <span class="type">DataMasking</span> <span class="variable">annotation</span> <span class="operator">=</span> am.getAnnotation(DataMasking.class);</span><br><span class="line">        <span class="keyword">if</span> (annotation != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataMaskingSerializer</span>(annotation.maskFunc().operation());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="覆盖ObjectMapper"><a href="#覆盖ObjectMapper" class="headerlink" title="覆盖ObjectMapper"></a>覆盖ObjectMapper</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">        proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataMaskConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">            proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass(&#123;Jackson2ObjectMapperBuilder.class&#125;)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JacksonObjectMapperConfiguration</span> &#123;</span><br><span class="line">        JacksonObjectMapperConfiguration() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@Primary</span></span><br><span class="line">        ObjectMapper <span class="title function_">jacksonObjectMapper</span><span class="params">(Jackson2ObjectMapperBuilder builder)</span> &#123;</span><br><span class="line">            <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> builder.createXmlMapper(<span class="literal">false</span>).build();</span><br><span class="line">            <span class="type">AnnotationIntrospector</span> <span class="variable">ai</span> <span class="operator">=</span> objectMapper.getSerializationConfig().getAnnotationIntrospector();</span><br><span class="line">            <span class="type">AnnotationIntrospector</span> <span class="variable">newAi</span> <span class="operator">=</span> AnnotationIntrospectorPair.pair(ai, <span class="keyword">new</span> <span class="title class_">DataMaskingAnnotationIntrospector</span>());</span><br><span class="line">            objectMapper.setAnnotationIntrospector(newAi);</span><br><span class="line">            <span class="keyword">return</span> objectMapper;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="返回对象加上注解"><a href="#返回对象加上注解" class="headerlink" title="返回对象加上注解"></a>返回对象加上注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DataMasking(maskFunc = DataMaskingFunc.ALL_MASK)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 邮箱</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DataMasking(maskFunc = DataMaskingFunc.ALL_MASK)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库数据相关</title>
    <url>/2022/01/16/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<p>数据相关<span id="more"></span></p>
<h6 id="数据库的隔离级别"><a href="#数据库的隔离级别" class="headerlink" title="数据库的隔离级别"></a>数据库的隔离级别</h6><table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读（Dirty Read）</th>
<th>不可重复读（NonRepeatable Read）</th>
<th>幻读（Phantom Read）</th>
</tr>
</thead>
<tbody><tr>
<td>未提交读（Read uncommitted）</td>
<td>可能</td>
<td>可能</td>
<td>可能</td>
</tr>
<tr>
<td>已提交读（Read committed）</td>
<td>不可能</td>
<td>可能</td>
<td>可能</td>
</tr>
<tr>
<td>可重复读（Repeatable read）</td>
<td>不可能</td>
<td>不可能</td>
<td>可能</td>
</tr>
<tr>
<td>可串行化（Serializable ）</td>
<td>不可能</td>
<td>不可能</td>
<td>不可能</td>
</tr>
</tbody></table>
<p>未提交读(Read Uncommitted)：允许脏读，也就是可能读取到其他会话中未提交事务修改的数据。</p>
<p>提交读(Read Committed)：只能读取到已经提交的数据。Oracle等多数数据库默认都是该级别 (不重复读)。</p>
<p>可重复读(Repeated Read)：可重复读。在同一个事务内的查询都是事务开始时刻一致的，InnoDB默认级别。在SQL标准中，该隔离级别消除了不可重复读，但是还存在幻象读。</p>
<p>串行读(Serializable)：完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞。</p>
<h6 id="数据库索引底层是怎么实现的？哪些情况下索引会失效？"><a href="#数据库索引底层是怎么实现的？哪些情况下索引会失效？" class="headerlink" title="数据库索引底层是怎么实现的？哪些情况下索引会失效？"></a>数据库索引底层是怎么实现的？哪些情况下索引会失效？</h6><p>B+树实现的。</p>
<p>没有遵循最左匹配原则。</p>
<p>一些关键字会导致索引失效，例如 or， ！&#x3D; ， not in，is null ,is not unll</p>
<p>like查询是以%开头</p>
<p>隐式转换会导致索引失效。</p>
<p>对索引应用内部函数，索引字段进行了运算。</p>
<h6 id="数据库的两种引擎使用方法"><a href="#数据库的两种引擎使用方法" class="headerlink" title="数据库的两种引擎使用方法"></a>数据库的两种引擎使用方法</h6><p>InnoDB是聚集索引，支持事务，支持行级锁，主要面向在线事务处理（OLTP）的应用；</p>
<p>MyISAM是非聚集索引，不支持事务，只支持表级锁，主要面向一些OLAP的应用。</p>
<h6 id="数据库水平切分与垂直切分"><a href="#数据库水平切分与垂直切分" class="headerlink" title="数据库水平切分与垂直切分"></a>数据库水平切分与垂直切分</h6><p>垂直拆分就是要把表按模块划分到不同数据库表中（当然原则还是不破坏第三范式）。说得简单就是要把原来强耦合的系统拆分成多个弱耦合的服务，通过服务间的调用来满足业务需求看，因此表拆出来后要通过服务的形式暴露出去，而不是直接调用不同模块的表，也非常有利于进行局部的优化和治理，保障核心模块的稳定性。</p>
<p>水平拆分，上面谈到垂直切分只是把表按模块划分到不同数据库，但没有解决单表大数据量的问题，而水平切分就是要把一个表按照某种规则把数据划分到不同表或数据库里。</p>
<p>通俗理解：水平拆分行，行数据拆分到不同表中， 垂直拆分列，表数据拆分到不同表中。</p>
<h6 id="JDBC中如何进行事务处理"><a href="#JDBC中如何进行事务处理" class="headerlink" title="JDBC中如何进行事务处理"></a>JDBC中如何进行事务处理</h6><p>Connection提供了事务处理的方法，通过调用setAutoCommit(false)可以设置手动提交事务；当事务完成后用commit()显式提交事务；如果在事务处理过程中发生异常则通过rollback()进行事务回滚。除此之外，从JDBC 3.0中还引入了Savepoint（保存点）的概念，允许通过代码设置保存点并让事务回滚到指定的保存点。</p>
<h6 id="数据库的事物特性"><a href="#数据库的事物特性" class="headerlink" title="数据库的事物特性"></a>数据库的事物特性</h6><ul>
<li>原子性(Atomic)：事务中各项操作，要么全做要么全不做，任何一项操作的失败都会导致整个事务的失败；</li>
<li>一致性(Consistent)：事务结束后系统状态是一致的；</li>
<li>隔离性(Isolated)：并发执行的事务彼此无法看到对方的中间状态；</li>
<li>持久性(Durable)：事务完成后所做的改动都会被持久化，即使发生灾难性的失败。通过日志和同步备份可以在故障发生后重建数据。</li>
</ul>
<h6 id="使用JDBC操作数据库时，经常遇到性能问题，请你说明一下如何提升读取数据的性能，以及更新数据的性能？"><a href="#使用JDBC操作数据库时，经常遇到性能问题，请你说明一下如何提升读取数据的性能，以及更新数据的性能？" class="headerlink" title="使用JDBC操作数据库时，经常遇到性能问题，请你说明一下如何提升读取数据的性能，以及更新数据的性能？"></a>使用JDBC操作数据库时，经常遇到性能问题，请你说明一下如何提升读取数据的性能，以及更新数据的性能？</h6><p>要提升读取数据的性能，可以指定通过结果集（ResultSet）对象的setFetchSize()方法指定每次抓取的记录数（典型的空间换时间策略）；要提升更新数据的性能可以使用PreparedStatement语句构建批处理，将若干SQL语句置于一个批处理中执行。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库的删除与授权</title>
    <url>/2022/05/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%88%A0%E9%99%A4%E4%B8%8E%E6%8E%88%E6%9D%83/</url>
    <content><![CDATA[<p>oracle表的快速删除和授权操作<span id="more"></span></p>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><h5 id="delete和truncate"><a href="#delete和truncate" class="headerlink" title="delete和truncate"></a>delete和truncate</h5><p>1、Truncate比Delete所用的事务日志空间更少：</p>
<p>DELETE 是一行一行操作，并且把记录都存进日志文件（无论任何恢复模式，都会记录日志）。而TRUNCATE操作，通过释放存储表数据所用的数据页来删除数据，并且只在事务日志中记录页的释放，在日志中，仅仅记录释放页的这个动作，而不记录每一行。</p>
<p>2、Truncate比Delete使用锁通常较少：</p>
<p>DELETE由于是一行一行删除，所以需要对处理的行进行加锁，而且是行锁。TRUNCATE操作由于是对页操作，所以只需要申请页锁或者表锁。</p>
<p>3、TRUNCATE对表中的所有页都清空：</p>
<p>执行DELETE后，表还是会有空页，但是TRUNCATE则会全部清除。但是TRUNCATE会保留表结构、列、约束、索引等。</p>
<h5 id="truncate-、drop和-delete"><a href="#truncate-、drop和-delete" class="headerlink" title="truncate 、drop和 delete"></a>truncate 、drop和 delete</h5><p>1、truncate 和 delete 只删除数据不删除表的结构(定义)</p>
<p>2、truncate和drop自动提交事务，delete需要提交事务</p>
<p>3、delete 语句不影响表所占用的 extent，高水线(high watermark)保持原位置不动；truncate 语句缺省情况下见空间释放到 minextents个 extent，除非使用reuse storage；truncate 会将高水线复位(回到最开始)。</p>
<p>为了更好地删除空间，可以使用以下方法：</p>
<p>（1）在表中创建聚集索引</p>
<p>（2）如果所有数据已经不要，那使用TRUNCATE 而不是DELETE，删除后DROP TABLE 。</p>
<h4 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h4><ul>
<li>select * from dba_users; –查询数据库中的所有用户</li>
<li>GRANT SELECT ON tableName to userName;–授权查询（将表tableName的查询权授给userName）<br>  GRANT INSERT ON tableName to userName;–授权插入（将表tableName的插入权授给userName）<br>  GRANT UPDATE ON tableName to userName;–授权更新（将表tableName的更新权授给userName）<br>  GRANT UPDATE ON table1 to userName with grant option; –授权更新权限转移给用户，该用户可以继续授权；<br>  GRANT EXECUTE ON procedure1 to userName;–授权存储过程</li>
<li>revoke select on table1 from user1; –收回查询表的权限；<br>  revoke all on table1 from user1;–收回表table1的所有权限；</li>
<li>select table_name,privilege from dba_tab_privs where grantee&#x3D;’xujin’ ;–查询一个用户拥有的对象权限<br>  select * from dba_sys_privs where grantee&#x3D;’xujin’ ;–查询一个用户拥有的系统权限<br>  select * from session_privs ;–a当前会话有效的系统权限</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>数组转List</title>
    <url>/2022/05/03/%E6%95%B0%E7%BB%84%E8%BD%ACList/</url>
    <content><![CDATA[<p>数组转换成List一般使用Arrays.asList，但是转换后的List只能查询、更改，不能增加和删除。还有其他几种方式转换，这里记录几种转换的差异。<span id="more"></span></p>
<h4 id="常用方式"><a href="#常用方式" class="headerlink" title="常用方式"></a>常用方式</h4><p>通过 <code>Arrays.asList(strArray)</code> 方式将数组转换List后，不能对List增删，只能查询和修改，否则抛出异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> Arrays.asList(strArray)</span><br></pre></td></tr></table></figure>

<h5 id="增加操作"><a href="#增加操作" class="headerlink" title="增加操作"></a>增加操作</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">testArrayCastToListError</span><span class="params">()</span> &#123;</span><br><span class="line">    String[] strArray = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> Arrays.asList(strArray);</span><br><span class="line">    <span class="comment">//对转换后的list插入一条数据</span></span><br><span class="line">    list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.UnsupportedOperationException</span><br><span class="line">        at java.util.AbstractList.add(AbstractList.java:<span class="number">148</span>)</span><br><span class="line">        at java.util.AbstractList.add(AbstractList.java:<span class="number">108</span>)</span><br><span class="line">        at com.darwin.junit.Calculator.testArrayCastToList(Calculator.java:<span class="number">19</span>)</span><br><span class="line">        at com.darwin.junit.Calculator.main(Calculator.java:<span class="number">44</span>)</span><br></pre></td></tr></table></figure>

<h6 id="异常原因"><a href="#异常原因" class="headerlink" title="异常原因"></a>异常原因</h6><p><code>Arrays.asList(strArray)</code>返回值是<code>java.util.Arrays</code>类中一个私有静态内部类<code>java.util.Arrays.ArrayList</code>，它并非<code>java.util.ArrayList</code>类。<code>java.util.Arrays.ArrayList</code>类具有 set()，get()，contains()等方法，但是不具有添加<code>add()</code>或删除<code>remove()</code>方法,所以调用<code>add()</code>方法会报错。</p>
<h4 id="转换返回值类型"><a href="#转换返回值类型" class="headerlink" title="转换返回值类型"></a>转换返回值类型</h4><p><code>Arrays.asList(strArray)</code>返回值是<code>java.util.Arrays</code>类中一个私有静态内部类<code>java.util.Arrays.ArrayList</code>，那么通过<code>java.util.ArrayList</code>的构造器，将<code>Arrays.asList(strArray)</code>的返回值由<code>java.util.Arrays.ArrayList</code>转为<code>java.util.ArrayList</code>，<code>java.util.ArrayList</code>可以对List进行增删改查。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(Arrays.asList(strArray))</span><br></pre></td></tr></table></figure>

<h5 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">testArrayCastToListRight</span><span class="params">()</span> &#123;</span><br><span class="line">    String[] strArray = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">2</span>];</span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(Arrays.asList(strArray)) ;</span><br><span class="line">    list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="literal">null</span>, <span class="literal">null</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h4 id="工具类转换"><a href="#工具类转换" class="headerlink" title="工具类转换"></a>工具类转换</h4><p><code>Collections.addAll(arrayList, strArray)</code>转换，首先创建一个空List，再将数组元素放进去，这种方式大多数情况下是最快的。</p>
<blockquote>
<p>Adds all of the specified elements to the specified collection. Elements to be added may be specified individually or as an array. The behavior of this convenience method is identical to that of c.addAll(Arrays.asList(elements)), but this method is likely to run significantly faster under most implementations.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt; String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(strArray.length);</span><br><span class="line">Collections.addAll(arrayList, strArray);</span><br></pre></td></tr></table></figure>

<h5 id="增加-1"><a href="#增加-1" class="headerlink" title="增加"></a>增加</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">testArrayCastToListEfficient</span><span class="params">()</span>&#123;</span><br><span class="line">    String[] strArray = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">2</span>];</span><br><span class="line">    ArrayList&lt; String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(strArray.length);</span><br><span class="line">    Collections.addAll(arrayList, strArray);</span><br><span class="line">    arrayList.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    System.out.println(arrayList);</span><br><span class="line">&#125;</span><br><span class="line">[<span class="literal">null</span>, <span class="literal">null</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h4 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h4><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] intArray1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">List&lt;Integer&gt; list1 = Arrays.asList(intArray1);<span class="comment">//此处报错！！！</span></span><br></pre></td></tr></table></figure>

<p>报错原因：等号两边类型不一致，当然编译不通过。</p>
<p>原因：只能用<code>Integer[]</code>转<code>List&lt;Integer&gt;</code>，即只能用基本数据类型的包装类型，才能直接转为<code>List</code>。</p>
<h6 id="List源码："><a href="#List源码：" class="headerlink" title="List源码："></a>List源码：</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">List</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">Collection</span>&lt;E&gt; &#123;&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Arrays-asList-源码"><a href="#Arrays-asList-源码" class="headerlink" title="Arrays.asList()源码"></a>Arrays.asList()源码</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">asList</span><span class="params">(T... a)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>从上述源码中可以看出，<code>List</code>声明时，需要传递一个泛型<code>&lt;E&gt;</code>作为形参，<code>asList()</code>参数类型也是泛型中的通配类型<code>&lt;T&gt;</code>。Java中所有的泛型必须是引用类型。</li>
<li>其他8种基本数据类型<code>byte、short、int、long、float、double、char</code>也都不是引用类型，所以8种基本数据类型都不能作为List的形参。但<code>String、数组、class、interface</code>是引用类型，都可以作为List的形参，所以存在<code>List&lt;Runnable&gt;</code>接口类型的集合、<code>List&lt;int[]&gt;</code>数组类型的集合、<code>List&lt;String&gt;</code>类的集合。但不存在<code>list&lt;byte&gt;</code>、<code>list&lt;short&gt;</code> 等基本类型的集合。</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>时间戳格式转换</title>
    <url>/2022/01/04/%E6%97%B6%E9%97%B4%E6%88%B3%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>java时间与时间戳相互转换<span id="more"></span></p>
<h6 id="时间转换成时间戳"><a href="#时间转换成时间戳" class="headerlink" title="时间转换成时间戳"></a>时间转换成时间戳</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">dateToStamp</span><span class="params">(String s)</span> <span class="keyword">throws</span> ParaseException&#123;</span><br><span class="line">    String res;</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> simpleDateFormat.parse(s);</span><br><span class="line">    <span class="type">long</span> <span class="variable">ts</span> <span class="operator">=</span> date.getTime();</span><br><span class="line">    res = String.valueOf(ts);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="时间戳转换成时间"><a href="#时间戳转换成时间" class="headerlink" title="时间戳转换成时间"></a>时间戳转换成时间</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">dateToStamp</span><span class="params">(String s)</span>&#123;</span><br><span class="line">    String res;</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">lt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Long</span>(s);</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(lt);</span><br><span class="line">    res = simpleDateFormat.format(date);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>格式化</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>线程休眠方式</title>
    <url>/2022/07/20/%E7%BA%BF%E7%A8%8B%E4%BC%91%E7%9C%A0%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>sleep函数将当前线程休眠，说明两种实现方式。<span id="more"></span></p>
<h3 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread.currentThread().sleep(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p>在需要程序等待的地方加入这个语句，实现让程序等待，这里的参数1000是以毫秒为单位，即这语句可以让程序等待1秒。 </p>
<h3 id="TimeUnit类"><a href="#TimeUnit类" class="headerlink" title="TimeUnit类"></a>TimeUnit类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line">TimeUnit.DAYS.sleep(<span class="number">1</span>);<span class="comment">//天</span></span><br><span class="line">TimeUnit.HOURS.sleep(<span class="number">1</span>);<span class="comment">//小时</span></span><br><span class="line">TimeUnit.MINUTES.sleep(<span class="number">1</span>);<span class="comment">//分</span></span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);<span class="comment">//秒</span></span><br><span class="line">TimeUnit.MILLISECONDS.sleep(<span class="number">1000</span>);<span class="comment">//毫秒</span></span><br><span class="line">TimeUnit.MICROSECONDS.sleep(<span class="number">1000</span>);<span class="comment">//微妙</span></span><br><span class="line">TimeUnit.NANOSECONDS.sleep(<span class="number">1000</span>);<span class="comment">//纳秒</span></span><br></pre></td></tr></table></figure>

<p>TimeUnit类提供的方法，其实底层调用的也是Thread类的sleep方法，让程序进行等待。只不过他在上层根据时间单位进行了封装，共有7种可以选择，可以方便的选择自己需要的时间单位进行使用。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>解析MongoDB中的Excel文件</title>
    <url>/2022/05/03/%E8%A7%A3%E6%9E%90MongoDB%E4%B8%AD%E7%9A%84Excel%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>MongoDB解析Excel<span id="more"></span></p>
<p>因为某些规定，需求的流程是前端上传文件到MongoDB数据库，获取到文件的MongoID，然后将ID传递给后端；后端获取ID之后读取MongoDB数据库获取文件，再获取文件的字节流，根据字节流创建Excel表格。</p>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.data.mongodb.authentication-database</span> <span class="string">身份认证数据库名</span></span><br><span class="line"><span class="attr">spring.data.mongodb.database</span> <span class="string">数据库名</span></span><br><span class="line"><span class="attr">spring.data.mongodb.field-naming-strategy</span> <span class="string">要使用的 FieldNamingStrategy 的全限定名。</span></span><br><span class="line"><span class="attr">spring.data.mongodb.grid.fs.database</span> <span class="string">GridFS 数据库名称</span></span><br><span class="line"><span class="attr">spring.data.mongodb.host</span> <span class="string">MongoDB 服务器地址</span></span><br><span class="line"><span class="attr">spring.data.mongodb.username</span> <span class="string">MongoDB 账号</span></span><br><span class="line"><span class="attr">spring.data.mongodb.passwordMongoDB</span> <span class="string">密码</span></span><br><span class="line"><span class="attr">spring.data.mongodb.port</span> <span class="string">端口号</span></span><br><span class="line"><span class="attr">spring.data.mongodb.repositories.enabled</span> <span class="string">开启 Mongo 仓库（默认值：true）</span></span><br><span class="line"><span class="attr">spring.data.mongodb.uri</span> <span class="string">Mongo 数据库 URI。设置了该属性后就主机和端口号会被忽略。（默认值： mongodb:// localhost/test）</span></span><br></pre></td></tr></table></figure>

<h3 id="根据ID获取文件"><a href="#根据ID获取文件" class="headerlink" title="根据ID获取文件"></a>根据ID获取文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">GridFS</span> <span class="variable">gridFs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GridsFS</span>(mongoDbFactory.getDb());</span><br><span class="line"><span class="type">DBObject</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicDBObject</span>(<span class="string">&quot;_id&quot;</span>,<span class="keyword">new</span> <span class="title class_">ObjectId</span>(mongoid));</span><br><span class="line"><span class="type">GridFSDBFile</span> <span class="variable">gridFSFile</span> <span class="operator">=</span> gridFs.findOne(query);</span><br></pre></td></tr></table></figure>

<h3 id="通过字节流建立Excel表格"><a href="#通过字节流建立Excel表格" class="headerlink" title="通过字节流建立Excel表格"></a>通过字节流建立Excel表格</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> gridFSFile.getInputStream();</span><br><span class="line"><span class="type">XSSFWorkbook</span> <span class="variable">wb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>(in);</span><br></pre></td></tr></table></figure>

<p>后面Excel的解析就不再赘述了。</p>
<h3 id="GridFsTemplate说明"><a href="#GridFsTemplate说明" class="headerlink" title="GridFsTemplate说明"></a>GridFsTemplate说明</h3><p>GridFsTemplate是MongDB的一种构建模式，<strong>桶模式</strong>，意思就是吧所有的文档放到一起，没有集合。</p>
<img src="/2022/05/03/%E8%A7%A3%E6%9E%90MongoDB%E4%B8%AD%E7%9A%84Excel%E6%96%87%E4%BB%B6/20190626162750903.png" class>

<p>这种模式在处理物联网（IOT）、实时分析或通用时间序列数据时特别有效。通过将数据放在一起，我们可以更容易地将数据组织成特定的组，提高发现历史趋势或提供未来预测的能力，同时还能对存储进行优化。</p>
<h4 id="增删查操作"><a href="#增删查操作" class="headerlink" title="增删查操作"></a>增删查操作</h4><ul>
<li><p>存储文件</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> String <span class="title function_">saveFile</span><span class="params">(MultipartFile file, String fileName)</span> &#123;</span><br><span class="line">        <span class="type">DBObject</span> <span class="variable">metaData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicDBObject</span>();</span><br><span class="line">        metaData.put(<span class="string">&quot;createdDate&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = file.getInputStream();</span><br><span class="line"><span class="comment">//            文件流：inputStream</span></span><br><span class="line"><span class="comment">//            fileName：文件的唯一标识id</span></span><br><span class="line"><span class="comment">//            file.getContentType():内容类型</span></span><br><span class="line"><span class="comment">//            metaData：元数据</span></span><br><span class="line">            gridFsTemplate.store(inputStream, fileName, file.getContentType(), metaData);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;mongDb上传原图错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fileName;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询文件</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据文件的唯一标识检索对应的文件</span></span><br><span class="line"><span class="keyword">public</span> GridFSFile <span class="title function_">getFile</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Getting file..&quot;</span> + fileName);</span><br><span class="line">        <span class="type">GridFSFile</span> <span class="variable">result</span> <span class="operator">=</span> gridFsTemplate</span><br><span class="line">                .findOne(<span class="keyword">new</span> <span class="title class_">Query</span>(Criteria.where(<span class="string">&quot;filename&quot;</span>).is(fileName)));</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载文件</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">GridFS</span> <span class="variable">gridFs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GridsFS</span>(mongoDbFactory.getDb());</span><br><span class="line"><span class="type">DBObject</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicDBObject</span>(<span class="string">&quot;_id&quot;</span>,<span class="keyword">new</span> <span class="title class_">ObjectId</span>(mongoid));</span><br><span class="line"><span class="type">GridFSDBFile</span> <span class="variable">gridFSFile</span> <span class="operator">=</span> gridFs.findOne(query);</span><br><span class="line"><span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:&quot;</span> + File.separator;</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">gridFSFile.writeTo(file);</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除文件</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据文件的唯一标识删除对应的文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        gridFsTemplate.delete(<span class="keyword">new</span> <span class="title class_">Query</span>().addCriteria(Criteria.where(<span class="string">&quot;filename&quot;</span>).is(fileName)));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>  详情请参考<a href="https://docs.spring.io/spring-data/mongodb/docs/1.8.0.M1/api/org/springframework/data/mongodb/gridfs/GridFsTemplate.html">GridFsTemplate文档</a></p>
</li>
</ul>
<h3 id="MongoDbFactory"><a href="#MongoDbFactory" class="headerlink" title="MongoDbFactory"></a>MongoDbFactory</h3><p>用于创建DB实例，连接MongoDB数据库。</p>
<p>详情请参考<a href="https://docs.spring.io/spring-data/mongodb/docs/1.8.0.M1/api/org/springframework/data/mongodb/MongoDbFactory.html">MongoDbFactory</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>请求接口同时支持表单、json</title>
    <url>/2022/07/31/%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3%E5%90%8C%E6%97%B6%E6%94%AF%E6%8C%81%E8%A1%A8%E5%8D%95%E3%80%81json/</url>
    <content><![CDATA[<p>java请求接口同时支持json、form-data、表单格式<span id="more"></span></p>
<h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.PARAMETER)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MultiFormat &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自定义注解解析"><a href="#自定义注解解析" class="headerlink" title="自定义注解解析"></a>自定义注解解析</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiFormatMethodProcessor</span> <span class="keyword">implements</span> <span class="title class_">HandlerMethodArgumentResolver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServletModelAttributeMethodProcessor formResolver;</span><br><span class="line">    <span class="keyword">private</span> RequestResponseBodyMethodProcessor jsonResolver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MultiFormatMethodProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">PHPMessageConverter</span> <span class="variable">PHPMessageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PHPMessageConverter</span>();</span><br><span class="line">        messageConverters.add(PHPMessageConverter);</span><br><span class="line"></span><br><span class="line">        jsonResolver = <span class="keyword">new</span> <span class="title class_">JsonMethodArgumentResolver</span>(messageConverters);</span><br><span class="line">        formResolver = <span class="keyword">new</span> <span class="title class_">FormMethodArgumentResolver</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> &#123;</span><br><span class="line">        <span class="type">MultiFormat</span> <span class="variable">ann</span> <span class="operator">=</span> parameter.getParameterAnnotation(MultiFormat.class);</span><br><span class="line">        <span class="keyword">return</span> (ann != <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer, NativeWebRequest nativeWebRequest, WebDataBinderFactory webDataBinderFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ServletRequest</span> <span class="variable">servletRequest</span> <span class="operator">=</span> nativeWebRequest.getNativeRequest(ServletRequest.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> servletRequest.getContentType();</span><br><span class="line">        <span class="keyword">if</span> (contentType == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;不支持contentType&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (contentType.contains(<span class="string">&quot;application/json&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> jsonResolver.resolveArgument(methodParameter, modelAndViewContainer, nativeWebRequest, webDataBinderFactory);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (contentType.contains(<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> formResolver.resolveArgument(methodParameter, modelAndViewContainer, nativeWebRequest, webDataBinderFactory);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (contentType.contains(<span class="string">&quot;multipart&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> formResolver.resolveArgument(methodParameter, modelAndViewContainer, nativeWebRequest, webDataBinderFactory);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;不支持contentType&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="添加到Spring-Confirguration"><a href="#添加到Spring-Confirguration" class="headerlink" title="添加到Spring Confirguration"></a>添加到Spring Confirguration</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="keyword">public</span> MyMvcConfigurer <span class="title function_">mvcConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line"> 	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyMvcConfigurer</span>();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyMvcConfigurer</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addArgumentResolvers</span><span class="params">(List&lt;HandlerMethodArgumentResolver&gt; resolvers)</span> &#123;</span><br><span class="line">    	resolvers.add(<span class="keyword">new</span> <span class="title class_">GamePHPMethodProcessor</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="form-data特殊处理"><a href="#form-data特殊处理" class="headerlink" title="form-data特殊处理"></a>form-data特殊处理</h4><h5 id="引入jar包"><a href="#引入jar包" class="headerlink" title="引入jar包"></a>引入jar包</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="新增解析-bean"><a href="#新增解析-bean" class="headerlink" title="新增解析 bean"></a>新增解析 bean</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(name = &quot;multipartResolver&quot;)</span></span><br><span class="line"><span class="keyword">public</span> MultipartResolver <span class="title function_">multipartResolver</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">CommonsMultipartResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>();</span><br><span class="line">    resolver.setDefaultEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    resolver.setResolveLazily(<span class="literal">true</span>);<span class="comment">//resolveLazily属性启用是为了推迟文件解析，以在在UploadAction中捕获文件大小异常</span></span><br><span class="line">    resolver.setMaxInMemorySize(<span class="number">40960</span>);</span><br><span class="line">    resolver.setMaxUploadSize(<span class="number">50</span>*<span class="number">1024</span>*<span class="number">1024</span>);<span class="comment">//上传文件大小 50M 50*1024*1024</span></span><br><span class="line">    <span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只需将<code>@RequestParam</code> 注解改为 <code>@MultiFormat</code>，接口即可同时兼容三种 content-type。</p>
<p>流程为，spring 启动的时候，MyMvcConfigurer 调用 addArgumentResolvers 方法将 MultiFormatMethodProcessor注入，接到请求时，supportsParameter 方法判断是否使用此 resolver，如果为 true，则进入 resolveArgument 方法执行。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>过滤器和拦截器</title>
    <url>/2022/04/24/%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    <content><![CDATA[<p>在面向对象编程的过程中，我们很容易通过继承、多态来解决纵向扩展。但是对于横向的功能，比如，在所有的service方法中开启事务，或者统一记录日志等功能，面向对象的是无法解决的。所以，面向切面编程其实是面向对象编程思想的一个补充。而过滤器和拦截器都属于面向切面编程的具体实现。<span id="more"></span></p>
<h3 id="拦截器与过滤器"><a href="#拦截器与过滤器" class="headerlink" title="拦截器与过滤器"></a>拦截器与过滤器</h3><ul>
<li>Filter是依赖于Servlet容器，属于Servlet规范的一部分，而拦截器则是独立存在的，可以在任何情况下使用。</li>
<li>Filter的执行由Servlet容器回调完成，而拦截器通常通过动态代理的方式来执行。</li>
<li>Filter的生命周期由Servlet容器管理，而拦截器则可以通过IoC容器来管理，因此可以通过注入等方式来获取其他Bean的实例，因此使用会更方便。</li>
</ul>
<h3 id="过滤器的配置"><a href="#过滤器的配置" class="headerlink" title="过滤器的配置"></a>过滤器的配置</h3><p>示例：通过过滤器来实现记录请求执行时间的功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogCostFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">        System.out.println(<span class="string">&quot;执行时间：&quot;</span> + (System.currentTimeMillis() - startTime));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码的逻辑是在方法执行前先记录时间戳，然后通过过滤器链完成请求的执行，在返回结果之间计算执行的时间。</p>
<p>在Spring boot中，我们需要FilterRegistrationBean来完成配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">registFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">registration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> <span class="title class_">LogCostFilter</span>());</span><br><span class="line">        registration.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        registration.setName(<span class="string">&quot;LogCostFilter&quot;</span>);</span><br><span class="line">        registration.setOrder(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要配置的选项主要包括实例化Filter类，然后指定url的匹配模式，设置过滤器名称和执行顺序，这个过程和在web.xml中配置其实没什么区别，只是形式不同而已。</p>
<p>除了通过 FilterRegistrationBean 来配置以外，还有一种更直接的办法，直接通过注解就可以完成了:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;, filterName = &quot;logFilter2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogCostFilter2</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        System.out.println(<span class="string">&quot;LogFilter2 Execute cost=&quot;</span> + (System.currentTimeMillis() - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接用@WebFilter就可以进行配置，同样，可以设置url匹配模式，过滤器名称等。这里需要注意一点的是@WebFilter这个注解是Servlet3.0的规范，并不是Spring boot提供的。除了这个注解以外，我们还需在配置类中加另外一个注解：@ServletComponetScan，指定扫描的包。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.***.***.***&quot;)</span></span><br><span class="line"><span class="meta">@ServletComponentScan(&quot;com.***.***.***.filters&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@WebFilter</code>这个注解并没有指定执行顺序的属性，其执行顺序依赖于Filter的名称，是根据Filter类名（注意不是配置的filter的名字）的字母顺序倒序排列，并且@WebFilter指定的过滤器优先级都高于FilterRegistrationBean配置的过滤器。</p>
<h3 id="拦截器的配置"><a href="#拦截器的配置" class="headerlink" title="拦截器的配置"></a>拦截器的配置</h3><p>获取请求执行时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogCostInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Interceptor cost=&quot;</span>+(System.currentTimeMillis()-start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里需要实现HandlerInterceptor这个接口，这个接口包括三个方法，preHandle是请求执行前执行的，postHandler是请求结束执行的，但只有preHandle方法返回true的时候才会执行，afterCompletion是视图渲染完成后才执行，同样需要preHandle返回true，该方法通常用于清理资源等工作。除了实现上面的接口外，还需对其进行配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LogCostInterceptor</span>()).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.addInterceptors(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里继承了WebMVCConfigurerAdapter，在进行静态资源目录配置的时用到这个类。这里重写了addInterceptors这个方法，进行拦截器的配置，主要配置项就两个，一个是指定拦截器，第二个是指定拦截的URL。</p>
<p>其实这个实现是有问题的，因为preHandle和postHandle是两个方法，所以这里不得不设置一个共享变量start来存储开始值，但是这样就会存在线程安全问题。</p>
]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>推送代码出现443端口连接超时</title>
    <url>/2022/09/18/%E6%8E%A8%E9%80%81%E4%BB%A3%E7%A0%81%E5%87%BA%E7%8E%B0443%E7%AB%AF%E5%8F%A3%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6/</url>
    <content><![CDATA[<p>在推送代码到github时出现Failed to connect to github.com port 443:connection timed out错误<span id="more"></span></p>
<h4 id="取消代理"><a href="#取消代理" class="headerlink" title="取消代理"></a>取消代理</h4><p>git config –global –unset http.proxy</p>
<p>git config –global –unset https.proxy</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
</search>
